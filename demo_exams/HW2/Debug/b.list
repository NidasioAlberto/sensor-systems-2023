
b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003528  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080036bc  080036bc  000136bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036d4  080036d4  000200cc  2**0
                  CONTENTS
  4 .ARM          00000008  080036d4  080036d4  000136d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036dc  080036dc  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036dc  080036dc  000136dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036e0  080036e0  000136e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  080036e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  200000cc  080037b0  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  080037b0  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c42e  00000000  00000000  0002013f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019dd  00000000  00000000  0002c56d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb8  00000000  00000000  0002df50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000939  00000000  00000000  0002eb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000154e0  00000000  00000000  0002f441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c56a  00000000  00000000  00044921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000894f8  00000000  00000000  00050e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003188  00000000  00000000  000da384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000dd50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000cc 	.word	0x200000cc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080036a4 	.word	0x080036a4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000d0 	.word	0x200000d0
 80001d0:	080036a4 	.word	0x080036a4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 80004da:	88fb      	ldrh	r3, [r7, #6]
 80004dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004e0:	d003      	beq.n	80004ea <HAL_GPIO_EXTI_Callback+0x1a>
 80004e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004e6:	d003      	beq.n	80004f0 <HAL_GPIO_EXTI_Callback+0x20>
		break;
	case Button_Pin:
		next_note_idx = sizeof(song) / sizeof(Note);
		break;
	default:
		break;
 80004e8:	e006      	b.n	80004f8 <HAL_GPIO_EXTI_Callback+0x28>
		play_song(); // Start the song from the beginning
 80004ea:	f000 f815 	bl	8000518 <play_song>
		break;
 80004ee:	e003      	b.n	80004f8 <HAL_GPIO_EXTI_Callback+0x28>
		next_note_idx = sizeof(song) / sizeof(Note);
 80004f0:	4b03      	ldr	r3, [pc, #12]	; (8000500 <HAL_GPIO_EXTI_Callback+0x30>)
 80004f2:	2218      	movs	r2, #24
 80004f4:	601a      	str	r2, [r3, #0]
		break;
 80004f6:	bf00      	nop
	}
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	200001bc 	.word	0x200001bc

08000504 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	play_next_note();
 800050c:	f000 f81a 	bl	8000544 <play_next_note>
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <play_song>:

void play_song() {
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	// If a song is currently playing we need to stop it
	{
		HAL_TIM_Base_Stop(&htim1);
 800051c:	4806      	ldr	r0, [pc, #24]	; (8000538 <play_song+0x20>)
 800051e:	f001 fcfa 	bl	8001f16 <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop_IT(&htim2);
 8000522:	4806      	ldr	r0, [pc, #24]	; (800053c <play_song+0x24>)
 8000524:	f001 fd80 	bl	8002028 <HAL_TIM_Base_Stop_IT>
	}

	next_note_idx = 0; // Make sure to start from the beginning
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <play_song+0x28>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
	play_next_note();
 800052e:	f000 f809 	bl	8000544 <play_next_note>
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000e8 	.word	0x200000e8
 800053c:	20000130 	.word	0x20000130
 8000540:	200001bc 	.word	0x200001bc

08000544 <play_next_note>:

void play_next_note() {
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	if (next_note_idx == sizeof(song) / sizeof(Note)) {
 8000548:	4b10      	ldr	r3, [pc, #64]	; (800058c <play_next_note+0x48>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b18      	cmp	r3, #24
 800054e:	d104      	bne.n	800055a <play_next_note+0x16>
		// We reached the end of the song, stop
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000550:	2104      	movs	r1, #4
 8000552:	480f      	ldr	r0, [pc, #60]	; (8000590 <play_next_note+0x4c>)
 8000554:	f001 fea0 	bl	8002298 <HAL_TIM_PWM_Stop>
	} else {
		play_note(song[next_note_idx].tone); // Setup TIM1 to play the next note
		setup_tim2_next_interrupt(song[next_note_idx].duration);
		next_note_idx++;
	}
}
 8000558:	e015      	b.n	8000586 <play_next_note+0x42>
		play_note(song[next_note_idx].tone); // Setup TIM1 to play the next note
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <play_next_note+0x48>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <play_next_note+0x50>)
 8000560:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000564:	4618      	mov	r0, r3
 8000566:	f000 f817 	bl	8000598 <play_note>
		setup_tim2_next_interrupt(song[next_note_idx].duration);
 800056a:	4b08      	ldr	r3, [pc, #32]	; (800058c <play_next_note+0x48>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a09      	ldr	r2, [pc, #36]	; (8000594 <play_next_note+0x50>)
 8000570:	00db      	lsls	r3, r3, #3
 8000572:	4413      	add	r3, r2
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f8b4 	bl	80006e4 <setup_tim2_next_interrupt>
		next_note_idx++;
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <play_next_note+0x48>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	3301      	adds	r3, #1
 8000582:	4a02      	ldr	r2, [pc, #8]	; (800058c <play_next_note+0x48>)
 8000584:	6013      	str	r3, [r2, #0]
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	200001bc 	.word	0x200001bc
 8000590:	200000e8 	.word	0x200000e8
 8000594:	20000000 	.word	0x20000000

08000598 <play_note>:

void play_note(int tone) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b098      	sub	sp, #96	; 0x60
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80005a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80005ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80005b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
 80005c8:	615a      	str	r2, [r3, #20]
 80005ca:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2220      	movs	r2, #32
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f003 f839 	bl	800364c <memset>

	htim1.Instance = TIM1;
 80005da:	4b40      	ldr	r3, [pc, #256]	; (80006dc <play_note+0x144>)
 80005dc:	4a40      	ldr	r2, [pc, #256]	; (80006e0 <play_note+0x148>)
 80005de:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 100 - 1;
 80005e0:	4b3e      	ldr	r3, [pc, #248]	; (80006dc <play_note+0x144>)
 80005e2:	2263      	movs	r2, #99	; 0x63
 80005e4:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e6:	4b3d      	ldr	r3, [pc, #244]	; (80006dc <play_note+0x144>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = tone;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a3b      	ldr	r2, [pc, #236]	; (80006dc <play_note+0x144>)
 80005f0:	60d3      	str	r3, [r2, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f2:	4b3a      	ldr	r3, [pc, #232]	; (80006dc <play_note+0x144>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80005f8:	4b38      	ldr	r3, [pc, #224]	; (80006dc <play_note+0x144>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005fe:	4b37      	ldr	r3, [pc, #220]	; (80006dc <play_note+0x144>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000604:	4835      	ldr	r0, [pc, #212]	; (80006dc <play_note+0x144>)
 8000606:	f001 fc37 	bl	8001e78 <HAL_TIM_Base_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <play_note+0x7c>
		Error_Handler();
 8000610:	f000 fafa 	bl	8000c08 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000618:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800061a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800061e:	4619      	mov	r1, r3
 8000620:	482e      	ldr	r0, [pc, #184]	; (80006dc <play_note+0x144>)
 8000622:	f002 f8c1 	bl	80027a8 <HAL_TIM_ConfigClockSource>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <play_note+0x98>
		Error_Handler();
 800062c:	f000 faec 	bl	8000c08 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000630:	482a      	ldr	r0, [pc, #168]	; (80006dc <play_note+0x144>)
 8000632:	f001 fd28 	bl	8002086 <HAL_TIM_PWM_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <play_note+0xa8>
		Error_Handler();
 800063c:	f000 fae4 	bl	8000c08 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000640:	2300      	movs	r3, #0
 8000642:	64bb      	str	r3, [r7, #72]	; 0x48
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000644:	2300      	movs	r3, #0
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000648:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800064c:	4619      	mov	r1, r3
 800064e:	4823      	ldr	r0, [pc, #140]	; (80006dc <play_note+0x144>)
 8000650:	f002 fc66 	bl	8002f20 <HAL_TIMEx_MasterConfigSynchronization>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <play_note+0xc6>
			!= HAL_OK) {
		Error_Handler();
 800065a:	f000 fad5 	bl	8000c08 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800065e:	2360      	movs	r3, #96	; 0x60
 8000660:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.Pulse = tone / 2;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	0fda      	lsrs	r2, r3, #31
 8000666:	4413      	add	r3, r2
 8000668:	105b      	asrs	r3, r3, #1
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800066c:	2300      	movs	r3, #0
 800066e:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000670:	2300      	movs	r3, #0
 8000672:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000674:	2300      	movs	r3, #0
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000678:	2300      	movs	r3, #0
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800067c:	2300      	movs	r3, #0
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8000680:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000684:	2204      	movs	r2, #4
 8000686:	4619      	mov	r1, r3
 8000688:	4814      	ldr	r0, [pc, #80]	; (80006dc <play_note+0x144>)
 800068a:	f001 ffcb 	bl	8002624 <HAL_TIM_PWM_ConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <play_note+0x100>
			!= HAL_OK) {
		Error_Handler();
 8000694:	f000 fab8 	bl	8000c08 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800069c:	2300      	movs	r3, #0
 800069e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.DeadTime = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b0:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	4619      	mov	r1, r3
 80006bc:	4807      	ldr	r0, [pc, #28]	; (80006dc <play_note+0x144>)
 80006be:	f002 fc9d 	bl	8002ffc <HAL_TIMEx_ConfigBreakDeadTime>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <play_note+0x134>
			!= HAL_OK) {
		Error_Handler();
 80006c8:	f000 fa9e 	bl	8000c08 <Error_Handler>
	}

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80006cc:	2104      	movs	r1, #4
 80006ce:	4803      	ldr	r0, [pc, #12]	; (80006dc <play_note+0x144>)
 80006d0:	f001 fd32 	bl	8002138 <HAL_TIM_PWM_Start>
}
 80006d4:	bf00      	nop
 80006d6:	3760      	adds	r7, #96	; 0x60
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200000e8 	.word	0x200000e8
 80006e0:	40010000 	.word	0x40010000

080006e4 <setup_tim2_next_interrupt>:

void setup_tim2_next_interrupt(int duration) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]

	htim2.Instance = TIM2;
 8000704:	4b29      	ldr	r3, [pc, #164]	; (80007ac <setup_tim2_next_interrupt+0xc8>)
 8000706:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800070a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 8400 - 1; // 84MHz / 8400 = 10KHz -> 100us period
 800070c:	4b27      	ldr	r3, [pc, #156]	; (80007ac <setup_tim2_next_interrupt+0xc8>)
 800070e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000712:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000714:	4b25      	ldr	r3, [pc, #148]	; (80007ac <setup_tim2_next_interrupt+0xc8>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10 * duration;
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	4613      	mov	r3, r2
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	4413      	add	r3, r2
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	461a      	mov	r2, r3
 8000726:	4b21      	ldr	r3, [pc, #132]	; (80007ac <setup_tim2_next_interrupt+0xc8>)
 8000728:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072a:	4b20      	ldr	r3, [pc, #128]	; (80007ac <setup_tim2_next_interrupt+0xc8>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000730:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <setup_tim2_next_interrupt+0xc8>)
 8000732:	2200      	movs	r2, #0
 8000734:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000736:	481d      	ldr	r0, [pc, #116]	; (80007ac <setup_tim2_next_interrupt+0xc8>)
 8000738:	f001 fb9e 	bl	8001e78 <HAL_TIM_Base_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <setup_tim2_next_interrupt+0x62>
		Error_Handler();
 8000742:	f000 fa61 	bl	8000c08 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	4619      	mov	r1, r3
 8000752:	4816      	ldr	r0, [pc, #88]	; (80007ac <setup_tim2_next_interrupt+0xc8>)
 8000754:	f002 f828 	bl	80027a8 <HAL_TIM_ConfigClockSource>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <setup_tim2_next_interrupt+0x7e>
		Error_Handler();
 800075e:	f000 fa53 	bl	8000c08 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK) {
 8000762:	2108      	movs	r1, #8
 8000764:	4811      	ldr	r0, [pc, #68]	; (80007ac <setup_tim2_next_interrupt+0xc8>)
 8000766:	f001 fdfb 	bl	8002360 <HAL_TIM_OnePulse_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <setup_tim2_next_interrupt+0x90>
		Error_Handler();
 8000770:	f000 fa4a 	bl	8000c08 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800077c:	f107 0308 	add.w	r3, r7, #8
 8000780:	4619      	mov	r1, r3
 8000782:	480a      	ldr	r0, [pc, #40]	; (80007ac <setup_tim2_next_interrupt+0xc8>)
 8000784:	f002 fbcc 	bl	8002f20 <HAL_TIMEx_MasterConfigSynchronization>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <setup_tim2_next_interrupt+0xae>
			!= HAL_OK) {
		Error_Handler();
 800078e:	f000 fa3b 	bl	8000c08 <Error_Handler>
	}

	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <setup_tim2_next_interrupt+0xc8>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f06f 0201 	mvn.w	r2, #1
 800079a:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim2);
 800079c:	4803      	ldr	r0, [pc, #12]	; (80007ac <setup_tim2_next_interrupt+0xc8>)
 800079e:	f001 fbe1 	bl	8001f64 <HAL_TIM_Base_Start_IT>
}
 80007a2:	bf00      	nop
 80007a4:	3720      	adds	r7, #32
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000130 	.word	0x20000130

080007b0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007b4:	f000 fb8e 	bl	8000ed4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007b8:	f000 f80c 	bl	80007d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007bc:	f000 f998 	bl	8000af0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80007c0:	f000 f96c 	bl	8000a9c <MX_USART2_UART_Init>
	MX_TIM1_Init();
 80007c4:	f000 f87e 	bl	80008c4 <MX_TIM1_Init>
	MX_TIM2_Init();
 80007c8:	f000 f91c 	bl	8000a04 <MX_TIM2_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 80007cc:	f000 f86e 	bl	80008ac <MX_NVIC_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80007d0:	e7fe      	b.n	80007d0 <main+0x20>
	...

080007d4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b094      	sub	sp, #80	; 0x50
 80007d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007da:	f107 0320 	add.w	r3, r7, #32
 80007de:	2230      	movs	r2, #48	; 0x30
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 ff32 	bl	800364c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	4b29      	ldr	r3, [pc, #164]	; (80008a4 <SystemClock_Config+0xd0>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	4a28      	ldr	r2, [pc, #160]	; (80008a4 <SystemClock_Config+0xd0>)
 8000802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000806:	6413      	str	r3, [r2, #64]	; 0x40
 8000808:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <SystemClock_Config+0xd0>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <SystemClock_Config+0xd4>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000820:	4a21      	ldr	r2, [pc, #132]	; (80008a8 <SystemClock_Config+0xd4>)
 8000822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <SystemClock_Config+0xd4>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000834:	2302      	movs	r3, #2
 8000836:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000838:	2301      	movs	r3, #1
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083c:	2310      	movs	r3, #16
 800083e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000840:	2302      	movs	r3, #2
 8000842:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000844:	2300      	movs	r3, #0
 8000846:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000848:	2310      	movs	r3, #16
 800084a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 800084c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000850:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000852:	2304      	movs	r3, #4
 8000854:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000856:	2307      	movs	r3, #7
 8000858:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800085a:	f107 0320 	add.w	r3, r7, #32
 800085e:	4618      	mov	r0, r3
 8000860:	f000 fe72 	bl	8001548 <HAL_RCC_OscConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0x9a>
		Error_Handler();
 800086a:	f000 f9cd 	bl	8000c08 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800086e:	230f      	movs	r3, #15
 8000870:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000872:	2302      	movs	r3, #2
 8000874:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800087a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	2102      	movs	r1, #2
 800088a:	4618      	mov	r0, r3
 800088c:	f001 f8d4 	bl	8001a38 <HAL_RCC_ClockConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0xc6>
		Error_Handler();
 8000896:	f000 f9b7 	bl	8000c08 <Error_Handler>
	}
}
 800089a:	bf00      	nop
 800089c:	3750      	adds	r7, #80	; 0x50
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40007000 	.word	0x40007000

080008ac <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2100      	movs	r1, #0
 80008b4:	201c      	movs	r0, #28
 80008b6:	f000 fc5a 	bl	800116e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008ba:	201c      	movs	r0, #28
 80008bc:	f000 fc73 	bl	80011a6 <HAL_NVIC_EnableIRQ>
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b096      	sub	sp, #88	; 0x58
 80008c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80008ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80008d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80008e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
 80008f2:	615a      	str	r2, [r3, #20]
 80008f4:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2220      	movs	r2, #32
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f002 fea5 	bl	800364c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000902:	4b3e      	ldr	r3, [pc, #248]	; (80009fc <MX_TIM1_Init+0x138>)
 8000904:	4a3e      	ldr	r2, [pc, #248]	; (8000a00 <MX_TIM1_Init+0x13c>)
 8000906:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000908:	4b3c      	ldr	r3, [pc, #240]	; (80009fc <MX_TIM1_Init+0x138>)
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090e:	4b3b      	ldr	r3, [pc, #236]	; (80009fc <MX_TIM1_Init+0x138>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000914:	4b39      	ldr	r3, [pc, #228]	; (80009fc <MX_TIM1_Init+0x138>)
 8000916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800091a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091c:	4b37      	ldr	r3, [pc, #220]	; (80009fc <MX_TIM1_Init+0x138>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000922:	4b36      	ldr	r3, [pc, #216]	; (80009fc <MX_TIM1_Init+0x138>)
 8000924:	2200      	movs	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000928:	4b34      	ldr	r3, [pc, #208]	; (80009fc <MX_TIM1_Init+0x138>)
 800092a:	2200      	movs	r2, #0
 800092c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800092e:	4833      	ldr	r0, [pc, #204]	; (80009fc <MX_TIM1_Init+0x138>)
 8000930:	f001 faa2 	bl	8001e78 <HAL_TIM_Base_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM1_Init+0x7a>
		Error_Handler();
 800093a:	f000 f965 	bl	8000c08 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800093e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000942:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000944:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000948:	4619      	mov	r1, r3
 800094a:	482c      	ldr	r0, [pc, #176]	; (80009fc <MX_TIM1_Init+0x138>)
 800094c:	f001 ff2c 	bl	80027a8 <HAL_TIM_ConfigClockSource>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM1_Init+0x96>
		Error_Handler();
 8000956:	f000 f957 	bl	8000c08 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800095a:	4828      	ldr	r0, [pc, #160]	; (80009fc <MX_TIM1_Init+0x138>)
 800095c:	f001 fb93 	bl	8002086 <HAL_TIM_PWM_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM1_Init+0xa6>
		Error_Handler();
 8000966:	f000 f94f 	bl	8000c08 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096a:	2300      	movs	r3, #0
 800096c:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000972:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000976:	4619      	mov	r1, r3
 8000978:	4820      	ldr	r0, [pc, #128]	; (80009fc <MX_TIM1_Init+0x138>)
 800097a:	f002 fad1 	bl	8002f20 <HAL_TIMEx_MasterConfigSynchronization>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8000984:	f000 f940 	bl	8000c08 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000988:	2360      	movs	r3, #96	; 0x60
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000990:	2300      	movs	r3, #0
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000994:	2300      	movs	r3, #0
 8000996:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009a0:	2300      	movs	r3, #0
 80009a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 80009a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a8:	2204      	movs	r2, #4
 80009aa:	4619      	mov	r1, r3
 80009ac:	4813      	ldr	r0, [pc, #76]	; (80009fc <MX_TIM1_Init+0x138>)
 80009ae:	f001 fe39 	bl	8002624 <HAL_TIM_PWM_ConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM1_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 80009b8:	f000 f926 	bl	8000c08 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	4619      	mov	r1, r3
 80009de:	4807      	ldr	r0, [pc, #28]	; (80009fc <MX_TIM1_Init+0x138>)
 80009e0:	f002 fb0c 	bl	8002ffc <HAL_TIMEx_ConfigBreakDeadTime>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM1_Init+0x12a>
			!= HAL_OK) {
		Error_Handler();
 80009ea:	f000 f90d 	bl	8000c08 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80009ee:	4803      	ldr	r0, [pc, #12]	; (80009fc <MX_TIM1_Init+0x138>)
 80009f0:	f000 f96e 	bl	8000cd0 <HAL_TIM_MspPostInit>

}
 80009f4:	bf00      	nop
 80009f6:	3758      	adds	r7, #88	; 0x58
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200000e8 	.word	0x200000e8
 8000a00:	40010000 	.word	0x40010000

08000a04 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a18:	463b      	mov	r3, r7
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000a20:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <MX_TIM2_Init+0x94>)
 8000a22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a26:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_TIM2_Init+0x94>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_TIM2_Init+0x94>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_TIM2_Init+0x94>)
 8000a36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a3a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_TIM2_Init+0x94>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_TIM2_Init+0x94>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000a48:	4813      	ldr	r0, [pc, #76]	; (8000a98 <MX_TIM2_Init+0x94>)
 8000a4a:	f001 fa15 	bl	8001e78 <HAL_TIM_Base_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM2_Init+0x54>
		Error_Handler();
 8000a54:	f000 f8d8 	bl	8000c08 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000a5e:	f107 0308 	add.w	r3, r7, #8
 8000a62:	4619      	mov	r1, r3
 8000a64:	480c      	ldr	r0, [pc, #48]	; (8000a98 <MX_TIM2_Init+0x94>)
 8000a66:	f001 fe9f 	bl	80027a8 <HAL_TIM_ConfigClockSource>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM2_Init+0x70>
		Error_Handler();
 8000a70:	f000 f8ca 	bl	8000c08 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a74:	2300      	movs	r3, #0
 8000a76:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_TIM2_Init+0x94>)
 8000a82:	f002 fa4d 	bl	8002f20 <HAL_TIMEx_MasterConfigSynchronization>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000a8c:	f000 f8bc 	bl	8000c08 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	3718      	adds	r7, #24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000130 	.word	0x20000130

08000a9c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	; (8000aec <MX_USART2_UART_Init+0x50>)
 8000aa4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aac:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ad4:	f002 faf8 	bl	80030c8 <HAL_UART_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000ade:	f000 f893 	bl	8000c08 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000178 	.word	0x20000178
 8000aec:	40004400 	.word	0x40004400

08000af0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b3c      	ldr	r3, [pc, #240]	; (8000bfc <MX_GPIO_Init+0x10c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a3b      	ldr	r2, [pc, #236]	; (8000bfc <MX_GPIO_Init+0x10c>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b39      	ldr	r3, [pc, #228]	; (8000bfc <MX_GPIO_Init+0x10c>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b35      	ldr	r3, [pc, #212]	; (8000bfc <MX_GPIO_Init+0x10c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a34      	ldr	r2, [pc, #208]	; (8000bfc <MX_GPIO_Init+0x10c>)
 8000b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b32      	ldr	r3, [pc, #200]	; (8000bfc <MX_GPIO_Init+0x10c>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b2e      	ldr	r3, [pc, #184]	; (8000bfc <MX_GPIO_Init+0x10c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a2d      	ldr	r2, [pc, #180]	; (8000bfc <MX_GPIO_Init+0x10c>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b2b      	ldr	r3, [pc, #172]	; (8000bfc <MX_GPIO_Init+0x10c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <MX_GPIO_Init+0x10c>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a26      	ldr	r2, [pc, #152]	; (8000bfc <MX_GPIO_Init+0x10c>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <MX_GPIO_Init+0x10c>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2120      	movs	r1, #32
 8000b7a:	4821      	ldr	r0, [pc, #132]	; (8000c00 <MX_GPIO_Init+0x110>)
 8000b7c:	f000 fcb2 	bl	80014e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : Button_Pin */
	GPIO_InitStruct.Pin = Button_Pin;
 8000b80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b84:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b8a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	481b      	ldr	r0, [pc, #108]	; (8000c04 <MX_GPIO_Init+0x114>)
 8000b98:	f000 fb20 	bl	80011dc <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000b9c:	2320      	movs	r3, #32
 8000b9e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4813      	ldr	r0, [pc, #76]	; (8000c00 <MX_GPIO_Init+0x110>)
 8000bb4:	f000 fb12 	bl	80011dc <HAL_GPIO_Init>

	/*Configure GPIO pin : Microphone_Pin */
	GPIO_InitStruct.Pin = Microphone_Pin;
 8000bb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bbc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bbe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Microphone_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480c      	ldr	r0, [pc, #48]	; (8000c00 <MX_GPIO_Init+0x110>)
 8000bd0:	f000 fb04 	bl	80011dc <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2017      	movs	r0, #23
 8000bda:	f000 fac8 	bl	800116e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bde:	2017      	movs	r0, #23
 8000be0:	f000 fae1 	bl	80011a6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2100      	movs	r1, #0
 8000be8:	2028      	movs	r0, #40	; 0x28
 8000bea:	f000 fac0 	bl	800116e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bee:	2028      	movs	r0, #40	; 0x28
 8000bf0:	f000 fad9 	bl	80011a6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf4:	bf00      	nop
 8000bf6:	3728      	adds	r7, #40	; 0x28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000
 8000c04:	40020800 	.word	0x40020800

08000c08 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c10:	e7fe      	b.n	8000c10 <Error_Handler+0x8>
	...

08000c14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	4a0f      	ldr	r2, [pc, #60]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c28:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c52:	2007      	movs	r0, #7
 8000c54:	f000 fa80 	bl	8001158 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40023800 	.word	0x40023800

08000c64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a15      	ldr	r2, [pc, #84]	; (8000cc8 <HAL_TIM_Base_MspInit+0x64>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d10e      	bne.n	8000c94 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <HAL_TIM_Base_MspInit+0x68>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <HAL_TIM_Base_MspInit+0x68>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <HAL_TIM_Base_MspInit+0x68>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c92:	e012      	b.n	8000cba <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c9c:	d10d      	bne.n	8000cba <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_TIM_Base_MspInit+0x68>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a09      	ldr	r2, [pc, #36]	; (8000ccc <HAL_TIM_Base_MspInit+0x68>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <HAL_TIM_Base_MspInit+0x68>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
}
 8000cba:	bf00      	nop
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40010000 	.word	0x40010000
 8000ccc:	40023800 	.word	0x40023800

08000cd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 030c 	add.w	r3, r7, #12
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <HAL_TIM_MspPostInit+0x68>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d11e      	bne.n	8000d30 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HAL_TIM_MspPostInit+0x6c>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <HAL_TIM_MspPostInit+0x6c>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_TIM_MspPostInit+0x6c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d20:	2301      	movs	r3, #1
 8000d22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <HAL_TIM_MspPostInit+0x70>)
 8000d2c:	f000 fa56 	bl	80011dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d30:	bf00      	nop
 8000d32:	3720      	adds	r7, #32
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40010000 	.word	0x40010000
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020000 	.word	0x40020000

08000d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <HAL_UART_MspInit+0x84>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d12b      	bne.n	8000dbe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d9e:	230c      	movs	r3, #12
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dae:	2307      	movs	r3, #7
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <HAL_UART_MspInit+0x8c>)
 8000dba:	f000 fa0f 	bl	80011dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	3728      	adds	r7, #40	; 0x28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40004400 	.word	0x40004400
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020000 	.word	0x40020000

08000dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <NMI_Handler+0x4>

08000dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <HardFault_Handler+0x4>

08000de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <MemManage_Handler+0x4>

08000de6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <BusFault_Handler+0x4>

08000dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <UsageFault_Handler+0x4>

08000df2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e20:	f000 f8aa 	bl	8000f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Microphone_Pin);
 8000e2c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e30:	f000 fb72 	bl	8001518 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <TIM2_IRQHandler+0x10>)
 8000e3e:	f001 fae9 	bl	8002414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000130 	.word	0x20000130

08000e4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8000e50:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e54:	f000 fb60 	bl	8001518 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <SystemInit+0x20>)
 8000e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <SystemInit+0x20>)
 8000e68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e86:	490e      	ldr	r1, [pc, #56]	; (8000ec0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e88:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e8c:	e002      	b.n	8000e94 <LoopCopyDataInit>

08000e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e92:	3304      	adds	r3, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e98:	d3f9      	bcc.n	8000e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e9c:	4c0b      	ldr	r4, [pc, #44]	; (8000ecc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea0:	e001      	b.n	8000ea6 <LoopFillZerobss>

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea4:	3204      	adds	r2, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eaa:	f7ff ffd7 	bl	8000e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eae:	f002 fbd5 	bl	800365c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb2:	f7ff fc7d 	bl	80007b0 <main>
  bx  lr    
 8000eb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eb8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec0:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8000ec4:	080036e4 	.word	0x080036e4
  ldr r2, =_sbss
 8000ec8:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8000ecc:	200001c4 	.word	0x200001c4

08000ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC_IRQHandler>
	...

08000ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0d      	ldr	r2, [pc, #52]	; (8000f14 <HAL_Init+0x40>)
 8000ede:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <HAL_Init+0x40>)
 8000eea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <HAL_Init+0x40>)
 8000ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efc:	2003      	movs	r0, #3
 8000efe:	f000 f92b 	bl	8001158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f000 f808 	bl	8000f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f08:	f7ff fe84 	bl	8000c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023c00 	.word	0x40023c00

08000f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_InitTick+0x54>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_InitTick+0x58>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f943 	bl	80011c2 <HAL_SYSTICK_Config>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00e      	b.n	8000f64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b0f      	cmp	r3, #15
 8000f4a:	d80a      	bhi.n	8000f62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f54:	f000 f90b 	bl	800116e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f58:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <HAL_InitTick+0x5c>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e000      	b.n	8000f64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200000c0 	.word	0x200000c0
 8000f70:	200000c8 	.word	0x200000c8
 8000f74:	200000c4 	.word	0x200000c4

08000f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x20>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_IncTick+0x24>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <HAL_IncTick+0x24>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	200000c8 	.word	0x200000c8
 8000f9c:	200001c0 	.word	0x200001c0

08000fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <HAL_GetTick+0x14>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	200001c0 	.word	0x200001c0

08000fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	60d3      	str	r3, [r2, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <__NVIC_GetPriorityGrouping+0x18>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	f003 0307 	and.w	r3, r3, #7
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	db0b      	blt.n	8001046 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	f003 021f 	and.w	r2, r3, #31
 8001034:	4907      	ldr	r1, [pc, #28]	; (8001054 <__NVIC_EnableIRQ+0x38>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	095b      	lsrs	r3, r3, #5
 800103c:	2001      	movs	r0, #1
 800103e:	fa00 f202 	lsl.w	r2, r0, r2
 8001042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000e100 	.word	0xe000e100

08001058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db0a      	blt.n	8001082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	490c      	ldr	r1, [pc, #48]	; (80010a4 <__NVIC_SetPriority+0x4c>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	440b      	add	r3, r1
 800107c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001080:	e00a      	b.n	8001098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4908      	ldr	r1, [pc, #32]	; (80010a8 <__NVIC_SetPriority+0x50>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	3b04      	subs	r3, #4
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	440b      	add	r3, r1
 8001096:	761a      	strb	r2, [r3, #24]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f1c3 0307 	rsb	r3, r3, #7
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	bf28      	it	cs
 80010ca:	2304      	movcs	r3, #4
 80010cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3304      	adds	r3, #4
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d902      	bls.n	80010dc <NVIC_EncodePriority+0x30>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3b03      	subs	r3, #3
 80010da:	e000      	b.n	80010de <NVIC_EncodePriority+0x32>
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43d9      	mvns	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	4313      	orrs	r3, r2
         );
}
 8001106:	4618      	mov	r0, r3
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001124:	d301      	bcc.n	800112a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001126:	2301      	movs	r3, #1
 8001128:	e00f      	b.n	800114a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <SysTick_Config+0x40>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001132:	210f      	movs	r1, #15
 8001134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001138:	f7ff ff8e 	bl	8001058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <SysTick_Config+0x40>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <SysTick_Config+0x40>)
 8001144:	2207      	movs	r2, #7
 8001146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	e000e010 	.word	0xe000e010

08001158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff29 	bl	8000fb8 <__NVIC_SetPriorityGrouping>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116e:	b580      	push	{r7, lr}
 8001170:	b086      	sub	sp, #24
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
 800117a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001180:	f7ff ff3e 	bl	8001000 <__NVIC_GetPriorityGrouping>
 8001184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	68b9      	ldr	r1, [r7, #8]
 800118a:	6978      	ldr	r0, [r7, #20]
 800118c:	f7ff ff8e 	bl	80010ac <NVIC_EncodePriority>
 8001190:	4602      	mov	r2, r0
 8001192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff5d 	bl	8001058 <__NVIC_SetPriority>
}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff31 	bl	800101c <__NVIC_EnableIRQ>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ffa2 	bl	8001114 <SysTick_Config>
 80011d0:	4603      	mov	r3, r0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
 80011f6:	e159      	b.n	80014ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f8:	2201      	movs	r2, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	429a      	cmp	r2, r3
 8001212:	f040 8148 	bne.w	80014a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	2b01      	cmp	r3, #1
 8001220:	d005      	beq.n	800122e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800122a:	2b02      	cmp	r3, #2
 800122c:	d130      	bne.n	8001290 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	2203      	movs	r2, #3
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	68da      	ldr	r2, [r3, #12]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001264:	2201      	movs	r2, #1
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	f003 0201 	and.w	r2, r3, #1
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b03      	cmp	r3, #3
 800129a:	d017      	beq.n	80012cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d123      	bne.n	8001320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	08da      	lsrs	r2, r3, #3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3208      	adds	r2, #8
 80012e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	220f      	movs	r2, #15
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	691a      	ldr	r2, [r3, #16]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	08da      	lsrs	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3208      	adds	r2, #8
 800131a:	69b9      	ldr	r1, [r7, #24]
 800131c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0203 	and.w	r2, r3, #3
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 80a2 	beq.w	80014a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b57      	ldr	r3, [pc, #348]	; (80014c4 <HAL_GPIO_Init+0x2e8>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	4a56      	ldr	r2, [pc, #344]	; (80014c4 <HAL_GPIO_Init+0x2e8>)
 800136c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001370:	6453      	str	r3, [r2, #68]	; 0x44
 8001372:	4b54      	ldr	r3, [pc, #336]	; (80014c4 <HAL_GPIO_Init+0x2e8>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800137e:	4a52      	ldr	r2, [pc, #328]	; (80014c8 <HAL_GPIO_Init+0x2ec>)
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	3302      	adds	r3, #2
 8001386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	220f      	movs	r2, #15
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a49      	ldr	r2, [pc, #292]	; (80014cc <HAL_GPIO_Init+0x2f0>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d019      	beq.n	80013de <HAL_GPIO_Init+0x202>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a48      	ldr	r2, [pc, #288]	; (80014d0 <HAL_GPIO_Init+0x2f4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d013      	beq.n	80013da <HAL_GPIO_Init+0x1fe>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a47      	ldr	r2, [pc, #284]	; (80014d4 <HAL_GPIO_Init+0x2f8>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d00d      	beq.n	80013d6 <HAL_GPIO_Init+0x1fa>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a46      	ldr	r2, [pc, #280]	; (80014d8 <HAL_GPIO_Init+0x2fc>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d007      	beq.n	80013d2 <HAL_GPIO_Init+0x1f6>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a45      	ldr	r2, [pc, #276]	; (80014dc <HAL_GPIO_Init+0x300>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d101      	bne.n	80013ce <HAL_GPIO_Init+0x1f2>
 80013ca:	2304      	movs	r3, #4
 80013cc:	e008      	b.n	80013e0 <HAL_GPIO_Init+0x204>
 80013ce:	2307      	movs	r3, #7
 80013d0:	e006      	b.n	80013e0 <HAL_GPIO_Init+0x204>
 80013d2:	2303      	movs	r3, #3
 80013d4:	e004      	b.n	80013e0 <HAL_GPIO_Init+0x204>
 80013d6:	2302      	movs	r3, #2
 80013d8:	e002      	b.n	80013e0 <HAL_GPIO_Init+0x204>
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <HAL_GPIO_Init+0x204>
 80013de:	2300      	movs	r3, #0
 80013e0:	69fa      	ldr	r2, [r7, #28]
 80013e2:	f002 0203 	and.w	r2, r2, #3
 80013e6:	0092      	lsls	r2, r2, #2
 80013e8:	4093      	lsls	r3, r2
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f0:	4935      	ldr	r1, [pc, #212]	; (80014c8 <HAL_GPIO_Init+0x2ec>)
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	089b      	lsrs	r3, r3, #2
 80013f6:	3302      	adds	r3, #2
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013fe:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <HAL_GPIO_Init+0x304>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001422:	4a2f      	ldr	r2, [pc, #188]	; (80014e0 <HAL_GPIO_Init+0x304>)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001428:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <HAL_GPIO_Init+0x304>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800144c:	4a24      	ldr	r2, [pc, #144]	; (80014e0 <HAL_GPIO_Init+0x304>)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001452:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <HAL_GPIO_Init+0x304>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001476:	4a1a      	ldr	r2, [pc, #104]	; (80014e0 <HAL_GPIO_Init+0x304>)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800147c:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <HAL_GPIO_Init+0x304>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014a0:	4a0f      	ldr	r2, [pc, #60]	; (80014e0 <HAL_GPIO_Init+0x304>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3301      	adds	r3, #1
 80014aa:	61fb      	str	r3, [r7, #28]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	2b0f      	cmp	r3, #15
 80014b0:	f67f aea2 	bls.w	80011f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	3724      	adds	r7, #36	; 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40013800 	.word	0x40013800
 80014cc:	40020000 	.word	0x40020000
 80014d0:	40020400 	.word	0x40020400
 80014d4:	40020800 	.word	0x40020800
 80014d8:	40020c00 	.word	0x40020c00
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40013c00 	.word	0x40013c00

080014e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	807b      	strh	r3, [r7, #2]
 80014f0:	4613      	mov	r3, r2
 80014f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f4:	787b      	ldrb	r3, [r7, #1]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001500:	e003      	b.n	800150a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001502:	887b      	ldrh	r3, [r7, #2]
 8001504:	041a      	lsls	r2, r3, #16
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	619a      	str	r2, [r3, #24]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	4013      	ands	r3, r2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d006      	beq.n	800153c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	4618      	mov	r0, r3
 8001538:	f7fe ffca 	bl	80004d0 <HAL_GPIO_EXTI_Callback>
  }
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40013c00 	.word	0x40013c00

08001548 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e267      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d075      	beq.n	8001652 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001566:	4b88      	ldr	r3, [pc, #544]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 030c 	and.w	r3, r3, #12
 800156e:	2b04      	cmp	r3, #4
 8001570:	d00c      	beq.n	800158c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001572:	4b85      	ldr	r3, [pc, #532]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800157a:	2b08      	cmp	r3, #8
 800157c:	d112      	bne.n	80015a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800157e:	4b82      	ldr	r3, [pc, #520]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800158a:	d10b      	bne.n	80015a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158c:	4b7e      	ldr	r3, [pc, #504]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d05b      	beq.n	8001650 <HAL_RCC_OscConfig+0x108>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d157      	bne.n	8001650 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e242      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ac:	d106      	bne.n	80015bc <HAL_RCC_OscConfig+0x74>
 80015ae:	4b76      	ldr	r3, [pc, #472]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a75      	ldr	r2, [pc, #468]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 80015b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	e01d      	b.n	80015f8 <HAL_RCC_OscConfig+0xb0>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015c4:	d10c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x98>
 80015c6:	4b70      	ldr	r3, [pc, #448]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a6f      	ldr	r2, [pc, #444]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 80015cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	4b6d      	ldr	r3, [pc, #436]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a6c      	ldr	r2, [pc, #432]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 80015d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	e00b      	b.n	80015f8 <HAL_RCC_OscConfig+0xb0>
 80015e0:	4b69      	ldr	r3, [pc, #420]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a68      	ldr	r2, [pc, #416]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 80015e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b66      	ldr	r3, [pc, #408]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a65      	ldr	r2, [pc, #404]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 80015f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d013      	beq.n	8001628 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff fcce 	bl	8000fa0 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001608:	f7ff fcca 	bl	8000fa0 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	; 0x64
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e207      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161a:	4b5b      	ldr	r3, [pc, #364]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0xc0>
 8001626:	e014      	b.n	8001652 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff fcba 	bl	8000fa0 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001630:	f7ff fcb6 	bl	8000fa0 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b64      	cmp	r3, #100	; 0x64
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e1f3      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001642:	4b51      	ldr	r3, [pc, #324]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0xe8>
 800164e:	e000      	b.n	8001652 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d063      	beq.n	8001726 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800165e:	4b4a      	ldr	r3, [pc, #296]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00b      	beq.n	8001682 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800166a:	4b47      	ldr	r3, [pc, #284]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001672:	2b08      	cmp	r3, #8
 8001674:	d11c      	bne.n	80016b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001676:	4b44      	ldr	r3, [pc, #272]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d116      	bne.n	80016b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001682:	4b41      	ldr	r3, [pc, #260]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d005      	beq.n	800169a <HAL_RCC_OscConfig+0x152>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d001      	beq.n	800169a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e1c7      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169a:	4b3b      	ldr	r3, [pc, #236]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	4937      	ldr	r1, [pc, #220]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ae:	e03a      	b.n	8001726 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d020      	beq.n	80016fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b8:	4b34      	ldr	r3, [pc, #208]	; (800178c <HAL_RCC_OscConfig+0x244>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016be:	f7ff fc6f 	bl	8000fa0 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c6:	f7ff fc6b 	bl	8000fa0 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e1a8      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d8:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e4:	4b28      	ldr	r3, [pc, #160]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	4925      	ldr	r1, [pc, #148]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	600b      	str	r3, [r1, #0]
 80016f8:	e015      	b.n	8001726 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016fa:	4b24      	ldr	r3, [pc, #144]	; (800178c <HAL_RCC_OscConfig+0x244>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff fc4e 	bl	8000fa0 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001708:	f7ff fc4a 	bl	8000fa0 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e187      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171a:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b00      	cmp	r3, #0
 8001730:	d036      	beq.n	80017a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d016      	beq.n	8001768 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <HAL_RCC_OscConfig+0x248>)
 800173c:	2201      	movs	r2, #1
 800173e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001740:	f7ff fc2e 	bl	8000fa0 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001748:	f7ff fc2a 	bl	8000fa0 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e167      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_RCC_OscConfig+0x240>)
 800175c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f0      	beq.n	8001748 <HAL_RCC_OscConfig+0x200>
 8001766:	e01b      	b.n	80017a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_RCC_OscConfig+0x248>)
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176e:	f7ff fc17 	bl	8000fa0 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001774:	e00e      	b.n	8001794 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001776:	f7ff fc13 	bl	8000fa0 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d907      	bls.n	8001794 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e150      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
 8001788:	40023800 	.word	0x40023800
 800178c:	42470000 	.word	0x42470000
 8001790:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001794:	4b88      	ldr	r3, [pc, #544]	; (80019b8 <HAL_RCC_OscConfig+0x470>)
 8001796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1ea      	bne.n	8001776 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 8097 	beq.w	80018dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ae:	2300      	movs	r3, #0
 80017b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017b2:	4b81      	ldr	r3, [pc, #516]	; (80019b8 <HAL_RCC_OscConfig+0x470>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10f      	bne.n	80017de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	4b7d      	ldr	r3, [pc, #500]	; (80019b8 <HAL_RCC_OscConfig+0x470>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	4a7c      	ldr	r2, [pc, #496]	; (80019b8 <HAL_RCC_OscConfig+0x470>)
 80017c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017cc:	6413      	str	r3, [r2, #64]	; 0x40
 80017ce:	4b7a      	ldr	r3, [pc, #488]	; (80019b8 <HAL_RCC_OscConfig+0x470>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017da:	2301      	movs	r3, #1
 80017dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017de:	4b77      	ldr	r3, [pc, #476]	; (80019bc <HAL_RCC_OscConfig+0x474>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d118      	bne.n	800181c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ea:	4b74      	ldr	r3, [pc, #464]	; (80019bc <HAL_RCC_OscConfig+0x474>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a73      	ldr	r2, [pc, #460]	; (80019bc <HAL_RCC_OscConfig+0x474>)
 80017f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017f6:	f7ff fbd3 	bl	8000fa0 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017fe:	f7ff fbcf 	bl	8000fa0 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e10c      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001810:	4b6a      	ldr	r3, [pc, #424]	; (80019bc <HAL_RCC_OscConfig+0x474>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d106      	bne.n	8001832 <HAL_RCC_OscConfig+0x2ea>
 8001824:	4b64      	ldr	r3, [pc, #400]	; (80019b8 <HAL_RCC_OscConfig+0x470>)
 8001826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001828:	4a63      	ldr	r2, [pc, #396]	; (80019b8 <HAL_RCC_OscConfig+0x470>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6713      	str	r3, [r2, #112]	; 0x70
 8001830:	e01c      	b.n	800186c <HAL_RCC_OscConfig+0x324>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b05      	cmp	r3, #5
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0x30c>
 800183a:	4b5f      	ldr	r3, [pc, #380]	; (80019b8 <HAL_RCC_OscConfig+0x470>)
 800183c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183e:	4a5e      	ldr	r2, [pc, #376]	; (80019b8 <HAL_RCC_OscConfig+0x470>)
 8001840:	f043 0304 	orr.w	r3, r3, #4
 8001844:	6713      	str	r3, [r2, #112]	; 0x70
 8001846:	4b5c      	ldr	r3, [pc, #368]	; (80019b8 <HAL_RCC_OscConfig+0x470>)
 8001848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184a:	4a5b      	ldr	r2, [pc, #364]	; (80019b8 <HAL_RCC_OscConfig+0x470>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6713      	str	r3, [r2, #112]	; 0x70
 8001852:	e00b      	b.n	800186c <HAL_RCC_OscConfig+0x324>
 8001854:	4b58      	ldr	r3, [pc, #352]	; (80019b8 <HAL_RCC_OscConfig+0x470>)
 8001856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001858:	4a57      	ldr	r2, [pc, #348]	; (80019b8 <HAL_RCC_OscConfig+0x470>)
 800185a:	f023 0301 	bic.w	r3, r3, #1
 800185e:	6713      	str	r3, [r2, #112]	; 0x70
 8001860:	4b55      	ldr	r3, [pc, #340]	; (80019b8 <HAL_RCC_OscConfig+0x470>)
 8001862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001864:	4a54      	ldr	r2, [pc, #336]	; (80019b8 <HAL_RCC_OscConfig+0x470>)
 8001866:	f023 0304 	bic.w	r3, r3, #4
 800186a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d015      	beq.n	80018a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001874:	f7ff fb94 	bl	8000fa0 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800187a:	e00a      	b.n	8001892 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800187c:	f7ff fb90 	bl	8000fa0 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	f241 3288 	movw	r2, #5000	; 0x1388
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e0cb      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001892:	4b49      	ldr	r3, [pc, #292]	; (80019b8 <HAL_RCC_OscConfig+0x470>)
 8001894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0ee      	beq.n	800187c <HAL_RCC_OscConfig+0x334>
 800189e:	e014      	b.n	80018ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a0:	f7ff fb7e 	bl	8000fa0 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a6:	e00a      	b.n	80018be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a8:	f7ff fb7a 	bl	8000fa0 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e0b5      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018be:	4b3e      	ldr	r3, [pc, #248]	; (80019b8 <HAL_RCC_OscConfig+0x470>)
 80018c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1ee      	bne.n	80018a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018ca:	7dfb      	ldrb	r3, [r7, #23]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d105      	bne.n	80018dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d0:	4b39      	ldr	r3, [pc, #228]	; (80019b8 <HAL_RCC_OscConfig+0x470>)
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	4a38      	ldr	r2, [pc, #224]	; (80019b8 <HAL_RCC_OscConfig+0x470>)
 80018d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80a1 	beq.w	8001a28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018e6:	4b34      	ldr	r3, [pc, #208]	; (80019b8 <HAL_RCC_OscConfig+0x470>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d05c      	beq.n	80019ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d141      	bne.n	800197e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fa:	4b31      	ldr	r3, [pc, #196]	; (80019c0 <HAL_RCC_OscConfig+0x478>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff fb4e 	bl	8000fa0 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001908:	f7ff fb4a 	bl	8000fa0 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e087      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191a:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <HAL_RCC_OscConfig+0x470>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69da      	ldr	r2, [r3, #28]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	019b      	lsls	r3, r3, #6
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193c:	085b      	lsrs	r3, r3, #1
 800193e:	3b01      	subs	r3, #1
 8001940:	041b      	lsls	r3, r3, #16
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001948:	061b      	lsls	r3, r3, #24
 800194a:	491b      	ldr	r1, [pc, #108]	; (80019b8 <HAL_RCC_OscConfig+0x470>)
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001950:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <HAL_RCC_OscConfig+0x478>)
 8001952:	2201      	movs	r2, #1
 8001954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001956:	f7ff fb23 	bl	8000fa0 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800195e:	f7ff fb1f 	bl	8000fa0 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e05c      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <HAL_RCC_OscConfig+0x470>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x416>
 800197c:	e054      	b.n	8001a28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <HAL_RCC_OscConfig+0x478>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff fb0c 	bl	8000fa0 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800198c:	f7ff fb08 	bl	8000fa0 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e045      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_RCC_OscConfig+0x470>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x444>
 80019aa:	e03d      	b.n	8001a28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d107      	bne.n	80019c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e038      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40007000 	.word	0x40007000
 80019c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019c4:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <HAL_RCC_OscConfig+0x4ec>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d028      	beq.n	8001a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019dc:	429a      	cmp	r2, r3
 80019de:	d121      	bne.n	8001a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d11a      	bne.n	8001a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019f4:	4013      	ands	r3, r2
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d111      	bne.n	8001a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0a:	085b      	lsrs	r3, r3, #1
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d107      	bne.n	8001a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d001      	beq.n	8001a28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800

08001a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0cc      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a4c:	4b68      	ldr	r3, [pc, #416]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d90c      	bls.n	8001a74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5a:	4b65      	ldr	r3, [pc, #404]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a62:	4b63      	ldr	r3, [pc, #396]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0b8      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d020      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a8c:	4b59      	ldr	r3, [pc, #356]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	4a58      	ldr	r2, [pc, #352]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d005      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa4:	4b53      	ldr	r3, [pc, #332]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	4a52      	ldr	r2, [pc, #328]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab0:	4b50      	ldr	r3, [pc, #320]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	494d      	ldr	r1, [pc, #308]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d044      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d107      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad6:	4b47      	ldr	r3, [pc, #284]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d119      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e07f      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d003      	beq.n	8001af6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af6:	4b3f      	ldr	r3, [pc, #252]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d109      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e06f      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b06:	4b3b      	ldr	r3, [pc, #236]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e067      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b16:	4b37      	ldr	r3, [pc, #220]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f023 0203 	bic.w	r2, r3, #3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	4934      	ldr	r1, [pc, #208]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b28:	f7ff fa3a 	bl	8000fa0 <HAL_GetTick>
 8001b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2e:	e00a      	b.n	8001b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b30:	f7ff fa36 	bl	8000fa0 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e04f      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b46:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 020c 	and.w	r2, r3, #12
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d1eb      	bne.n	8001b30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b58:	4b25      	ldr	r3, [pc, #148]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d20c      	bcs.n	8001b80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b66:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6e:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e032      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b8c:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	4916      	ldr	r1, [pc, #88]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d009      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001baa:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	490e      	ldr	r1, [pc, #56]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bbe:	f000 f821 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	490a      	ldr	r1, [pc, #40]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd0:	5ccb      	ldrb	r3, [r1, r3]
 8001bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd6:	4a09      	ldr	r2, [pc, #36]	; (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_RCC_ClockConfig+0x1c8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff f99a 	bl	8000f18 <HAL_InitTick>

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023c00 	.word	0x40023c00
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	080036bc 	.word	0x080036bc
 8001bfc:	200000c0 	.word	0x200000c0
 8001c00:	200000c4 	.word	0x200000c4

08001c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c08:	b094      	sub	sp, #80	; 0x50
 8001c0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	647b      	str	r3, [r7, #68]	; 0x44
 8001c10:	2300      	movs	r3, #0
 8001c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c14:	2300      	movs	r3, #0
 8001c16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c1c:	4b79      	ldr	r3, [pc, #484]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d00d      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0x40>
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	f200 80e1 	bhi.w	8001df0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0x34>
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d003      	beq.n	8001c3e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c36:	e0db      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c38:	4b73      	ldr	r3, [pc, #460]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c3a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c3c:	e0db      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c3e:	4b73      	ldr	r3, [pc, #460]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x208>)
 8001c40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c42:	e0d8      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c44:	4b6f      	ldr	r3, [pc, #444]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c4c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c4e:	4b6d      	ldr	r3, [pc, #436]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d063      	beq.n	8001d22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c5a:	4b6a      	ldr	r3, [pc, #424]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	099b      	lsrs	r3, r3, #6
 8001c60:	2200      	movs	r2, #0
 8001c62:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c6c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c6e:	2300      	movs	r3, #0
 8001c70:	637b      	str	r3, [r7, #52]	; 0x34
 8001c72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c76:	4622      	mov	r2, r4
 8001c78:	462b      	mov	r3, r5
 8001c7a:	f04f 0000 	mov.w	r0, #0
 8001c7e:	f04f 0100 	mov.w	r1, #0
 8001c82:	0159      	lsls	r1, r3, #5
 8001c84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c88:	0150      	lsls	r0, r2, #5
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4621      	mov	r1, r4
 8001c90:	1a51      	subs	r1, r2, r1
 8001c92:	6139      	str	r1, [r7, #16]
 8001c94:	4629      	mov	r1, r5
 8001c96:	eb63 0301 	sbc.w	r3, r3, r1
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ca8:	4659      	mov	r1, fp
 8001caa:	018b      	lsls	r3, r1, #6
 8001cac:	4651      	mov	r1, sl
 8001cae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cb2:	4651      	mov	r1, sl
 8001cb4:	018a      	lsls	r2, r1, #6
 8001cb6:	4651      	mov	r1, sl
 8001cb8:	ebb2 0801 	subs.w	r8, r2, r1
 8001cbc:	4659      	mov	r1, fp
 8001cbe:	eb63 0901 	sbc.w	r9, r3, r1
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cd6:	4690      	mov	r8, r2
 8001cd8:	4699      	mov	r9, r3
 8001cda:	4623      	mov	r3, r4
 8001cdc:	eb18 0303 	adds.w	r3, r8, r3
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	462b      	mov	r3, r5
 8001ce4:	eb49 0303 	adc.w	r3, r9, r3
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cf6:	4629      	mov	r1, r5
 8001cf8:	024b      	lsls	r3, r1, #9
 8001cfa:	4621      	mov	r1, r4
 8001cfc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d00:	4621      	mov	r1, r4
 8001d02:	024a      	lsls	r2, r1, #9
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d14:	f7fe fa5e 	bl	80001d4 <__aeabi_uldivmod>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d20:	e058      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d22:	4b38      	ldr	r3, [pc, #224]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	099b      	lsrs	r3, r3, #6
 8001d28:	2200      	movs	r2, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d32:	623b      	str	r3, [r7, #32]
 8001d34:	2300      	movs	r3, #0
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
 8001d38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d3c:	4642      	mov	r2, r8
 8001d3e:	464b      	mov	r3, r9
 8001d40:	f04f 0000 	mov.w	r0, #0
 8001d44:	f04f 0100 	mov.w	r1, #0
 8001d48:	0159      	lsls	r1, r3, #5
 8001d4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d4e:	0150      	lsls	r0, r2, #5
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4641      	mov	r1, r8
 8001d56:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d5a:	4649      	mov	r1, r9
 8001d5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d74:	ebb2 040a 	subs.w	r4, r2, sl
 8001d78:	eb63 050b 	sbc.w	r5, r3, fp
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	00eb      	lsls	r3, r5, #3
 8001d86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d8a:	00e2      	lsls	r2, r4, #3
 8001d8c:	4614      	mov	r4, r2
 8001d8e:	461d      	mov	r5, r3
 8001d90:	4643      	mov	r3, r8
 8001d92:	18e3      	adds	r3, r4, r3
 8001d94:	603b      	str	r3, [r7, #0]
 8001d96:	464b      	mov	r3, r9
 8001d98:	eb45 0303 	adc.w	r3, r5, r3
 8001d9c:	607b      	str	r3, [r7, #4]
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	f04f 0300 	mov.w	r3, #0
 8001da6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001daa:	4629      	mov	r1, r5
 8001dac:	028b      	lsls	r3, r1, #10
 8001dae:	4621      	mov	r1, r4
 8001db0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001db4:	4621      	mov	r1, r4
 8001db6:	028a      	lsls	r2, r1, #10
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	61fa      	str	r2, [r7, #28]
 8001dc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dc8:	f7fe fa04 	bl	80001d4 <__aeabi_uldivmod>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	0c1b      	lsrs	r3, r3, #16
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	3301      	adds	r3, #1
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001de4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dee:	e002      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x204>)
 8001df2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001df4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3750      	adds	r7, #80	; 0x50
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800
 8001e08:	00f42400 	.word	0x00f42400
 8001e0c:	007a1200 	.word	0x007a1200

08001e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e16:	681b      	ldr	r3, [r3, #0]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	200000c0 	.word	0x200000c0

08001e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e2c:	f7ff fff0 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001e30:	4602      	mov	r2, r0
 8001e32:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	0a9b      	lsrs	r3, r3, #10
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	4903      	ldr	r1, [pc, #12]	; (8001e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e3e:	5ccb      	ldrb	r3, [r1, r3]
 8001e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	080036cc 	.word	0x080036cc

08001e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e54:	f7ff ffdc 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	0b5b      	lsrs	r3, r3, #13
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	4903      	ldr	r1, [pc, #12]	; (8001e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e66:	5ccb      	ldrb	r3, [r1, r3]
 8001e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40023800 	.word	0x40023800
 8001e74:	080036cc 	.word	0x080036cc

08001e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e041      	b.n	8001f0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d106      	bne.n	8001ea4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7fe fee0 	bl	8000c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	f000 fd66 	bl	8002988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6a1a      	ldr	r2, [r3, #32]
 8001f24:	f241 1311 	movw	r3, #4369	; 0x1111
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10f      	bne.n	8001f4e <HAL_TIM_Base_Stop+0x38>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6a1a      	ldr	r2, [r3, #32]
 8001f34:	f240 4344 	movw	r3, #1092	; 0x444
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d107      	bne.n	8001f4e <HAL_TIM_Base_Stop+0x38>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0201 	bic.w	r2, r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d001      	beq.n	8001f7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e044      	b.n	8002006 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a1e      	ldr	r2, [pc, #120]	; (8002014 <HAL_TIM_Base_Start_IT+0xb0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d018      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa6:	d013      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a1a      	ldr	r2, [pc, #104]	; (8002018 <HAL_TIM_Base_Start_IT+0xb4>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d00e      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a19      	ldr	r2, [pc, #100]	; (800201c <HAL_TIM_Base_Start_IT+0xb8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d009      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a17      	ldr	r2, [pc, #92]	; (8002020 <HAL_TIM_Base_Start_IT+0xbc>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d004      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a16      	ldr	r2, [pc, #88]	; (8002024 <HAL_TIM_Base_Start_IT+0xc0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d111      	bne.n	8001ff4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2b06      	cmp	r3, #6
 8001fe0:	d010      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0201 	orr.w	r2, r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ff2:	e007      	b.n	8002004 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40010000 	.word	0x40010000
 8002018:	40000400 	.word	0x40000400
 800201c:	40000800 	.word	0x40000800
 8002020:	40000c00 	.word	0x40000c00
 8002024:	40014000 	.word	0x40014000

08002028 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0201 	bic.w	r2, r2, #1
 800203e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6a1a      	ldr	r2, [r3, #32]
 8002046:	f241 1311 	movw	r3, #4369	; 0x1111
 800204a:	4013      	ands	r3, r2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10f      	bne.n	8002070 <HAL_TIM_Base_Stop_IT+0x48>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6a1a      	ldr	r2, [r3, #32]
 8002056:	f240 4344 	movw	r3, #1092	; 0x444
 800205a:	4013      	ands	r3, r2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d107      	bne.n	8002070 <HAL_TIM_Base_Stop_IT+0x48>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0201 	bic.w	r2, r2, #1
 800206e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e041      	b.n	800211c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d106      	bne.n	80020b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f839 	bl	8002124 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2202      	movs	r2, #2
 80020b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3304      	adds	r3, #4
 80020c2:	4619      	mov	r1, r3
 80020c4:	4610      	mov	r0, r2
 80020c6:	f000 fc5f 	bl	8002988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d109      	bne.n	800215c <HAL_TIM_PWM_Start+0x24>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b01      	cmp	r3, #1
 8002152:	bf14      	ite	ne
 8002154:	2301      	movne	r3, #1
 8002156:	2300      	moveq	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	e022      	b.n	80021a2 <HAL_TIM_PWM_Start+0x6a>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2b04      	cmp	r3, #4
 8002160:	d109      	bne.n	8002176 <HAL_TIM_PWM_Start+0x3e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b01      	cmp	r3, #1
 800216c:	bf14      	ite	ne
 800216e:	2301      	movne	r3, #1
 8002170:	2300      	moveq	r3, #0
 8002172:	b2db      	uxtb	r3, r3
 8002174:	e015      	b.n	80021a2 <HAL_TIM_PWM_Start+0x6a>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2b08      	cmp	r3, #8
 800217a:	d109      	bne.n	8002190 <HAL_TIM_PWM_Start+0x58>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b01      	cmp	r3, #1
 8002186:	bf14      	ite	ne
 8002188:	2301      	movne	r3, #1
 800218a:	2300      	moveq	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	e008      	b.n	80021a2 <HAL_TIM_PWM_Start+0x6a>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	bf14      	ite	ne
 800219c:	2301      	movne	r3, #1
 800219e:	2300      	moveq	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e068      	b.n	800227c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d104      	bne.n	80021ba <HAL_TIM_PWM_Start+0x82>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2202      	movs	r2, #2
 80021b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021b8:	e013      	b.n	80021e2 <HAL_TIM_PWM_Start+0xaa>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d104      	bne.n	80021ca <HAL_TIM_PWM_Start+0x92>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021c8:	e00b      	b.n	80021e2 <HAL_TIM_PWM_Start+0xaa>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d104      	bne.n	80021da <HAL_TIM_PWM_Start+0xa2>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021d8:	e003      	b.n	80021e2 <HAL_TIM_PWM_Start+0xaa>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2202      	movs	r2, #2
 80021de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2201      	movs	r2, #1
 80021e8:	6839      	ldr	r1, [r7, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 fe72 	bl	8002ed4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a23      	ldr	r2, [pc, #140]	; (8002284 <HAL_TIM_PWM_Start+0x14c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d107      	bne.n	800220a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002208:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a1d      	ldr	r2, [pc, #116]	; (8002284 <HAL_TIM_PWM_Start+0x14c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d018      	beq.n	8002246 <HAL_TIM_PWM_Start+0x10e>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800221c:	d013      	beq.n	8002246 <HAL_TIM_PWM_Start+0x10e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a19      	ldr	r2, [pc, #100]	; (8002288 <HAL_TIM_PWM_Start+0x150>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d00e      	beq.n	8002246 <HAL_TIM_PWM_Start+0x10e>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a17      	ldr	r2, [pc, #92]	; (800228c <HAL_TIM_PWM_Start+0x154>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d009      	beq.n	8002246 <HAL_TIM_PWM_Start+0x10e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a16      	ldr	r2, [pc, #88]	; (8002290 <HAL_TIM_PWM_Start+0x158>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d004      	beq.n	8002246 <HAL_TIM_PWM_Start+0x10e>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a14      	ldr	r2, [pc, #80]	; (8002294 <HAL_TIM_PWM_Start+0x15c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d111      	bne.n	800226a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b06      	cmp	r3, #6
 8002256:	d010      	beq.n	800227a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002268:	e007      	b.n	800227a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0201 	orr.w	r2, r2, #1
 8002278:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40010000 	.word	0x40010000
 8002288:	40000400 	.word	0x40000400
 800228c:	40000800 	.word	0x40000800
 8002290:	40000c00 	.word	0x40000c00
 8002294:	40014000 	.word	0x40014000

08002298 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2200      	movs	r2, #0
 80022a8:	6839      	ldr	r1, [r7, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 fe12 	bl	8002ed4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a29      	ldr	r2, [pc, #164]	; (800235c <HAL_TIM_PWM_Stop+0xc4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d117      	bne.n	80022ea <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6a1a      	ldr	r2, [r3, #32]
 80022c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10f      	bne.n	80022ea <HAL_TIM_PWM_Stop+0x52>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6a1a      	ldr	r2, [r3, #32]
 80022d0:	f240 4344 	movw	r3, #1092	; 0x444
 80022d4:	4013      	ands	r3, r2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d107      	bne.n	80022ea <HAL_TIM_PWM_Stop+0x52>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6a1a      	ldr	r2, [r3, #32]
 80022f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10f      	bne.n	800231a <HAL_TIM_PWM_Stop+0x82>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6a1a      	ldr	r2, [r3, #32]
 8002300:	f240 4344 	movw	r3, #1092	; 0x444
 8002304:	4013      	ands	r3, r2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d107      	bne.n	800231a <HAL_TIM_PWM_Stop+0x82>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0201 	bic.w	r2, r2, #1
 8002318:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d104      	bne.n	800232a <HAL_TIM_PWM_Stop+0x92>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002328:	e013      	b.n	8002352 <HAL_TIM_PWM_Stop+0xba>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	2b04      	cmp	r3, #4
 800232e:	d104      	bne.n	800233a <HAL_TIM_PWM_Stop+0xa2>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002338:	e00b      	b.n	8002352 <HAL_TIM_PWM_Stop+0xba>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b08      	cmp	r3, #8
 800233e:	d104      	bne.n	800234a <HAL_TIM_PWM_Stop+0xb2>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002348:	e003      	b.n	8002352 <HAL_TIM_PWM_Stop+0xba>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40010000 	.word	0x40010000

08002360 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e041      	b.n	80023f8 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d106      	bne.n	800238e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f839 	bl	8002400 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2202      	movs	r2, #2
 8002392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3304      	adds	r3, #4
 800239e:	4619      	mov	r1, r3
 80023a0:	4610      	mov	r0, r2
 80023a2:	f000 faf1 	bl	8002988 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0208 	bic.w	r2, r2, #8
 80023b4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6819      	ldr	r1, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b02      	cmp	r3, #2
 8002428:	d122      	bne.n	8002470 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b02      	cmp	r3, #2
 8002436:	d11b      	bne.n	8002470 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0202 	mvn.w	r2, #2
 8002440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 fa77 	bl	800294a <HAL_TIM_IC_CaptureCallback>
 800245c:	e005      	b.n	800246a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fa69 	bl	8002936 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 fa7a 	bl	800295e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	2b04      	cmp	r3, #4
 800247c:	d122      	bne.n	80024c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b04      	cmp	r3, #4
 800248a:	d11b      	bne.n	80024c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f06f 0204 	mvn.w	r2, #4
 8002494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2202      	movs	r2, #2
 800249a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 fa4d 	bl	800294a <HAL_TIM_IC_CaptureCallback>
 80024b0:	e005      	b.n	80024be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fa3f 	bl	8002936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 fa50 	bl	800295e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d122      	bne.n	8002518 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d11b      	bne.n	8002518 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f06f 0208 	mvn.w	r2, #8
 80024e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2204      	movs	r2, #4
 80024ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 fa23 	bl	800294a <HAL_TIM_IC_CaptureCallback>
 8002504:	e005      	b.n	8002512 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fa15 	bl	8002936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 fa26 	bl	800295e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b10      	cmp	r3, #16
 8002524:	d122      	bne.n	800256c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0310 	and.w	r3, r3, #16
 8002530:	2b10      	cmp	r3, #16
 8002532:	d11b      	bne.n	800256c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0210 	mvn.w	r2, #16
 800253c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2208      	movs	r2, #8
 8002542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f9f9 	bl	800294a <HAL_TIM_IC_CaptureCallback>
 8002558:	e005      	b.n	8002566 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f9eb 	bl	8002936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f9fc 	bl	800295e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b01      	cmp	r3, #1
 8002578:	d10e      	bne.n	8002598 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b01      	cmp	r3, #1
 8002586:	d107      	bne.n	8002598 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0201 	mvn.w	r2, #1
 8002590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fd ffb6 	bl	8000504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a2:	2b80      	cmp	r3, #128	; 0x80
 80025a4:	d10e      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b0:	2b80      	cmp	r3, #128	; 0x80
 80025b2:	d107      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fd78 	bl	80030b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ce:	2b40      	cmp	r3, #64	; 0x40
 80025d0:	d10e      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025dc:	2b40      	cmp	r3, #64	; 0x40
 80025de:	d107      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f9c1 	bl	8002972 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f003 0320 	and.w	r3, r3, #32
 80025fa:	2b20      	cmp	r3, #32
 80025fc:	d10e      	bne.n	800261c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b20      	cmp	r3, #32
 800260a:	d107      	bne.n	800261c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0220 	mvn.w	r2, #32
 8002614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fd42 	bl	80030a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800263e:	2302      	movs	r3, #2
 8002640:	e0ae      	b.n	80027a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b0c      	cmp	r3, #12
 800264e:	f200 809f 	bhi.w	8002790 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002652:	a201      	add	r2, pc, #4	; (adr r2, 8002658 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002658:	0800268d 	.word	0x0800268d
 800265c:	08002791 	.word	0x08002791
 8002660:	08002791 	.word	0x08002791
 8002664:	08002791 	.word	0x08002791
 8002668:	080026cd 	.word	0x080026cd
 800266c:	08002791 	.word	0x08002791
 8002670:	08002791 	.word	0x08002791
 8002674:	08002791 	.word	0x08002791
 8002678:	0800270f 	.word	0x0800270f
 800267c:	08002791 	.word	0x08002791
 8002680:	08002791 	.word	0x08002791
 8002684:	08002791 	.word	0x08002791
 8002688:	0800274f 	.word	0x0800274f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f9f8 	bl	8002a88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0208 	orr.w	r2, r2, #8
 80026a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699a      	ldr	r2, [r3, #24]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0204 	bic.w	r2, r2, #4
 80026b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6999      	ldr	r1, [r3, #24]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	619a      	str	r2, [r3, #24]
      break;
 80026ca:	e064      	b.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 fa3e 	bl	8002b54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6999      	ldr	r1, [r3, #24]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	021a      	lsls	r2, r3, #8
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	619a      	str	r2, [r3, #24]
      break;
 800270c:	e043      	b.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68b9      	ldr	r1, [r7, #8]
 8002714:	4618      	mov	r0, r3
 8002716:	f000 fa89 	bl	8002c2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	69da      	ldr	r2, [r3, #28]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0208 	orr.w	r2, r2, #8
 8002728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0204 	bic.w	r2, r2, #4
 8002738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69d9      	ldr	r1, [r3, #28]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	61da      	str	r2, [r3, #28]
      break;
 800274c:	e023      	b.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fad3 	bl	8002d00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	69da      	ldr	r2, [r3, #28]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69da      	ldr	r2, [r3, #28]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	69d9      	ldr	r1, [r3, #28]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	021a      	lsls	r2, r3, #8
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	61da      	str	r2, [r3, #28]
      break;
 800278e:	e002      	b.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	75fb      	strb	r3, [r7, #23]
      break;
 8002794:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800279e:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_TIM_ConfigClockSource+0x1c>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e0b4      	b.n	800292e <HAL_TIM_ConfigClockSource+0x186>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027fc:	d03e      	beq.n	800287c <HAL_TIM_ConfigClockSource+0xd4>
 80027fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002802:	f200 8087 	bhi.w	8002914 <HAL_TIM_ConfigClockSource+0x16c>
 8002806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280a:	f000 8086 	beq.w	800291a <HAL_TIM_ConfigClockSource+0x172>
 800280e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002812:	d87f      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x16c>
 8002814:	2b70      	cmp	r3, #112	; 0x70
 8002816:	d01a      	beq.n	800284e <HAL_TIM_ConfigClockSource+0xa6>
 8002818:	2b70      	cmp	r3, #112	; 0x70
 800281a:	d87b      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x16c>
 800281c:	2b60      	cmp	r3, #96	; 0x60
 800281e:	d050      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0x11a>
 8002820:	2b60      	cmp	r3, #96	; 0x60
 8002822:	d877      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x16c>
 8002824:	2b50      	cmp	r3, #80	; 0x50
 8002826:	d03c      	beq.n	80028a2 <HAL_TIM_ConfigClockSource+0xfa>
 8002828:	2b50      	cmp	r3, #80	; 0x50
 800282a:	d873      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x16c>
 800282c:	2b40      	cmp	r3, #64	; 0x40
 800282e:	d058      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0x13a>
 8002830:	2b40      	cmp	r3, #64	; 0x40
 8002832:	d86f      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x16c>
 8002834:	2b30      	cmp	r3, #48	; 0x30
 8002836:	d064      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0x15a>
 8002838:	2b30      	cmp	r3, #48	; 0x30
 800283a:	d86b      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x16c>
 800283c:	2b20      	cmp	r3, #32
 800283e:	d060      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0x15a>
 8002840:	2b20      	cmp	r3, #32
 8002842:	d867      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x16c>
 8002844:	2b00      	cmp	r3, #0
 8002846:	d05c      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0x15a>
 8002848:	2b10      	cmp	r3, #16
 800284a:	d05a      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0x15a>
 800284c:	e062      	b.n	8002914 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	6899      	ldr	r1, [r3, #8]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f000 fb19 	bl	8002e94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002870:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	609a      	str	r2, [r3, #8]
      break;
 800287a:	e04f      	b.n	800291c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6818      	ldr	r0, [r3, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	6899      	ldr	r1, [r3, #8]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f000 fb02 	bl	8002e94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800289e:	609a      	str	r2, [r3, #8]
      break;
 80028a0:	e03c      	b.n	800291c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6859      	ldr	r1, [r3, #4]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	461a      	mov	r2, r3
 80028b0:	f000 fa76 	bl	8002da0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2150      	movs	r1, #80	; 0x50
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 facf 	bl	8002e5e <TIM_ITRx_SetConfig>
      break;
 80028c0:	e02c      	b.n	800291c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6859      	ldr	r1, [r3, #4]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	461a      	mov	r2, r3
 80028d0:	f000 fa95 	bl	8002dfe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2160      	movs	r1, #96	; 0x60
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fabf 	bl	8002e5e <TIM_ITRx_SetConfig>
      break;
 80028e0:	e01c      	b.n	800291c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6818      	ldr	r0, [r3, #0]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6859      	ldr	r1, [r3, #4]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	461a      	mov	r2, r3
 80028f0:	f000 fa56 	bl	8002da0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2140      	movs	r1, #64	; 0x40
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 faaf 	bl	8002e5e <TIM_ITRx_SetConfig>
      break;
 8002900:	e00c      	b.n	800291c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4619      	mov	r1, r3
 800290c:	4610      	mov	r0, r2
 800290e:	f000 faa6 	bl	8002e5e <TIM_ITRx_SetConfig>
      break;
 8002912:	e003      	b.n	800291c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
      break;
 8002918:	e000      	b.n	800291c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800291a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800292c:	7bfb      	ldrb	r3, [r7, #15]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a34      	ldr	r2, [pc, #208]	; (8002a6c <TIM_Base_SetConfig+0xe4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d00f      	beq.n	80029c0 <TIM_Base_SetConfig+0x38>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a6:	d00b      	beq.n	80029c0 <TIM_Base_SetConfig+0x38>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a31      	ldr	r2, [pc, #196]	; (8002a70 <TIM_Base_SetConfig+0xe8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d007      	beq.n	80029c0 <TIM_Base_SetConfig+0x38>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a30      	ldr	r2, [pc, #192]	; (8002a74 <TIM_Base_SetConfig+0xec>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d003      	beq.n	80029c0 <TIM_Base_SetConfig+0x38>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a2f      	ldr	r2, [pc, #188]	; (8002a78 <TIM_Base_SetConfig+0xf0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d108      	bne.n	80029d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a25      	ldr	r2, [pc, #148]	; (8002a6c <TIM_Base_SetConfig+0xe4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d01b      	beq.n	8002a12 <TIM_Base_SetConfig+0x8a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e0:	d017      	beq.n	8002a12 <TIM_Base_SetConfig+0x8a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a22      	ldr	r2, [pc, #136]	; (8002a70 <TIM_Base_SetConfig+0xe8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d013      	beq.n	8002a12 <TIM_Base_SetConfig+0x8a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a21      	ldr	r2, [pc, #132]	; (8002a74 <TIM_Base_SetConfig+0xec>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d00f      	beq.n	8002a12 <TIM_Base_SetConfig+0x8a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a20      	ldr	r2, [pc, #128]	; (8002a78 <TIM_Base_SetConfig+0xf0>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00b      	beq.n	8002a12 <TIM_Base_SetConfig+0x8a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a1f      	ldr	r2, [pc, #124]	; (8002a7c <TIM_Base_SetConfig+0xf4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d007      	beq.n	8002a12 <TIM_Base_SetConfig+0x8a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a1e      	ldr	r2, [pc, #120]	; (8002a80 <TIM_Base_SetConfig+0xf8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d003      	beq.n	8002a12 <TIM_Base_SetConfig+0x8a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a1d      	ldr	r2, [pc, #116]	; (8002a84 <TIM_Base_SetConfig+0xfc>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d108      	bne.n	8002a24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a08      	ldr	r2, [pc, #32]	; (8002a6c <TIM_Base_SetConfig+0xe4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d103      	bne.n	8002a58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	615a      	str	r2, [r3, #20]
}
 8002a5e:	bf00      	nop
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40010000 	.word	0x40010000
 8002a70:	40000400 	.word	0x40000400
 8002a74:	40000800 	.word	0x40000800
 8002a78:	40000c00 	.word	0x40000c00
 8002a7c:	40014000 	.word	0x40014000
 8002a80:	40014400 	.word	0x40014400
 8002a84:	40014800 	.word	0x40014800

08002a88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	f023 0201 	bic.w	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f023 0303 	bic.w	r3, r3, #3
 8002abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f023 0302 	bic.w	r3, r3, #2
 8002ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a1c      	ldr	r2, [pc, #112]	; (8002b50 <TIM_OC1_SetConfig+0xc8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d10c      	bne.n	8002afe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f023 0308 	bic.w	r3, r3, #8
 8002aea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f023 0304 	bic.w	r3, r3, #4
 8002afc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a13      	ldr	r2, [pc, #76]	; (8002b50 <TIM_OC1_SetConfig+0xc8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d111      	bne.n	8002b2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	621a      	str	r2, [r3, #32]
}
 8002b44:	bf00      	nop
 8002b46:	371c      	adds	r7, #28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	40010000 	.word	0x40010000

08002b54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	f023 0210 	bic.w	r2, r3, #16
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	021b      	lsls	r3, r3, #8
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f023 0320 	bic.w	r3, r3, #32
 8002b9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a1e      	ldr	r2, [pc, #120]	; (8002c28 <TIM_OC2_SetConfig+0xd4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d10d      	bne.n	8002bd0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a15      	ldr	r2, [pc, #84]	; (8002c28 <TIM_OC2_SetConfig+0xd4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d113      	bne.n	8002c00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002be6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	621a      	str	r2, [r3, #32]
}
 8002c1a:	bf00      	nop
 8002c1c:	371c      	adds	r7, #28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40010000 	.word	0x40010000

08002c2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f023 0303 	bic.w	r3, r3, #3
 8002c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a1d      	ldr	r2, [pc, #116]	; (8002cfc <TIM_OC3_SetConfig+0xd0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d10d      	bne.n	8002ca6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	021b      	lsls	r3, r3, #8
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a14      	ldr	r2, [pc, #80]	; (8002cfc <TIM_OC3_SetConfig+0xd0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d113      	bne.n	8002cd6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	621a      	str	r2, [r3, #32]
}
 8002cf0:	bf00      	nop
 8002cf2:	371c      	adds	r7, #28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	40010000 	.word	0x40010000

08002d00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	021b      	lsls	r3, r3, #8
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	031b      	lsls	r3, r3, #12
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a10      	ldr	r2, [pc, #64]	; (8002d9c <TIM_OC4_SetConfig+0x9c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d109      	bne.n	8002d74 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	019b      	lsls	r3, r3, #6
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	621a      	str	r2, [r3, #32]
}
 8002d8e:	bf00      	nop
 8002d90:	371c      	adds	r7, #28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40010000 	.word	0x40010000

08002da0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	f023 0201 	bic.w	r2, r3, #1
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f023 030a 	bic.w	r3, r3, #10
 8002ddc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	621a      	str	r2, [r3, #32]
}
 8002df2:	bf00      	nop
 8002df4:	371c      	adds	r7, #28
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b087      	sub	sp, #28
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	f023 0210 	bic.w	r2, r3, #16
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	031b      	lsls	r3, r3, #12
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	621a      	str	r2, [r3, #32]
}
 8002e52:	bf00      	nop
 8002e54:	371c      	adds	r7, #28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b085      	sub	sp, #20
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f043 0307 	orr.w	r3, r3, #7
 8002e80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	609a      	str	r2, [r3, #8]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	021a      	lsls	r2, r3, #8
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	609a      	str	r2, [r3, #8]
}
 8002ec8:	bf00      	nop
 8002eca:	371c      	adds	r7, #28
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b087      	sub	sp, #28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f003 031f 	and.w	r3, r3, #31
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a1a      	ldr	r2, [r3, #32]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a1a      	ldr	r2, [r3, #32]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	621a      	str	r2, [r3, #32]
}
 8002f12:	bf00      	nop
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e050      	b.n	8002fda <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a1c      	ldr	r2, [pc, #112]	; (8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d018      	beq.n	8002fae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f84:	d013      	beq.n	8002fae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a18      	ldr	r2, [pc, #96]	; (8002fec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d00e      	beq.n	8002fae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a16      	ldr	r2, [pc, #88]	; (8002ff0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d009      	beq.n	8002fae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a15      	ldr	r2, [pc, #84]	; (8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d004      	beq.n	8002fae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a13      	ldr	r2, [pc, #76]	; (8002ff8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d10c      	bne.n	8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40010000 	.word	0x40010000
 8002fec:	40000400 	.word	0x40000400
 8002ff0:	40000800 	.word	0x40000800
 8002ff4:	40000c00 	.word	0x40000c00
 8002ff8:	40014000 	.word	0x40014000

08002ffc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003014:	2302      	movs	r3, #2
 8003016:	e03d      	b.n	8003094 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	4313      	orrs	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	4313      	orrs	r3, r2
 800303a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4313      	orrs	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	4313      	orrs	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e03f      	b.n	800315a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fd fe28 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2224      	movs	r2, #36	; 0x24
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800310a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f829 	bl	8003164 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003120:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695a      	ldr	r2, [r3, #20]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003130:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003140:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
	...

08003164 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003168:	b0c0      	sub	sp, #256	; 0x100
 800316a:	af00      	add	r7, sp, #0
 800316c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800317c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003180:	68d9      	ldr	r1, [r3, #12]
 8003182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	ea40 0301 	orr.w	r3, r0, r1
 800318c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800318e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	431a      	orrs	r2, r3
 800319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031bc:	f021 010c 	bic.w	r1, r1, #12
 80031c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80031ca:	430b      	orrs	r3, r1
 80031cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031de:	6999      	ldr	r1, [r3, #24]
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	ea40 0301 	orr.w	r3, r0, r1
 80031ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	4b8f      	ldr	r3, [pc, #572]	; (8003430 <UART_SetConfig+0x2cc>)
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d005      	beq.n	8003204 <UART_SetConfig+0xa0>
 80031f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	4b8d      	ldr	r3, [pc, #564]	; (8003434 <UART_SetConfig+0x2d0>)
 8003200:	429a      	cmp	r2, r3
 8003202:	d104      	bne.n	800320e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003204:	f7fe fe24 	bl	8001e50 <HAL_RCC_GetPCLK2Freq>
 8003208:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800320c:	e003      	b.n	8003216 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800320e:	f7fe fe0b 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 8003212:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003220:	f040 810c 	bne.w	800343c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003228:	2200      	movs	r2, #0
 800322a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800322e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003232:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003236:	4622      	mov	r2, r4
 8003238:	462b      	mov	r3, r5
 800323a:	1891      	adds	r1, r2, r2
 800323c:	65b9      	str	r1, [r7, #88]	; 0x58
 800323e:	415b      	adcs	r3, r3
 8003240:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003242:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003246:	4621      	mov	r1, r4
 8003248:	eb12 0801 	adds.w	r8, r2, r1
 800324c:	4629      	mov	r1, r5
 800324e:	eb43 0901 	adc.w	r9, r3, r1
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800325e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003262:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003266:	4690      	mov	r8, r2
 8003268:	4699      	mov	r9, r3
 800326a:	4623      	mov	r3, r4
 800326c:	eb18 0303 	adds.w	r3, r8, r3
 8003270:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003274:	462b      	mov	r3, r5
 8003276:	eb49 0303 	adc.w	r3, r9, r3
 800327a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800327e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800328a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800328e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003292:	460b      	mov	r3, r1
 8003294:	18db      	adds	r3, r3, r3
 8003296:	653b      	str	r3, [r7, #80]	; 0x50
 8003298:	4613      	mov	r3, r2
 800329a:	eb42 0303 	adc.w	r3, r2, r3
 800329e:	657b      	str	r3, [r7, #84]	; 0x54
 80032a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80032a8:	f7fc ff94 	bl	80001d4 <__aeabi_uldivmod>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4b61      	ldr	r3, [pc, #388]	; (8003438 <UART_SetConfig+0x2d4>)
 80032b2:	fba3 2302 	umull	r2, r3, r3, r2
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	011c      	lsls	r4, r3, #4
 80032ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032be:	2200      	movs	r2, #0
 80032c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80032c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80032cc:	4642      	mov	r2, r8
 80032ce:	464b      	mov	r3, r9
 80032d0:	1891      	adds	r1, r2, r2
 80032d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80032d4:	415b      	adcs	r3, r3
 80032d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032dc:	4641      	mov	r1, r8
 80032de:	eb12 0a01 	adds.w	sl, r2, r1
 80032e2:	4649      	mov	r1, r9
 80032e4:	eb43 0b01 	adc.w	fp, r3, r1
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032fc:	4692      	mov	sl, r2
 80032fe:	469b      	mov	fp, r3
 8003300:	4643      	mov	r3, r8
 8003302:	eb1a 0303 	adds.w	r3, sl, r3
 8003306:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800330a:	464b      	mov	r3, r9
 800330c:	eb4b 0303 	adc.w	r3, fp, r3
 8003310:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003320:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003324:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003328:	460b      	mov	r3, r1
 800332a:	18db      	adds	r3, r3, r3
 800332c:	643b      	str	r3, [r7, #64]	; 0x40
 800332e:	4613      	mov	r3, r2
 8003330:	eb42 0303 	adc.w	r3, r2, r3
 8003334:	647b      	str	r3, [r7, #68]	; 0x44
 8003336:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800333a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800333e:	f7fc ff49 	bl	80001d4 <__aeabi_uldivmod>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4611      	mov	r1, r2
 8003348:	4b3b      	ldr	r3, [pc, #236]	; (8003438 <UART_SetConfig+0x2d4>)
 800334a:	fba3 2301 	umull	r2, r3, r3, r1
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	2264      	movs	r2, #100	; 0x64
 8003352:	fb02 f303 	mul.w	r3, r2, r3
 8003356:	1acb      	subs	r3, r1, r3
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800335e:	4b36      	ldr	r3, [pc, #216]	; (8003438 <UART_SetConfig+0x2d4>)
 8003360:	fba3 2302 	umull	r2, r3, r3, r2
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800336c:	441c      	add	r4, r3
 800336e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003372:	2200      	movs	r2, #0
 8003374:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003378:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800337c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003380:	4642      	mov	r2, r8
 8003382:	464b      	mov	r3, r9
 8003384:	1891      	adds	r1, r2, r2
 8003386:	63b9      	str	r1, [r7, #56]	; 0x38
 8003388:	415b      	adcs	r3, r3
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800338c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003390:	4641      	mov	r1, r8
 8003392:	1851      	adds	r1, r2, r1
 8003394:	6339      	str	r1, [r7, #48]	; 0x30
 8003396:	4649      	mov	r1, r9
 8003398:	414b      	adcs	r3, r1
 800339a:	637b      	str	r3, [r7, #52]	; 0x34
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80033a8:	4659      	mov	r1, fp
 80033aa:	00cb      	lsls	r3, r1, #3
 80033ac:	4651      	mov	r1, sl
 80033ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033b2:	4651      	mov	r1, sl
 80033b4:	00ca      	lsls	r2, r1, #3
 80033b6:	4610      	mov	r0, r2
 80033b8:	4619      	mov	r1, r3
 80033ba:	4603      	mov	r3, r0
 80033bc:	4642      	mov	r2, r8
 80033be:	189b      	adds	r3, r3, r2
 80033c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033c4:	464b      	mov	r3, r9
 80033c6:	460a      	mov	r2, r1
 80033c8:	eb42 0303 	adc.w	r3, r2, r3
 80033cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80033e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80033e4:	460b      	mov	r3, r1
 80033e6:	18db      	adds	r3, r3, r3
 80033e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ea:	4613      	mov	r3, r2
 80033ec:	eb42 0303 	adc.w	r3, r2, r3
 80033f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80033fa:	f7fc feeb 	bl	80001d4 <__aeabi_uldivmod>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <UART_SetConfig+0x2d4>)
 8003404:	fba3 1302 	umull	r1, r3, r3, r2
 8003408:	095b      	lsrs	r3, r3, #5
 800340a:	2164      	movs	r1, #100	; 0x64
 800340c:	fb01 f303 	mul.w	r3, r1, r3
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	3332      	adds	r3, #50	; 0x32
 8003416:	4a08      	ldr	r2, [pc, #32]	; (8003438 <UART_SetConfig+0x2d4>)
 8003418:	fba2 2303 	umull	r2, r3, r2, r3
 800341c:	095b      	lsrs	r3, r3, #5
 800341e:	f003 0207 	and.w	r2, r3, #7
 8003422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4422      	add	r2, r4
 800342a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800342c:	e106      	b.n	800363c <UART_SetConfig+0x4d8>
 800342e:	bf00      	nop
 8003430:	40011000 	.word	0x40011000
 8003434:	40011400 	.word	0x40011400
 8003438:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800343c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003440:	2200      	movs	r2, #0
 8003442:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003446:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800344a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800344e:	4642      	mov	r2, r8
 8003450:	464b      	mov	r3, r9
 8003452:	1891      	adds	r1, r2, r2
 8003454:	6239      	str	r1, [r7, #32]
 8003456:	415b      	adcs	r3, r3
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
 800345a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800345e:	4641      	mov	r1, r8
 8003460:	1854      	adds	r4, r2, r1
 8003462:	4649      	mov	r1, r9
 8003464:	eb43 0501 	adc.w	r5, r3, r1
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	00eb      	lsls	r3, r5, #3
 8003472:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003476:	00e2      	lsls	r2, r4, #3
 8003478:	4614      	mov	r4, r2
 800347a:	461d      	mov	r5, r3
 800347c:	4643      	mov	r3, r8
 800347e:	18e3      	adds	r3, r4, r3
 8003480:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003484:	464b      	mov	r3, r9
 8003486:	eb45 0303 	adc.w	r3, r5, r3
 800348a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800348e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800349a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034aa:	4629      	mov	r1, r5
 80034ac:	008b      	lsls	r3, r1, #2
 80034ae:	4621      	mov	r1, r4
 80034b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034b4:	4621      	mov	r1, r4
 80034b6:	008a      	lsls	r2, r1, #2
 80034b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80034bc:	f7fc fe8a 	bl	80001d4 <__aeabi_uldivmod>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4b60      	ldr	r3, [pc, #384]	; (8003648 <UART_SetConfig+0x4e4>)
 80034c6:	fba3 2302 	umull	r2, r3, r3, r2
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	011c      	lsls	r4, r3, #4
 80034ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80034e0:	4642      	mov	r2, r8
 80034e2:	464b      	mov	r3, r9
 80034e4:	1891      	adds	r1, r2, r2
 80034e6:	61b9      	str	r1, [r7, #24]
 80034e8:	415b      	adcs	r3, r3
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034f0:	4641      	mov	r1, r8
 80034f2:	1851      	adds	r1, r2, r1
 80034f4:	6139      	str	r1, [r7, #16]
 80034f6:	4649      	mov	r1, r9
 80034f8:	414b      	adcs	r3, r1
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003508:	4659      	mov	r1, fp
 800350a:	00cb      	lsls	r3, r1, #3
 800350c:	4651      	mov	r1, sl
 800350e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003512:	4651      	mov	r1, sl
 8003514:	00ca      	lsls	r2, r1, #3
 8003516:	4610      	mov	r0, r2
 8003518:	4619      	mov	r1, r3
 800351a:	4603      	mov	r3, r0
 800351c:	4642      	mov	r2, r8
 800351e:	189b      	adds	r3, r3, r2
 8003520:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003524:	464b      	mov	r3, r9
 8003526:	460a      	mov	r2, r1
 8003528:	eb42 0303 	adc.w	r3, r2, r3
 800352c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	67bb      	str	r3, [r7, #120]	; 0x78
 800353a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003548:	4649      	mov	r1, r9
 800354a:	008b      	lsls	r3, r1, #2
 800354c:	4641      	mov	r1, r8
 800354e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003552:	4641      	mov	r1, r8
 8003554:	008a      	lsls	r2, r1, #2
 8003556:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800355a:	f7fc fe3b 	bl	80001d4 <__aeabi_uldivmod>
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4611      	mov	r1, r2
 8003564:	4b38      	ldr	r3, [pc, #224]	; (8003648 <UART_SetConfig+0x4e4>)
 8003566:	fba3 2301 	umull	r2, r3, r3, r1
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	2264      	movs	r2, #100	; 0x64
 800356e:	fb02 f303 	mul.w	r3, r2, r3
 8003572:	1acb      	subs	r3, r1, r3
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	3332      	adds	r3, #50	; 0x32
 8003578:	4a33      	ldr	r2, [pc, #204]	; (8003648 <UART_SetConfig+0x4e4>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003584:	441c      	add	r4, r3
 8003586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800358a:	2200      	movs	r2, #0
 800358c:	673b      	str	r3, [r7, #112]	; 0x70
 800358e:	677a      	str	r2, [r7, #116]	; 0x74
 8003590:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003594:	4642      	mov	r2, r8
 8003596:	464b      	mov	r3, r9
 8003598:	1891      	adds	r1, r2, r2
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	415b      	adcs	r3, r3
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035a4:	4641      	mov	r1, r8
 80035a6:	1851      	adds	r1, r2, r1
 80035a8:	6039      	str	r1, [r7, #0]
 80035aa:	4649      	mov	r1, r9
 80035ac:	414b      	adcs	r3, r1
 80035ae:	607b      	str	r3, [r7, #4]
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035bc:	4659      	mov	r1, fp
 80035be:	00cb      	lsls	r3, r1, #3
 80035c0:	4651      	mov	r1, sl
 80035c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035c6:	4651      	mov	r1, sl
 80035c8:	00ca      	lsls	r2, r1, #3
 80035ca:	4610      	mov	r0, r2
 80035cc:	4619      	mov	r1, r3
 80035ce:	4603      	mov	r3, r0
 80035d0:	4642      	mov	r2, r8
 80035d2:	189b      	adds	r3, r3, r2
 80035d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80035d6:	464b      	mov	r3, r9
 80035d8:	460a      	mov	r2, r1
 80035da:	eb42 0303 	adc.w	r3, r2, r3
 80035de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	663b      	str	r3, [r7, #96]	; 0x60
 80035ea:	667a      	str	r2, [r7, #100]	; 0x64
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80035f8:	4649      	mov	r1, r9
 80035fa:	008b      	lsls	r3, r1, #2
 80035fc:	4641      	mov	r1, r8
 80035fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003602:	4641      	mov	r1, r8
 8003604:	008a      	lsls	r2, r1, #2
 8003606:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800360a:	f7fc fde3 	bl	80001d4 <__aeabi_uldivmod>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <UART_SetConfig+0x4e4>)
 8003614:	fba3 1302 	umull	r1, r3, r3, r2
 8003618:	095b      	lsrs	r3, r3, #5
 800361a:	2164      	movs	r1, #100	; 0x64
 800361c:	fb01 f303 	mul.w	r3, r1, r3
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	3332      	adds	r3, #50	; 0x32
 8003626:	4a08      	ldr	r2, [pc, #32]	; (8003648 <UART_SetConfig+0x4e4>)
 8003628:	fba2 2303 	umull	r2, r3, r2, r3
 800362c:	095b      	lsrs	r3, r3, #5
 800362e:	f003 020f 	and.w	r2, r3, #15
 8003632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4422      	add	r2, r4
 800363a:	609a      	str	r2, [r3, #8]
}
 800363c:	bf00      	nop
 800363e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003642:	46bd      	mov	sp, r7
 8003644:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003648:	51eb851f 	.word	0x51eb851f

0800364c <memset>:
 800364c:	4402      	add	r2, r0
 800364e:	4603      	mov	r3, r0
 8003650:	4293      	cmp	r3, r2
 8003652:	d100      	bne.n	8003656 <memset+0xa>
 8003654:	4770      	bx	lr
 8003656:	f803 1b01 	strb.w	r1, [r3], #1
 800365a:	e7f9      	b.n	8003650 <memset+0x4>

0800365c <__libc_init_array>:
 800365c:	b570      	push	{r4, r5, r6, lr}
 800365e:	4d0d      	ldr	r5, [pc, #52]	; (8003694 <__libc_init_array+0x38>)
 8003660:	4c0d      	ldr	r4, [pc, #52]	; (8003698 <__libc_init_array+0x3c>)
 8003662:	1b64      	subs	r4, r4, r5
 8003664:	10a4      	asrs	r4, r4, #2
 8003666:	2600      	movs	r6, #0
 8003668:	42a6      	cmp	r6, r4
 800366a:	d109      	bne.n	8003680 <__libc_init_array+0x24>
 800366c:	4d0b      	ldr	r5, [pc, #44]	; (800369c <__libc_init_array+0x40>)
 800366e:	4c0c      	ldr	r4, [pc, #48]	; (80036a0 <__libc_init_array+0x44>)
 8003670:	f000 f818 	bl	80036a4 <_init>
 8003674:	1b64      	subs	r4, r4, r5
 8003676:	10a4      	asrs	r4, r4, #2
 8003678:	2600      	movs	r6, #0
 800367a:	42a6      	cmp	r6, r4
 800367c:	d105      	bne.n	800368a <__libc_init_array+0x2e>
 800367e:	bd70      	pop	{r4, r5, r6, pc}
 8003680:	f855 3b04 	ldr.w	r3, [r5], #4
 8003684:	4798      	blx	r3
 8003686:	3601      	adds	r6, #1
 8003688:	e7ee      	b.n	8003668 <__libc_init_array+0xc>
 800368a:	f855 3b04 	ldr.w	r3, [r5], #4
 800368e:	4798      	blx	r3
 8003690:	3601      	adds	r6, #1
 8003692:	e7f2      	b.n	800367a <__libc_init_array+0x1e>
 8003694:	080036dc 	.word	0x080036dc
 8003698:	080036dc 	.word	0x080036dc
 800369c:	080036dc 	.word	0x080036dc
 80036a0:	080036e0 	.word	0x080036e0

080036a4 <_init>:
 80036a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a6:	bf00      	nop
 80036a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036aa:	bc08      	pop	{r3}
 80036ac:	469e      	mov	lr, r3
 80036ae:	4770      	bx	lr

080036b0 <_fini>:
 80036b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b2:	bf00      	nop
 80036b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036b6:	bc08      	pop	{r3}
 80036b8:	469e      	mov	lr, r3
 80036ba:	4770      	bx	lr

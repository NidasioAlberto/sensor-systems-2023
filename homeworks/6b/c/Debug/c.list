
c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a740  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  0800a8e0  0800a8e0  0001a8e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800accc  0800accc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800accc  0800accc  0001accc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acd4  0800acd4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acd4  0800acd4  0001acd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acd8  0800acd8  0001acd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800acdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  200001dc  0800aeb8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  0800aeb8  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000104d5  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021cc  00000000  00000000  00030724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc0  00000000  00000000  000328f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c76  00000000  00000000  000338b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000176bd  00000000  00000000  00034526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011d9a  00000000  00000000  0004bbe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091735  00000000  00000000  0005d97d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054ec  00000000  00000000  000ef0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000f45a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a8c8 	.word	0x0800a8c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800a8c8 	.word	0x0800a8c8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <readRegister>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t readRegister(uint8_t reg)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af02      	add	r7, sp, #8
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	// Send the first request to write the register address
	HAL_I2C_Master_Transmit(&hi2c1, address, &reg, 1, HAL_MAX_DELAY);
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <readRegister+0x40>)
 8000ec0:	8819      	ldrh	r1, [r3, #0]
 8000ec2:	1dfa      	adds	r2, r7, #7
 8000ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2301      	movs	r3, #1
 8000ecc:	480a      	ldr	r0, [pc, #40]	; (8000ef8 <readRegister+0x44>)
 8000ece:	f001 fe6d 	bl	8002bac <HAL_I2C_Master_Transmit>

	// Then read the answer
	HAL_I2C_Master_Receive(&hi2c1, address, &data, 1, HAL_MAX_DELAY);
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <readRegister+0x40>)
 8000ed4:	8819      	ldrh	r1, [r3, #0]
 8000ed6:	f107 020f 	add.w	r2, r7, #15
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <readRegister+0x44>)
 8000ee4:	f001 ff60 	bl	8002da8 <HAL_I2C_Master_Receive>

	return data;
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	200001f8 	.word	0x200001f8

08000efc <writeRegister>:

void writeRegister(uint8_t reg, uint8_t content)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af02      	add	r7, sp, #8
 8000f02:	4603      	mov	r3, r0
 8000f04:	460a      	mov	r2, r1
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2] = {reg, content};
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	733b      	strb	r3, [r7, #12]
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	737b      	strb	r3, [r7, #13]

	// Write the combination of register address and content
	HAL_I2C_Master_Transmit(&hi2c1, address, data, 2, HAL_MAX_DELAY);
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <writeRegister+0x38>)
 8000f16:	8819      	ldrh	r1, [r3, #0]
 8000f18:	f107 020c 	add.w	r2, r7, #12
 8000f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	2302      	movs	r3, #2
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <writeRegister+0x3c>)
 8000f26:	f001 fe41 	bl	8002bac <HAL_I2C_Master_Transmit>
}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000000 	.word	0x20000000
 8000f38:	200001f8 	.word	0x200001f8

08000f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b09a      	sub	sp, #104	; 0x68
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f42:	f000 fd97 	bl	8001a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f46:	f000 f897 	bl	8001078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4a:	f000 f9d7 	bl	80012fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000f4e:	f000 f9ad 	bl	80012ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f52:	f000 f981 	bl	8001258 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f56:	f000 f8fb 	bl	8001150 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000f5a:	f000 f927 	bl	80011ac <MX_TIM2_Init>

  // Check WHO_AM_I
  uint8_t data;

  // Get the whoami register
  data = readRegister(WHO_AM_I);
 8000f5e:	4b3e      	ldr	r3, [pc, #248]	; (8001058 <main+0x11c>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ffa6 	bl	8000eb4 <readRegister>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

  if(data != 0x33)
 8000f6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f72:	2b33      	cmp	r3, #51	; 0x33
 8000f74:	d014      	beq.n	8000fa0 <main+0x64>
  {
	  sprintf(printBuffer, "Error validating the WHO AM I. Answer: %X\r\n", data);
 8000f76:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	4937      	ldr	r1, [pc, #220]	; (800105c <main+0x120>)
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f007 fb46 	bl	8008610 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) printBuffer, strlen(printBuffer), HAL_MAX_DELAY);
 8000f84:	463b      	mov	r3, r7
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff f97a 	bl	8000280 <strlen>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	4639      	mov	r1, r7
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f96:	4832      	ldr	r0, [pc, #200]	; (8001060 <main+0x124>)
 8000f98:	f005 fcf5 	bl	8006986 <HAL_UART_Transmit>
	  return 1;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e057      	b.n	8001050 <main+0x114>
  }

  // The check has been done with success
  sprintf(printBuffer, "WHO AM I correct!\r\n");
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	4930      	ldr	r1, [pc, #192]	; (8001064 <main+0x128>)
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f007 fb33 	bl	8008610 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *) printBuffer, strlen(printBuffer), HAL_MAX_DELAY);
 8000faa:	463b      	mov	r3, r7
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff f967 	bl	8000280 <strlen>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	4639      	mov	r1, r7
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fbc:	4828      	ldr	r0, [pc, #160]	; (8001060 <main+0x124>)
 8000fbe:	f005 fce2 	bl	8006986 <HAL_UART_Transmit>

  // Configure the normal mode
  data = readRegister(CTRL_REG1);
 8000fc2:	4b29      	ldr	r3, [pc, #164]	; (8001068 <main+0x12c>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff74 	bl	8000eb4 <readRegister>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

  // Set the third bit to 0 in normal mode
  data &= 0b11110111;
 8000fd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000fd6:	f023 0308 	bic.w	r3, r3, #8
 8000fda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

  // Set the data rate to 100Hz
  data &= 0b00001111;
 8000fde:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000fe2:	f003 030f 	and.w	r3, r3, #15
 8000fe6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  data |= 0b01010000;
 8000fea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000fee:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000ff2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

  // Send the config
  writeRegister(CTRL_REG1, data);
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <main+0x12c>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff7b 	bl	8000efc <writeRegister>

  // Set the high pass filter to disabled
  data = 0x00;
 8001006:	2300      	movs	r3, #0
 8001008:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

  // Send the config
  writeRegister(CTRL_REG2, data);
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <main+0x130>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001014:	4611      	mov	r1, r2
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ff70 	bl	8000efc <writeRegister>

  // Set the full scale value to +-2g
  data = readRegister(CTRL_REG4);
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <main+0x134>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff47 	bl	8000eb4 <readRegister>
 8001026:	4603      	mov	r3, r0
 8001028:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

  // 00 means +-2g
  data &= 0b11001111;
 800102c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001030:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001034:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

  // Send the config
  writeRegister(CTRL_REG4, data);
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <main+0x134>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001040:	4611      	mov	r1, r2
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff5a 	bl	8000efc <writeRegister>

  // Enable the periodic timer
  HAL_TIM_Base_Start_IT(&htim2);
 8001048:	480a      	ldr	r0, [pc, #40]	; (8001074 <main+0x138>)
 800104a:	f004 ff83 	bl	8005f54 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800104e:	e7fe      	b.n	800104e <main+0x112>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001050:	4618      	mov	r0, r3
 8001052:	3768      	adds	r7, #104	; 0x68
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000002 	.word	0x20000002
 800105c:	0800a8e0 	.word	0x0800a8e0
 8001060:	200002f4 	.word	0x200002f4
 8001064:	0800a90c 	.word	0x0800a90c
 8001068:	20000003 	.word	0x20000003
 800106c:	20000004 	.word	0x20000004
 8001070:	20000005 	.word	0x20000005
 8001074:	200002ac 	.word	0x200002ac

08001078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b094      	sub	sp, #80	; 0x50
 800107c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	2230      	movs	r2, #48	; 0x30
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f007 fb25 	bl	80086d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	4b29      	ldr	r3, [pc, #164]	; (8001148 <SystemClock_Config+0xd0>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	4a28      	ldr	r2, [pc, #160]	; (8001148 <SystemClock_Config+0xd0>)
 80010a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010aa:	6413      	str	r3, [r2, #64]	; 0x40
 80010ac:	4b26      	ldr	r3, [pc, #152]	; (8001148 <SystemClock_Config+0xd0>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	4b23      	ldr	r3, [pc, #140]	; (800114c <SystemClock_Config+0xd4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010c4:	4a21      	ldr	r2, [pc, #132]	; (800114c <SystemClock_Config+0xd4>)
 80010c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	4b1f      	ldr	r3, [pc, #124]	; (800114c <SystemClock_Config+0xd4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d8:	2302      	movs	r3, #2
 80010da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010dc:	2301      	movs	r3, #1
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e0:	2310      	movs	r3, #16
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e4:	2302      	movs	r3, #2
 80010e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010e8:	2300      	movs	r3, #0
 80010ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010ec:	2310      	movs	r3, #16
 80010ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010f6:	2304      	movs	r3, #4
 80010f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010fa:	2307      	movs	r3, #7
 80010fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fe:	f107 0320 	add.w	r3, r7, #32
 8001102:	4618      	mov	r0, r3
 8001104:	f004 fa8e 	bl	8005624 <HAL_RCC_OscConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800110e:	f000 f9e9 	bl	80014e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001112:	230f      	movs	r3, #15
 8001114:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001116:	2302      	movs	r3, #2
 8001118:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800111e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001122:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	2102      	movs	r1, #2
 800112e:	4618      	mov	r0, r3
 8001130:	f004 fcf0 	bl	8005b14 <HAL_RCC_ClockConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800113a:	f000 f9d3 	bl	80014e4 <Error_Handler>
  }
}
 800113e:	bf00      	nop
 8001140:	3750      	adds	r7, #80	; 0x50
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800
 800114c:	40007000 	.word	0x40007000

08001150 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001156:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <MX_I2C1_Init+0x54>)
 8001158:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_I2C1_Init+0x50>)
 800115c:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <MX_I2C1_Init+0x58>)
 800115e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_I2C1_Init+0x50>)
 800116e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001172:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_I2C1_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <MX_I2C1_Init+0x50>)
 800118e:	f001 fbc9 	bl	8002924 <HAL_I2C_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001198:	f000 f9a4 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200001f8 	.word	0x200001f8
 80011a4:	40005400 	.word	0x40005400
 80011a8:	000186a0 	.word	0x000186a0

080011ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b2:	f107 0320 	add.w	r3, r7, #32
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
 80011ca:	615a      	str	r2, [r3, #20]
 80011cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011ce:	4b21      	ldr	r3, [pc, #132]	; (8001254 <MX_TIM2_Init+0xa8>)
 80011d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1400 - 1;
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <MX_TIM2_Init+0xa8>)
 80011d8:	f240 5277 	movw	r2, #1399	; 0x577
 80011dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011de:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <MX_TIM2_Init+0xa8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000 - 1;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <MX_TIM2_Init+0xa8>)
 80011e6:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80011ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_TIM2_Init+0xa8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <MX_TIM2_Init+0xa8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80011f8:	4816      	ldr	r0, [pc, #88]	; (8001254 <MX_TIM2_Init+0xa8>)
 80011fa:	f004 ff0d 	bl	8006018 <HAL_TIM_OC_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001204:	f000 f96e 	bl	80014e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001210:	f107 0320 	add.w	r3, r7, #32
 8001214:	4619      	mov	r1, r3
 8001216:	480f      	ldr	r0, [pc, #60]	; (8001254 <MX_TIM2_Init+0xa8>)
 8001218:	f005 fae6 	bl	80067e8 <HAL_TIMEx_MasterConfigSynchronization>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001222:	f000 f95f 	bl	80014e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2200      	movs	r2, #0
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_TIM2_Init+0xa8>)
 800123e:	f005 f843 	bl	80062c8 <HAL_TIM_OC_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001248:	f000 f94c 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	3728      	adds	r7, #40	; 0x28
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200002ac 	.word	0x200002ac

08001258 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <MX_USART2_UART_Init+0x50>)
 8001260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001264:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 800127e:	220c      	movs	r2, #12
 8001280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001290:	f005 fb2c 	bl	80068ec <HAL_UART_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800129a:	f000 f923 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200002f4 	.word	0x200002f4
 80012a8:	40004400 	.word	0x40004400

080012ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <MX_DMA_Init+0x4c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <MX_DMA_Init+0x4c>)
 80012bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <MX_DMA_Init+0x4c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	200b      	movs	r0, #11
 80012d4:	f000 fd1b 	bl	8001d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012d8:	200b      	movs	r0, #11
 80012da:	f000 fd34 	bl	8001d46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	2011      	movs	r0, #17
 80012e4:	f000 fd13 	bl	8001d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80012e8:	2011      	movs	r0, #17
 80012ea:	f000 fd2c 	bl	8001d46 <HAL_NVIC_EnableIRQ>

}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800

080012fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <MX_GPIO_Init+0xd0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a2c      	ldr	r2, [pc, #176]	; (80013cc <MX_GPIO_Init+0xd0>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <MX_GPIO_Init+0xd0>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <MX_GPIO_Init+0xd0>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a25      	ldr	r2, [pc, #148]	; (80013cc <MX_GPIO_Init+0xd0>)
 8001338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b23      	ldr	r3, [pc, #140]	; (80013cc <MX_GPIO_Init+0xd0>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <MX_GPIO_Init+0xd0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a1e      	ldr	r2, [pc, #120]	; (80013cc <MX_GPIO_Init+0xd0>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <MX_GPIO_Init+0xd0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <MX_GPIO_Init+0xd0>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a17      	ldr	r2, [pc, #92]	; (80013cc <MX_GPIO_Init+0xd0>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <MX_GPIO_Init+0xd0>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	2120      	movs	r1, #32
 8001386:	4812      	ldr	r0, [pc, #72]	; (80013d0 <MX_GPIO_Init+0xd4>)
 8001388:	f001 fa98 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800138c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001392:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4619      	mov	r1, r3
 80013a2:	480c      	ldr	r0, [pc, #48]	; (80013d4 <MX_GPIO_Init+0xd8>)
 80013a4:	f001 f906 	bl	80025b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013a8:	2320      	movs	r3, #32
 80013aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	4804      	ldr	r0, [pc, #16]	; (80013d0 <MX_GPIO_Init+0xd4>)
 80013c0:	f001 f8f8 	bl	80025b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	; 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020000 	.word	0x40020000
 80013d4:	40020800 	.word	0x40020800

080013d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
uint8_t i2cData[5];

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af02      	add	r7, sp, #8
 80013de:	6078      	str	r0, [r7, #4]

	HAL_I2C_Master_Transmit(&hi2c1, address, &OUT_X, 1, HAL_MAX_DELAY);
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_TIM_PeriodElapsedCallback+0x34>)
 80013e2:	8819      	ldrh	r1, [r3, #0]
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2301      	movs	r3, #1
 80013ec:	4a08      	ldr	r2, [pc, #32]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80013ee:	4809      	ldr	r0, [pc, #36]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80013f0:	f001 fbdc 	bl	8002bac <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive_DMA(&hi2c1, address, i2cData,sizeof(i2cData));
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_TIM_PeriodElapsedCallback+0x34>)
 80013f6:	8819      	ldrh	r1, [r3, #0]
 80013f8:	2305      	movs	r3, #5
 80013fa:	4a07      	ldr	r2, [pc, #28]	; (8001418 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80013fc:	4805      	ldr	r0, [pc, #20]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80013fe:	f001 fef9 	bl	80031f4 <HAL_I2C_Master_Receive_DMA>

}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000000 	.word	0x20000000
 8001410:	20000006 	.word	0x20000006
 8001414:	200001f8 	.word	0x200001f8
 8001418:	20000398 	.word	0x20000398

0800141c <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef * hi2c)
{
 800141c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001420:	b0a0      	sub	sp, #128	; 0x80
 8001422:	af04      	add	r7, sp, #16
 8001424:	6078      	str	r0, [r7, #4]
	char printBuffer[100];
	sprintf(printBuffer, "Data: %.2f %.2f %.2f\r\n", ((int8_t)i2cData[0]) * SENSITIVITY, ((int8_t)i2cData[2]) * SENSITIVITY,((int8_t)i2cData[4]) * SENSITIVITY);
 8001426:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <HAL_I2C_MasterRxCpltCallback+0xb4>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b25b      	sxtb	r3, r3
 800142c:	ee07 3a90 	vmov	s15, r3
 8001430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001434:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80014d4 <HAL_I2C_MasterRxCpltCallback+0xb8>
 8001438:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143c:	ee17 0a90 	vmov	r0, s15
 8001440:	f7ff f88a 	bl	8000558 <__aeabi_f2d>
 8001444:	4680      	mov	r8, r0
 8001446:	4689      	mov	r9, r1
 8001448:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <HAL_I2C_MasterRxCpltCallback+0xb4>)
 800144a:	789b      	ldrb	r3, [r3, #2]
 800144c:	b25b      	sxtb	r3, r3
 800144e:	ee07 3a90 	vmov	s15, r3
 8001452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001456:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80014d4 <HAL_I2C_MasterRxCpltCallback+0xb8>
 800145a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145e:	ee17 0a90 	vmov	r0, s15
 8001462:	f7ff f879 	bl	8000558 <__aeabi_f2d>
 8001466:	4604      	mov	r4, r0
 8001468:	460d      	mov	r5, r1
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <HAL_I2C_MasterRxCpltCallback+0xb4>)
 800146c:	791b      	ldrb	r3, [r3, #4]
 800146e:	b25b      	sxtb	r3, r3
 8001470:	ee07 3a90 	vmov	s15, r3
 8001474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001478:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80014d4 <HAL_I2C_MasterRxCpltCallback+0xb8>
 800147c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001480:	ee17 0a90 	vmov	r0, s15
 8001484:	f7ff f868 	bl	8000558 <__aeabi_f2d>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	f107 000c 	add.w	r0, r7, #12
 8001490:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001494:	e9cd 4500 	strd	r4, r5, [sp]
 8001498:	4642      	mov	r2, r8
 800149a:	464b      	mov	r3, r9
 800149c:	490e      	ldr	r1, [pc, #56]	; (80014d8 <HAL_I2C_MasterRxCpltCallback+0xbc>)
 800149e:	f007 f8b7 	bl	8008610 <siprintf>
	HAL_UART_Transmit_DMA(&huart2, (uint8_t *) printBuffer, strlen(printBuffer));
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7fe feea 	bl	8000280 <strlen>
 80014ac:	4603      	mov	r3, r0
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	4619      	mov	r1, r3
 80014b6:	4809      	ldr	r0, [pc, #36]	; (80014dc <HAL_I2C_MasterRxCpltCallback+0xc0>)
 80014b8:	f005 faf8 	bl	8006aac <HAL_UART_Transmit_DMA>

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80014bc:	2120      	movs	r1, #32
 80014be:	4808      	ldr	r0, [pc, #32]	; (80014e0 <HAL_I2C_MasterRxCpltCallback+0xc4>)
 80014c0:	f001 fa15 	bl	80028ee <HAL_GPIO_TogglePin>
  // RX Done .. Do Something!
}
 80014c4:	bf00      	nop
 80014c6:	3770      	adds	r7, #112	; 0x70
 80014c8:	46bd      	mov	sp, r7
 80014ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014ce:	bf00      	nop
 80014d0:	20000398 	.word	0x20000398
 80014d4:	3c800000 	.word	0x3c800000
 80014d8:	0800a920 	.word	0x0800a920
 80014dc:	200002f4 	.word	0x200002f4
 80014e0:	40020000 	.word	0x40020000

080014e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e8:	b672      	cpsid	i
}
 80014ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ec:	e7fe      	b.n	80014ec <Error_Handler+0x8>
	...

080014f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <HAL_MspInit+0x4c>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	4a0f      	ldr	r2, [pc, #60]	; (800153c <HAL_MspInit+0x4c>)
 8001500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001504:	6453      	str	r3, [r2, #68]	; 0x44
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <HAL_MspInit+0x4c>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_MspInit+0x4c>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a08      	ldr	r2, [pc, #32]	; (800153c <HAL_MspInit+0x4c>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_MspInit+0x4c>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800152e:	2007      	movs	r0, #7
 8001530:	f000 fbe2 	bl	8001cf8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40023800 	.word	0x40023800

08001540 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	; 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a38      	ldr	r2, [pc, #224]	; (8001640 <HAL_I2C_MspInit+0x100>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d16a      	bne.n	8001638 <HAL_I2C_MspInit+0xf8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b37      	ldr	r3, [pc, #220]	; (8001644 <HAL_I2C_MspInit+0x104>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a36      	ldr	r2, [pc, #216]	; (8001644 <HAL_I2C_MspInit+0x104>)
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b34      	ldr	r3, [pc, #208]	; (8001644 <HAL_I2C_MspInit+0x104>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800157e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001584:	2312      	movs	r3, #18
 8001586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158c:	2303      	movs	r3, #3
 800158e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001590:	2304      	movs	r3, #4
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4619      	mov	r1, r3
 800159a:	482b      	ldr	r0, [pc, #172]	; (8001648 <HAL_I2C_MspInit+0x108>)
 800159c:	f001 f80a 	bl	80025b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	4b27      	ldr	r3, [pc, #156]	; (8001644 <HAL_I2C_MspInit+0x104>)
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	4a26      	ldr	r2, [pc, #152]	; (8001644 <HAL_I2C_MspInit+0x104>)
 80015aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ae:	6413      	str	r3, [r2, #64]	; 0x40
 80015b0:	4b24      	ldr	r3, [pc, #144]	; (8001644 <HAL_I2C_MspInit+0x104>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80015bc:	4b23      	ldr	r3, [pc, #140]	; (800164c <HAL_I2C_MspInit+0x10c>)
 80015be:	4a24      	ldr	r2, [pc, #144]	; (8001650 <HAL_I2C_MspInit+0x110>)
 80015c0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80015c2:	4b22      	ldr	r3, [pc, #136]	; (800164c <HAL_I2C_MspInit+0x10c>)
 80015c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015c8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <HAL_I2C_MspInit+0x10c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d0:	4b1e      	ldr	r3, [pc, #120]	; (800164c <HAL_I2C_MspInit+0x10c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015d6:	4b1d      	ldr	r3, [pc, #116]	; (800164c <HAL_I2C_MspInit+0x10c>)
 80015d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015dc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015de:	4b1b      	ldr	r3, [pc, #108]	; (800164c <HAL_I2C_MspInit+0x10c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015e4:	4b19      	ldr	r3, [pc, #100]	; (800164c <HAL_I2C_MspInit+0x10c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <HAL_I2C_MspInit+0x10c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015f0:	4b16      	ldr	r3, [pc, #88]	; (800164c <HAL_I2C_MspInit+0x10c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_I2C_MspInit+0x10c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80015fc:	4813      	ldr	r0, [pc, #76]	; (800164c <HAL_I2C_MspInit+0x10c>)
 80015fe:	f000 fbbd 	bl	8001d7c <HAL_DMA_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001608:	f7ff ff6c 	bl	80014e4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a0f      	ldr	r2, [pc, #60]	; (800164c <HAL_I2C_MspInit+0x10c>)
 8001610:	639a      	str	r2, [r3, #56]	; 0x38
 8001612:	4a0e      	ldr	r2, [pc, #56]	; (800164c <HAL_I2C_MspInit+0x10c>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	2100      	movs	r1, #0
 800161c:	201f      	movs	r0, #31
 800161e:	f000 fb76 	bl	8001d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001622:	201f      	movs	r0, #31
 8001624:	f000 fb8f 	bl	8001d46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001628:	2200      	movs	r2, #0
 800162a:	2100      	movs	r1, #0
 800162c:	2020      	movs	r0, #32
 800162e:	f000 fb6e 	bl	8001d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001632:	2020      	movs	r0, #32
 8001634:	f000 fb87 	bl	8001d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	; 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40005400 	.word	0x40005400
 8001644:	40023800 	.word	0x40023800
 8001648:	40020400 	.word	0x40020400
 800164c:	2000024c 	.word	0x2000024c
 8001650:	40026010 	.word	0x40026010

08001654 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001664:	d115      	bne.n	8001692 <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <HAL_TIM_OC_MspInit+0x48>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <HAL_TIM_OC_MspInit+0x48>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6413      	str	r3, [r2, #64]	; 0x40
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_TIM_OC_MspInit+0x48>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2100      	movs	r1, #0
 8001686:	201c      	movs	r0, #28
 8001688:	f000 fb41 	bl	8001d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800168c:	201c      	movs	r0, #28
 800168e:	f000 fb5a 	bl	8001d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800

080016a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a34      	ldr	r2, [pc, #208]	; (8001790 <HAL_UART_MspInit+0xf0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d161      	bne.n	8001786 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	4b33      	ldr	r3, [pc, #204]	; (8001794 <HAL_UART_MspInit+0xf4>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	4a32      	ldr	r2, [pc, #200]	; (8001794 <HAL_UART_MspInit+0xf4>)
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d0:	6413      	str	r3, [r2, #64]	; 0x40
 80016d2:	4b30      	ldr	r3, [pc, #192]	; (8001794 <HAL_UART_MspInit+0xf4>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b2c      	ldr	r3, [pc, #176]	; (8001794 <HAL_UART_MspInit+0xf4>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a2b      	ldr	r2, [pc, #172]	; (8001794 <HAL_UART_MspInit+0xf4>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b29      	ldr	r3, [pc, #164]	; (8001794 <HAL_UART_MspInit+0xf4>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016fa:	230c      	movs	r3, #12
 80016fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800170a:	2307      	movs	r3, #7
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	4820      	ldr	r0, [pc, #128]	; (8001798 <HAL_UART_MspInit+0xf8>)
 8001716:	f000 ff4d 	bl	80025b4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800171a:	4b20      	ldr	r3, [pc, #128]	; (800179c <HAL_UART_MspInit+0xfc>)
 800171c:	4a20      	ldr	r2, [pc, #128]	; (80017a0 <HAL_UART_MspInit+0x100>)
 800171e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <HAL_UART_MspInit+0xfc>)
 8001722:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001726:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <HAL_UART_MspInit+0xfc>)
 800172a:	2240      	movs	r2, #64	; 0x40
 800172c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800172e:	4b1b      	ldr	r3, [pc, #108]	; (800179c <HAL_UART_MspInit+0xfc>)
 8001730:	2200      	movs	r2, #0
 8001732:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_UART_MspInit+0xfc>)
 8001736:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800173a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800173c:	4b17      	ldr	r3, [pc, #92]	; (800179c <HAL_UART_MspInit+0xfc>)
 800173e:	2200      	movs	r2, #0
 8001740:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001742:	4b16      	ldr	r3, [pc, #88]	; (800179c <HAL_UART_MspInit+0xfc>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001748:	4b14      	ldr	r3, [pc, #80]	; (800179c <HAL_UART_MspInit+0xfc>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <HAL_UART_MspInit+0xfc>)
 8001750:	2200      	movs	r2, #0
 8001752:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_UART_MspInit+0xfc>)
 8001756:	2200      	movs	r2, #0
 8001758:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800175a:	4810      	ldr	r0, [pc, #64]	; (800179c <HAL_UART_MspInit+0xfc>)
 800175c:	f000 fb0e 	bl	8001d7c <HAL_DMA_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001766:	f7ff febd 	bl	80014e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a0b      	ldr	r2, [pc, #44]	; (800179c <HAL_UART_MspInit+0xfc>)
 800176e:	635a      	str	r2, [r3, #52]	; 0x34
 8001770:	4a0a      	ldr	r2, [pc, #40]	; (800179c <HAL_UART_MspInit+0xfc>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	2100      	movs	r1, #0
 800177a:	2026      	movs	r0, #38	; 0x26
 800177c:	f000 fac7 	bl	8001d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001780:	2026      	movs	r0, #38	; 0x26
 8001782:	f000 fae0 	bl	8001d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001786:	bf00      	nop
 8001788:	3728      	adds	r7, #40	; 0x28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40004400 	.word	0x40004400
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000
 800179c:	20000338 	.word	0x20000338
 80017a0:	400260a0 	.word	0x400260a0

080017a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <NMI_Handler+0x4>

080017aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <HardFault_Handler+0x4>

080017b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <MemManage_Handler+0x4>

080017b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ba:	e7fe      	b.n	80017ba <BusFault_Handler+0x4>

080017bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <UsageFault_Handler+0x4>

080017c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f0:	f000 f992 	bl	8001b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <DMA1_Stream0_IRQHandler+0x10>)
 80017fe:	f000 fc55 	bl	80020ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2000024c 	.word	0x2000024c

0800180c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <DMA1_Stream6_IRQHandler+0x10>)
 8001812:	f000 fc4b 	bl	80020ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000338 	.word	0x20000338

08001820 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <TIM2_IRQHandler+0x10>)
 8001826:	f004 fc46 	bl	80060b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200002ac 	.word	0x200002ac

08001834 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001838:	4802      	ldr	r0, [pc, #8]	; (8001844 <I2C1_EV_IRQHandler+0x10>)
 800183a:	f001 fe0b 	bl	8003454 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200001f8 	.word	0x200001f8

08001848 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <I2C1_ER_IRQHandler+0x10>)
 800184e:	f001 ff54 	bl	80036fa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200001f8 	.word	0x200001f8

0800185c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <USART2_IRQHandler+0x10>)
 8001862:	f005 f9a1 	bl	8006ba8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	200002f4 	.word	0x200002f4

08001870 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return 1;
 8001874:	2301      	movs	r3, #1
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <_kill>:

int _kill(int pid, int sig)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800188a:	f006 ff77 	bl	800877c <__errno>
 800188e:	4603      	mov	r3, r0
 8001890:	2216      	movs	r2, #22
 8001892:	601a      	str	r2, [r3, #0]
  return -1;
 8001894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <_exit>:

void _exit (int status)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ffe7 	bl	8001880 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018b2:	e7fe      	b.n	80018b2 <_exit+0x12>

080018b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	e00a      	b.n	80018dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018c6:	f3af 8000 	nop.w
 80018ca:	4601      	mov	r1, r0
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	60ba      	str	r2, [r7, #8]
 80018d2:	b2ca      	uxtb	r2, r1
 80018d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	3301      	adds	r3, #1
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	dbf0      	blt.n	80018c6 <_read+0x12>
  }

  return len;
 80018e4:	687b      	ldr	r3, [r7, #4]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b086      	sub	sp, #24
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	e009      	b.n	8001914 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	60ba      	str	r2, [r7, #8]
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3301      	adds	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	429a      	cmp	r2, r3
 800191a:	dbf1      	blt.n	8001900 <_write+0x12>
  }
  return len;
 800191c:	687b      	ldr	r3, [r7, #4]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <_close>:

int _close(int file)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800194e:	605a      	str	r2, [r3, #4]
  return 0;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <_isatty>:

int _isatty(int file)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001998:	4a14      	ldr	r2, [pc, #80]	; (80019ec <_sbrk+0x5c>)
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <_sbrk+0x60>)
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a4:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <_sbrk+0x64>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d102      	bne.n	80019b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <_sbrk+0x64>)
 80019ae:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <_sbrk+0x68>)
 80019b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d207      	bcs.n	80019d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c0:	f006 fedc 	bl	800877c <__errno>
 80019c4:	4603      	mov	r3, r0
 80019c6:	220c      	movs	r2, #12
 80019c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ce:	e009      	b.n	80019e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <_sbrk+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <_sbrk+0x64>)
 80019e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019e2:	68fb      	ldr	r3, [r7, #12]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20018000 	.word	0x20018000
 80019f0:	00000400 	.word	0x00000400
 80019f4:	200003a0 	.word	0x200003a0
 80019f8:	200004f8 	.word	0x200004f8

080019fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <SystemInit+0x20>)
 8001a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a06:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <SystemInit+0x20>)
 8001a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a24:	480d      	ldr	r0, [pc, #52]	; (8001a5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a26:	490e      	ldr	r1, [pc, #56]	; (8001a60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a28:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a2c:	e002      	b.n	8001a34 <LoopCopyDataInit>

08001a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a32:	3304      	adds	r3, #4

08001a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a38:	d3f9      	bcc.n	8001a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3a:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a3c:	4c0b      	ldr	r4, [pc, #44]	; (8001a6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a40:	e001      	b.n	8001a46 <LoopFillZerobss>

08001a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a44:	3204      	adds	r2, #4

08001a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a48:	d3fb      	bcc.n	8001a42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a4a:	f7ff ffd7 	bl	80019fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a4e:	f006 fe9b 	bl	8008788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a52:	f7ff fa73 	bl	8000f3c <main>
  bx  lr    
 8001a56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a60:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001a64:	0800acdc 	.word	0x0800acdc
  ldr r2, =_sbss
 8001a68:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001a6c:	200004f4 	.word	0x200004f4

08001a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a70:	e7fe      	b.n	8001a70 <ADC_IRQHandler>
	...

08001a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a78:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <HAL_Init+0x40>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	; (8001ab4 <HAL_Init+0x40>)
 8001a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_Init+0x40>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <HAL_Init+0x40>)
 8001a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <HAL_Init+0x40>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <HAL_Init+0x40>)
 8001a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	f000 f92b 	bl	8001cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f000 f808 	bl	8001ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa8:	f7ff fd22 	bl	80014f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023c00 	.word	0x40023c00

08001ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_InitTick+0x54>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <HAL_InitTick+0x58>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 f943 	bl	8001d62 <HAL_SYSTICK_Config>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00e      	b.n	8001b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b0f      	cmp	r3, #15
 8001aea:	d80a      	bhi.n	8001b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aec:	2200      	movs	r2, #0
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001af4:	f000 f90b 	bl	8001d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af8:	4a06      	ldr	r2, [pc, #24]	; (8001b14 <HAL_InitTick+0x5c>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e000      	b.n	8001b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000008 	.word	0x20000008
 8001b10:	20000010 	.word	0x20000010
 8001b14:	2000000c 	.word	0x2000000c

08001b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_IncTick+0x20>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_IncTick+0x24>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <HAL_IncTick+0x24>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000010 	.word	0x20000010
 8001b3c:	200003a4 	.word	0x200003a4

08001b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_GetTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	200003a4 	.word	0x200003a4

08001b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b74:	4013      	ands	r3, r2
 8001b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8a:	4a04      	ldr	r2, [pc, #16]	; (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	60d3      	str	r3, [r2, #12]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba4:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	f003 0307 	and.w	r3, r3, #7
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	db0b      	blt.n	8001be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	f003 021f 	and.w	r2, r3, #31
 8001bd4:	4907      	ldr	r1, [pc, #28]	; (8001bf4 <__NVIC_EnableIRQ+0x38>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	095b      	lsrs	r3, r3, #5
 8001bdc:	2001      	movs	r0, #1
 8001bde:	fa00 f202 	lsl.w	r2, r0, r2
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000e100 	.word	0xe000e100

08001bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	6039      	str	r1, [r7, #0]
 8001c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	db0a      	blt.n	8001c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	490c      	ldr	r1, [pc, #48]	; (8001c44 <__NVIC_SetPriority+0x4c>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	0112      	lsls	r2, r2, #4
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c20:	e00a      	b.n	8001c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4908      	ldr	r1, [pc, #32]	; (8001c48 <__NVIC_SetPriority+0x50>)
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	3b04      	subs	r3, #4
 8001c30:	0112      	lsls	r2, r2, #4
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	440b      	add	r3, r1
 8001c36:	761a      	strb	r2, [r3, #24]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000e100 	.word	0xe000e100
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	; 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f1c3 0307 	rsb	r3, r3, #7
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	bf28      	it	cs
 8001c6a:	2304      	movcs	r3, #4
 8001c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3304      	adds	r3, #4
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d902      	bls.n	8001c7c <NVIC_EncodePriority+0x30>
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3b03      	subs	r3, #3
 8001c7a:	e000      	b.n	8001c7e <NVIC_EncodePriority+0x32>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	401a      	ands	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	43d9      	mvns	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	4313      	orrs	r3, r2
         );
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3724      	adds	r7, #36	; 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cc4:	d301      	bcc.n	8001cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e00f      	b.n	8001cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cca:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <SysTick_Config+0x40>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cd8:	f7ff ff8e 	bl	8001bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <SysTick_Config+0x40>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <SysTick_Config+0x40>)
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	e000e010 	.word	0xe000e010

08001cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ff29 	bl	8001b58 <__NVIC_SetPriorityGrouping>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b086      	sub	sp, #24
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d20:	f7ff ff3e 	bl	8001ba0 <__NVIC_GetPriorityGrouping>
 8001d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	6978      	ldr	r0, [r7, #20]
 8001d2c:	f7ff ff8e 	bl	8001c4c <NVIC_EncodePriority>
 8001d30:	4602      	mov	r2, r0
 8001d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff5d 	bl	8001bf8 <__NVIC_SetPriority>
}
 8001d3e:	bf00      	nop
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff31 	bl	8001bbc <__NVIC_EnableIRQ>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff ffa2 	bl	8001cb4 <SysTick_Config>
 8001d70:	4603      	mov	r3, r0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d88:	f7ff feda 	bl	8001b40 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e099      	b.n	8001ecc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001db8:	e00f      	b.n	8001dda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dba:	f7ff fec1 	bl	8001b40 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b05      	cmp	r3, #5
 8001dc6:	d908      	bls.n	8001dda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e078      	b.n	8001ecc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1e8      	bne.n	8001dba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	4b38      	ldr	r3, [pc, #224]	; (8001ed4 <HAL_DMA_Init+0x158>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d107      	bne.n	8001e44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f023 0307 	bic.w	r3, r3, #7
 8001e5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d117      	bne.n	8001e9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00e      	beq.n	8001e9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 fb1b 	bl	80024bc <DMA_CheckFifoParam>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2240      	movs	r2, #64	; 0x40
 8001e90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e016      	b.n	8001ecc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 fad2 	bl	8002450 <DMA_CalcBaseAndBitshift>
 8001eac:	4603      	mov	r3, r0
 8001eae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb4:	223f      	movs	r2, #63	; 0x3f
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	f010803f 	.word	0xf010803f

08001ed8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
 8001ee4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_DMA_Start_IT+0x26>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e040      	b.n	8001f80 <HAL_DMA_Start_IT+0xa8>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d12f      	bne.n	8001f72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2202      	movs	r2, #2
 8001f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	68b9      	ldr	r1, [r7, #8]
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 fa64 	bl	80023f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f30:	223f      	movs	r2, #63	; 0x3f
 8001f32:	409a      	lsls	r2, r3
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0216 	orr.w	r2, r2, #22
 8001f46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0208 	orr.w	r2, r2, #8
 8001f5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0201 	orr.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	e005      	b.n	8001f7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f94:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f96:	f7ff fdd3 	bl	8001b40 <HAL_GetTick>
 8001f9a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d008      	beq.n	8001fba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2280      	movs	r2, #128	; 0x80
 8001fac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e052      	b.n	8002060 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0216 	bic.w	r2, r2, #22
 8001fc8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fd8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d103      	bne.n	8001fea <HAL_DMA_Abort+0x62>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d007      	beq.n	8001ffa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0208 	bic.w	r2, r2, #8
 8001ff8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0201 	bic.w	r2, r2, #1
 8002008:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800200a:	e013      	b.n	8002034 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800200c:	f7ff fd98 	bl	8001b40 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b05      	cmp	r3, #5
 8002018:	d90c      	bls.n	8002034 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2220      	movs	r2, #32
 800201e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2203      	movs	r2, #3
 8002024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e015      	b.n	8002060 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1e4      	bne.n	800200c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002046:	223f      	movs	r2, #63	; 0x3f
 8002048:	409a      	lsls	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d004      	beq.n	8002086 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2280      	movs	r2, #128	; 0x80
 8002080:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e00c      	b.n	80020a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2205      	movs	r2, #5
 800208a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0201 	bic.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020b8:	4b8e      	ldr	r3, [pc, #568]	; (80022f4 <HAL_DMA_IRQHandler+0x248>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a8e      	ldr	r2, [pc, #568]	; (80022f8 <HAL_DMA_IRQHandler+0x24c>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	0a9b      	lsrs	r3, r3, #10
 80020c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d6:	2208      	movs	r2, #8
 80020d8:	409a      	lsls	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d01a      	beq.n	8002118 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d013      	beq.n	8002118 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0204 	bic.w	r2, r2, #4
 80020fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	2208      	movs	r2, #8
 8002106:	409a      	lsls	r2, r3
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002110:	f043 0201 	orr.w	r2, r3, #1
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211c:	2201      	movs	r2, #1
 800211e:	409a      	lsls	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4013      	ands	r3, r2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d012      	beq.n	800214e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00b      	beq.n	800214e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213a:	2201      	movs	r2, #1
 800213c:	409a      	lsls	r2, r3
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002146:	f043 0202 	orr.w	r2, r3, #2
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002152:	2204      	movs	r2, #4
 8002154:	409a      	lsls	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	4013      	ands	r3, r2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d012      	beq.n	8002184 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00b      	beq.n	8002184 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002170:	2204      	movs	r2, #4
 8002172:	409a      	lsls	r2, r3
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217c:	f043 0204 	orr.w	r2, r3, #4
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002188:	2210      	movs	r2, #16
 800218a:	409a      	lsls	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d043      	beq.n	800221c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d03c      	beq.n	800221c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a6:	2210      	movs	r2, #16
 80021a8:	409a      	lsls	r2, r3
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d018      	beq.n	80021ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d108      	bne.n	80021dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d024      	beq.n	800221c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	4798      	blx	r3
 80021da:	e01f      	b.n	800221c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d01b      	beq.n	800221c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	4798      	blx	r3
 80021ec:	e016      	b.n	800221c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d107      	bne.n	800220c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0208 	bic.w	r2, r2, #8
 800220a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002220:	2220      	movs	r2, #32
 8002222:	409a      	lsls	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 808f 	beq.w	800234c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0310 	and.w	r3, r3, #16
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 8087 	beq.w	800234c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002242:	2220      	movs	r2, #32
 8002244:	409a      	lsls	r2, r3
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b05      	cmp	r3, #5
 8002254:	d136      	bne.n	80022c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0216 	bic.w	r2, r2, #22
 8002264:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002274:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	2b00      	cmp	r3, #0
 800227c:	d103      	bne.n	8002286 <HAL_DMA_IRQHandler+0x1da>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002282:	2b00      	cmp	r3, #0
 8002284:	d007      	beq.n	8002296 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0208 	bic.w	r2, r2, #8
 8002294:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229a:	223f      	movs	r2, #63	; 0x3f
 800229c:	409a      	lsls	r2, r3
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d07e      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	4798      	blx	r3
        }
        return;
 80022c2:	e079      	b.n	80023b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d01d      	beq.n	800230e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10d      	bne.n	80022fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d031      	beq.n	800234c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	4798      	blx	r3
 80022f0:	e02c      	b.n	800234c <HAL_DMA_IRQHandler+0x2a0>
 80022f2:	bf00      	nop
 80022f4:	20000008 	.word	0x20000008
 80022f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002300:	2b00      	cmp	r3, #0
 8002302:	d023      	beq.n	800234c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	4798      	blx	r3
 800230c:	e01e      	b.n	800234c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10f      	bne.n	800233c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0210 	bic.w	r2, r2, #16
 800232a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002350:	2b00      	cmp	r3, #0
 8002352:	d032      	beq.n	80023ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d022      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2205      	movs	r2, #5
 8002364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	3301      	adds	r3, #1
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	429a      	cmp	r2, r3
 8002382:	d307      	bcc.n	8002394 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f2      	bne.n	8002378 <HAL_DMA_IRQHandler+0x2cc>
 8002392:	e000      	b.n	8002396 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002394:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	4798      	blx	r3
 80023b6:	e000      	b.n	80023ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80023b8:	bf00      	nop
    }
  }
}
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023ce:	b2db      	uxtb	r3, r3
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
 8002400:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002410:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b40      	cmp	r3, #64	; 0x40
 8002420:	d108      	bne.n	8002434 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002432:	e007      	b.n	8002444 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	60da      	str	r2, [r3, #12]
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	3b10      	subs	r3, #16
 8002460:	4a14      	ldr	r2, [pc, #80]	; (80024b4 <DMA_CalcBaseAndBitshift+0x64>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	091b      	lsrs	r3, r3, #4
 8002468:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800246a:	4a13      	ldr	r2, [pc, #76]	; (80024b8 <DMA_CalcBaseAndBitshift+0x68>)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4413      	add	r3, r2
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b03      	cmp	r3, #3
 800247c:	d909      	bls.n	8002492 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002486:	f023 0303 	bic.w	r3, r3, #3
 800248a:	1d1a      	adds	r2, r3, #4
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	659a      	str	r2, [r3, #88]	; 0x58
 8002490:	e007      	b.n	80024a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800249a:	f023 0303 	bic.w	r3, r3, #3
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	aaaaaaab 	.word	0xaaaaaaab
 80024b8:	0800a950 	.word	0x0800a950

080024bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d11f      	bne.n	8002516 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d856      	bhi.n	800258a <DMA_CheckFifoParam+0xce>
 80024dc:	a201      	add	r2, pc, #4	; (adr r2, 80024e4 <DMA_CheckFifoParam+0x28>)
 80024de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e2:	bf00      	nop
 80024e4:	080024f5 	.word	0x080024f5
 80024e8:	08002507 	.word	0x08002507
 80024ec:	080024f5 	.word	0x080024f5
 80024f0:	0800258b 	.word	0x0800258b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d046      	beq.n	800258e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002504:	e043      	b.n	800258e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800250e:	d140      	bne.n	8002592 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002514:	e03d      	b.n	8002592 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800251e:	d121      	bne.n	8002564 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b03      	cmp	r3, #3
 8002524:	d837      	bhi.n	8002596 <DMA_CheckFifoParam+0xda>
 8002526:	a201      	add	r2, pc, #4	; (adr r2, 800252c <DMA_CheckFifoParam+0x70>)
 8002528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252c:	0800253d 	.word	0x0800253d
 8002530:	08002543 	.word	0x08002543
 8002534:	0800253d 	.word	0x0800253d
 8002538:	08002555 	.word	0x08002555
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
      break;
 8002540:	e030      	b.n	80025a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d025      	beq.n	800259a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002552:	e022      	b.n	800259a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002558:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800255c:	d11f      	bne.n	800259e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002562:	e01c      	b.n	800259e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d903      	bls.n	8002572 <DMA_CheckFifoParam+0xb6>
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2b03      	cmp	r3, #3
 800256e:	d003      	beq.n	8002578 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002570:	e018      	b.n	80025a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	73fb      	strb	r3, [r7, #15]
      break;
 8002576:	e015      	b.n	80025a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00e      	beq.n	80025a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
      break;
 8002588:	e00b      	b.n	80025a2 <DMA_CheckFifoParam+0xe6>
      break;
 800258a:	bf00      	nop
 800258c:	e00a      	b.n	80025a4 <DMA_CheckFifoParam+0xe8>
      break;
 800258e:	bf00      	nop
 8002590:	e008      	b.n	80025a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002592:	bf00      	nop
 8002594:	e006      	b.n	80025a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002596:	bf00      	nop
 8002598:	e004      	b.n	80025a4 <DMA_CheckFifoParam+0xe8>
      break;
 800259a:	bf00      	nop
 800259c:	e002      	b.n	80025a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800259e:	bf00      	nop
 80025a0:	e000      	b.n	80025a4 <DMA_CheckFifoParam+0xe8>
      break;
 80025a2:	bf00      	nop
    }
  } 
  
  return status; 
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop

080025b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b089      	sub	sp, #36	; 0x24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
 80025ce:	e159      	b.n	8002884 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025d0:	2201      	movs	r2, #1
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	4013      	ands	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	f040 8148 	bne.w	800287e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d005      	beq.n	8002606 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002602:	2b02      	cmp	r3, #2
 8002604:	d130      	bne.n	8002668 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	2203      	movs	r2, #3
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800263c:	2201      	movs	r2, #1
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	f003 0201 	and.w	r2, r3, #1
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	2b03      	cmp	r3, #3
 8002672:	d017      	beq.n	80026a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	2203      	movs	r2, #3
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d123      	bne.n	80026f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	08da      	lsrs	r2, r3, #3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3208      	adds	r2, #8
 80026b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	220f      	movs	r2, #15
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	08da      	lsrs	r2, r3, #3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3208      	adds	r2, #8
 80026f2:	69b9      	ldr	r1, [r7, #24]
 80026f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	2203      	movs	r2, #3
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 0203 	and.w	r2, r3, #3
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 80a2 	beq.w	800287e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	4b57      	ldr	r3, [pc, #348]	; (800289c <HAL_GPIO_Init+0x2e8>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	4a56      	ldr	r2, [pc, #344]	; (800289c <HAL_GPIO_Init+0x2e8>)
 8002744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002748:	6453      	str	r3, [r2, #68]	; 0x44
 800274a:	4b54      	ldr	r3, [pc, #336]	; (800289c <HAL_GPIO_Init+0x2e8>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002756:	4a52      	ldr	r2, [pc, #328]	; (80028a0 <HAL_GPIO_Init+0x2ec>)
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	089b      	lsrs	r3, r3, #2
 800275c:	3302      	adds	r3, #2
 800275e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002762:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	220f      	movs	r2, #15
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4013      	ands	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a49      	ldr	r2, [pc, #292]	; (80028a4 <HAL_GPIO_Init+0x2f0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d019      	beq.n	80027b6 <HAL_GPIO_Init+0x202>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a48      	ldr	r2, [pc, #288]	; (80028a8 <HAL_GPIO_Init+0x2f4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d013      	beq.n	80027b2 <HAL_GPIO_Init+0x1fe>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a47      	ldr	r2, [pc, #284]	; (80028ac <HAL_GPIO_Init+0x2f8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00d      	beq.n	80027ae <HAL_GPIO_Init+0x1fa>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a46      	ldr	r2, [pc, #280]	; (80028b0 <HAL_GPIO_Init+0x2fc>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d007      	beq.n	80027aa <HAL_GPIO_Init+0x1f6>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a45      	ldr	r2, [pc, #276]	; (80028b4 <HAL_GPIO_Init+0x300>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d101      	bne.n	80027a6 <HAL_GPIO_Init+0x1f2>
 80027a2:	2304      	movs	r3, #4
 80027a4:	e008      	b.n	80027b8 <HAL_GPIO_Init+0x204>
 80027a6:	2307      	movs	r3, #7
 80027a8:	e006      	b.n	80027b8 <HAL_GPIO_Init+0x204>
 80027aa:	2303      	movs	r3, #3
 80027ac:	e004      	b.n	80027b8 <HAL_GPIO_Init+0x204>
 80027ae:	2302      	movs	r3, #2
 80027b0:	e002      	b.n	80027b8 <HAL_GPIO_Init+0x204>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <HAL_GPIO_Init+0x204>
 80027b6:	2300      	movs	r3, #0
 80027b8:	69fa      	ldr	r2, [r7, #28]
 80027ba:	f002 0203 	and.w	r2, r2, #3
 80027be:	0092      	lsls	r2, r2, #2
 80027c0:	4093      	lsls	r3, r2
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027c8:	4935      	ldr	r1, [pc, #212]	; (80028a0 <HAL_GPIO_Init+0x2ec>)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	089b      	lsrs	r3, r3, #2
 80027ce:	3302      	adds	r3, #2
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027d6:	4b38      	ldr	r3, [pc, #224]	; (80028b8 <HAL_GPIO_Init+0x304>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027fa:	4a2f      	ldr	r2, [pc, #188]	; (80028b8 <HAL_GPIO_Init+0x304>)
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002800:	4b2d      	ldr	r3, [pc, #180]	; (80028b8 <HAL_GPIO_Init+0x304>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002824:	4a24      	ldr	r2, [pc, #144]	; (80028b8 <HAL_GPIO_Init+0x304>)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800282a:	4b23      	ldr	r3, [pc, #140]	; (80028b8 <HAL_GPIO_Init+0x304>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800284e:	4a1a      	ldr	r2, [pc, #104]	; (80028b8 <HAL_GPIO_Init+0x304>)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002854:	4b18      	ldr	r3, [pc, #96]	; (80028b8 <HAL_GPIO_Init+0x304>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002878:	4a0f      	ldr	r2, [pc, #60]	; (80028b8 <HAL_GPIO_Init+0x304>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3301      	adds	r3, #1
 8002882:	61fb      	str	r3, [r7, #28]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	2b0f      	cmp	r3, #15
 8002888:	f67f aea2 	bls.w	80025d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800288c:	bf00      	nop
 800288e:	bf00      	nop
 8002890:	3724      	adds	r7, #36	; 0x24
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40023800 	.word	0x40023800
 80028a0:	40013800 	.word	0x40013800
 80028a4:	40020000 	.word	0x40020000
 80028a8:	40020400 	.word	0x40020400
 80028ac:	40020800 	.word	0x40020800
 80028b0:	40020c00 	.word	0x40020c00
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40013c00 	.word	0x40013c00

080028bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	807b      	strh	r3, [r7, #2]
 80028c8:	4613      	mov	r3, r2
 80028ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028cc:	787b      	ldrb	r3, [r7, #1]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028d8:	e003      	b.n	80028e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028da:	887b      	ldrh	r3, [r7, #2]
 80028dc:	041a      	lsls	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	619a      	str	r2, [r3, #24]
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b085      	sub	sp, #20
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	460b      	mov	r3, r1
 80028f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002900:	887a      	ldrh	r2, [r7, #2]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4013      	ands	r3, r2
 8002906:	041a      	lsls	r2, r3, #16
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	43d9      	mvns	r1, r3
 800290c:	887b      	ldrh	r3, [r7, #2]
 800290e:	400b      	ands	r3, r1
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	619a      	str	r2, [r3, #24]
}
 8002916:	bf00      	nop
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e12b      	b.n	8002b8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7fe fdf8 	bl	8001540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2224      	movs	r2, #36	; 0x24
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002976:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002986:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002988:	f003 fabc 	bl	8005f04 <HAL_RCC_GetPCLK1Freq>
 800298c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	4a81      	ldr	r2, [pc, #516]	; (8002b98 <HAL_I2C_Init+0x274>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d807      	bhi.n	80029a8 <HAL_I2C_Init+0x84>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4a80      	ldr	r2, [pc, #512]	; (8002b9c <HAL_I2C_Init+0x278>)
 800299c:	4293      	cmp	r3, r2
 800299e:	bf94      	ite	ls
 80029a0:	2301      	movls	r3, #1
 80029a2:	2300      	movhi	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	e006      	b.n	80029b6 <HAL_I2C_Init+0x92>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4a7d      	ldr	r2, [pc, #500]	; (8002ba0 <HAL_I2C_Init+0x27c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	bf94      	ite	ls
 80029b0:	2301      	movls	r3, #1
 80029b2:	2300      	movhi	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e0e7      	b.n	8002b8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4a78      	ldr	r2, [pc, #480]	; (8002ba4 <HAL_I2C_Init+0x280>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	0c9b      	lsrs	r3, r3, #18
 80029c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	430a      	orrs	r2, r1
 80029dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4a6a      	ldr	r2, [pc, #424]	; (8002b98 <HAL_I2C_Init+0x274>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d802      	bhi.n	80029f8 <HAL_I2C_Init+0xd4>
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	3301      	adds	r3, #1
 80029f6:	e009      	b.n	8002a0c <HAL_I2C_Init+0xe8>
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029fe:	fb02 f303 	mul.w	r3, r2, r3
 8002a02:	4a69      	ldr	r2, [pc, #420]	; (8002ba8 <HAL_I2C_Init+0x284>)
 8002a04:	fba2 2303 	umull	r2, r3, r2, r3
 8002a08:	099b      	lsrs	r3, r3, #6
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6812      	ldr	r2, [r2, #0]
 8002a10:	430b      	orrs	r3, r1
 8002a12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	495c      	ldr	r1, [pc, #368]	; (8002b98 <HAL_I2C_Init+0x274>)
 8002a28:	428b      	cmp	r3, r1
 8002a2a:	d819      	bhi.n	8002a60 <HAL_I2C_Init+0x13c>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1e59      	subs	r1, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a3a:	1c59      	adds	r1, r3, #1
 8002a3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a40:	400b      	ands	r3, r1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_I2C_Init+0x138>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	1e59      	subs	r1, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a54:	3301      	adds	r3, #1
 8002a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a5a:	e051      	b.n	8002b00 <HAL_I2C_Init+0x1dc>
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	e04f      	b.n	8002b00 <HAL_I2C_Init+0x1dc>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d111      	bne.n	8002a8c <HAL_I2C_Init+0x168>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1e58      	subs	r0, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	440b      	add	r3, r1
 8002a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	bf0c      	ite	eq
 8002a84:	2301      	moveq	r3, #1
 8002a86:	2300      	movne	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	e012      	b.n	8002ab2 <HAL_I2C_Init+0x18e>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1e58      	subs	r0, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6859      	ldr	r1, [r3, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	0099      	lsls	r1, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	bf0c      	ite	eq
 8002aac:	2301      	moveq	r3, #1
 8002aae:	2300      	movne	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_I2C_Init+0x196>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e022      	b.n	8002b00 <HAL_I2C_Init+0x1dc>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10e      	bne.n	8002ae0 <HAL_I2C_Init+0x1bc>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1e58      	subs	r0, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6859      	ldr	r1, [r3, #4]
 8002aca:	460b      	mov	r3, r1
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	440b      	add	r3, r1
 8002ad0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ade:	e00f      	b.n	8002b00 <HAL_I2C_Init+0x1dc>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1e58      	subs	r0, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6859      	ldr	r1, [r3, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	0099      	lsls	r1, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af6:	3301      	adds	r3, #1
 8002af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002afc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	6809      	ldr	r1, [r1, #0]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69da      	ldr	r2, [r3, #28]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6911      	ldr	r1, [r2, #16]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68d2      	ldr	r2, [r2, #12]
 8002b3a:	4311      	orrs	r1, r2
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	430b      	orrs	r3, r1
 8002b42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695a      	ldr	r2, [r3, #20]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	000186a0 	.word	0x000186a0
 8002b9c:	001e847f 	.word	0x001e847f
 8002ba0:	003d08ff 	.word	0x003d08ff
 8002ba4:	431bde83 	.word	0x431bde83
 8002ba8:	10624dd3 	.word	0x10624dd3

08002bac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af02      	add	r7, sp, #8
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	607a      	str	r2, [r7, #4]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	460b      	mov	r3, r1
 8002bba:	817b      	strh	r3, [r7, #10]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bc0:	f7fe ffbe 	bl	8001b40 <HAL_GetTick>
 8002bc4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b20      	cmp	r3, #32
 8002bd0:	f040 80e0 	bne.w	8002d94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	2319      	movs	r3, #25
 8002bda:	2201      	movs	r2, #1
 8002bdc:	4970      	ldr	r1, [pc, #448]	; (8002da0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f002 faf6 	bl	80051d0 <I2C_WaitOnFlagUntilTimeout>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002bea:	2302      	movs	r3, #2
 8002bec:	e0d3      	b.n	8002d96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_I2C_Master_Transmit+0x50>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e0cc      	b.n	8002d96 <HAL_I2C_Master_Transmit+0x1ea>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d007      	beq.n	8002c22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0201 	orr.w	r2, r2, #1
 8002c20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2221      	movs	r2, #33	; 0x21
 8002c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2210      	movs	r2, #16
 8002c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	893a      	ldrh	r2, [r7, #8]
 8002c52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4a50      	ldr	r2, [pc, #320]	; (8002da4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c64:	8979      	ldrh	r1, [r7, #10]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	6a3a      	ldr	r2, [r7, #32]
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f001 ffa6 	bl	8004bbc <I2C_MasterRequestWrite>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e08d      	b.n	8002d96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c90:	e066      	b.n	8002d60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	6a39      	ldr	r1, [r7, #32]
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f002 fb70 	bl	800537c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00d      	beq.n	8002cbe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d107      	bne.n	8002cba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e06b      	b.n	8002d96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	781a      	ldrb	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d11b      	bne.n	8002d34 <HAL_I2C_Master_Transmit+0x188>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d017      	beq.n	8002d34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	781a      	ldrb	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	6a39      	ldr	r1, [r7, #32]
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f002 fb60 	bl	80053fe <I2C_WaitOnBTFFlagUntilTimeout>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00d      	beq.n	8002d60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d107      	bne.n	8002d5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e01a      	b.n	8002d96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d194      	bne.n	8002c92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	e000      	b.n	8002d96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d94:	2302      	movs	r3, #2
  }
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	00100002 	.word	0x00100002
 8002da4:	ffff0000 	.word	0xffff0000

08002da8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08c      	sub	sp, #48	; 0x30
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	461a      	mov	r2, r3
 8002db4:	460b      	mov	r3, r1
 8002db6:	817b      	strh	r3, [r7, #10]
 8002db8:	4613      	mov	r3, r2
 8002dba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dbc:	f7fe fec0 	bl	8001b40 <HAL_GetTick>
 8002dc0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b20      	cmp	r3, #32
 8002dcc:	f040 820b 	bne.w	80031e6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	2319      	movs	r3, #25
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	497c      	ldr	r1, [pc, #496]	; (8002fcc <HAL_I2C_Master_Receive+0x224>)
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f002 f9f8 	bl	80051d0 <I2C_WaitOnFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002de6:	2302      	movs	r3, #2
 8002de8:	e1fe      	b.n	80031e8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_I2C_Master_Receive+0x50>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e1f7      	b.n	80031e8 <HAL_I2C_Master_Receive+0x440>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d007      	beq.n	8002e1e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0201 	orr.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2222      	movs	r2, #34	; 0x22
 8002e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2210      	movs	r2, #16
 8002e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	893a      	ldrh	r2, [r7, #8]
 8002e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4a5c      	ldr	r2, [pc, #368]	; (8002fd0 <HAL_I2C_Master_Receive+0x228>)
 8002e5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e60:	8979      	ldrh	r1, [r7, #10]
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f001 ff2a 	bl	8004cc0 <I2C_MasterRequestRead>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e1b8      	b.n	80031e8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d113      	bne.n	8002ea6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7e:	2300      	movs	r3, #0
 8002e80:	623b      	str	r3, [r7, #32]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	623b      	str	r3, [r7, #32]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	623b      	str	r3, [r7, #32]
 8002e92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	e18c      	b.n	80031c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d11b      	bne.n	8002ee6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ebc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	61fb      	str	r3, [r7, #28]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	61fb      	str	r3, [r7, #28]
 8002ed2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	e16c      	b.n	80031c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d11b      	bne.n	8002f26 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002efc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61bb      	str	r3, [r7, #24]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	61bb      	str	r3, [r7, #24]
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	e14c      	b.n	80031c0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f4c:	e138      	b.n	80031c0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	f200 80f1 	bhi.w	800313a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d123      	bne.n	8002fa8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f002 fabd 	bl	80054e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e139      	b.n	80031e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fa6:	e10b      	b.n	80031c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d14e      	bne.n	800304e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	4906      	ldr	r1, [pc, #24]	; (8002fd4 <HAL_I2C_Master_Receive+0x22c>)
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f002 f908 	bl	80051d0 <I2C_WaitOnFlagUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d008      	beq.n	8002fd8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e10e      	b.n	80031e8 <HAL_I2C_Master_Receive+0x440>
 8002fca:	bf00      	nop
 8002fcc:	00100002 	.word	0x00100002
 8002fd0:	ffff0000 	.word	0xffff0000
 8002fd4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003010:	b29b      	uxth	r3, r3
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800304c:	e0b8      	b.n	80031c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003054:	2200      	movs	r2, #0
 8003056:	4966      	ldr	r1, [pc, #408]	; (80031f0 <HAL_I2C_Master_Receive+0x448>)
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f002 f8b9 	bl	80051d0 <I2C_WaitOnFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0bf      	b.n	80031e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003076:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b0:	2200      	movs	r2, #0
 80030b2:	494f      	ldr	r1, [pc, #316]	; (80031f0 <HAL_I2C_Master_Receive+0x448>)
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f002 f88b 	bl	80051d0 <I2C_WaitOnFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e091      	b.n	80031e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691a      	ldr	r2, [r3, #16]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003138:	e042      	b.n	80031c0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800313a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f002 f9d0 	bl	80054e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e04c      	b.n	80031e8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b04      	cmp	r3, #4
 800318c:	d118      	bne.n	80031c0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f47f aec2 	bne.w	8002f4e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e000      	b.n	80031e8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80031e6:	2302      	movs	r3, #2
  }
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3728      	adds	r7, #40	; 0x28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	00010004 	.word	0x00010004

080031f4 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	607a      	str	r2, [r7, #4]
 80031fe:	461a      	mov	r2, r3
 8003200:	460b      	mov	r3, r1
 8003202:	817b      	strh	r3, [r7, #10]
 8003204:	4613      	mov	r3, r2
 8003206:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b20      	cmp	r3, #32
 8003216:	f040 810d 	bne.w	8003434 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800321a:	4b89      	ldr	r3, [pc, #548]	; (8003440 <HAL_I2C_Master_Receive_DMA+0x24c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	08db      	lsrs	r3, r3, #3
 8003220:	4a88      	ldr	r2, [pc, #544]	; (8003444 <HAL_I2C_Master_Receive_DMA+0x250>)
 8003222:	fba2 2303 	umull	r2, r3, r2, r3
 8003226:	0a1a      	lsrs	r2, r3, #8
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	009a      	lsls	r2, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	3b01      	subs	r3, #1
 8003238:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d116      	bne.n	800326e <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f043 0220 	orr.w	r2, r3, #32
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e0e3      	b.n	8003436 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b02      	cmp	r3, #2
 800327a:	d0db      	beq.n	8003234 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_I2C_Master_Receive_DMA+0x96>
 8003286:	2302      	movs	r3, #2
 8003288:	e0d5      	b.n	8003436 <HAL_I2C_Master_Receive_DMA+0x242>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b01      	cmp	r3, #1
 800329e:	d007      	beq.n	80032b0 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2222      	movs	r2, #34	; 0x22
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2210      	movs	r2, #16
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	893a      	ldrh	r2, [r7, #8]
 80032e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4a56      	ldr	r2, [pc, #344]	; (8003448 <HAL_I2C_Master_Receive_DMA+0x254>)
 80032f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80032f2:	897a      	ldrh	r2, [r7, #10]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d07b      	beq.n	80033f8 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003304:	2b00      	cmp	r3, #0
 8003306:	d02a      	beq.n	800335e <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	4a4f      	ldr	r2, [pc, #316]	; (800344c <HAL_I2C_Master_Receive_DMA+0x258>)
 800330e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	4a4e      	ldr	r2, [pc, #312]	; (8003450 <HAL_I2C_Master_Receive_DMA+0x25c>)
 8003316:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	2200      	movs	r2, #0
 800331e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	2200      	movs	r2, #0
 8003326:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332c:	2200      	movs	r2, #0
 800332e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003334:	2200      	movs	r2, #0
 8003336:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3310      	adds	r3, #16
 8003342:	4619      	mov	r1, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	461a      	mov	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334e:	f7fe fdc3 	bl	8001ed8 <HAL_DMA_Start_IT>
 8003352:	4603      	mov	r3, r0
 8003354:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003356:	7dfb      	ldrb	r3, [r7, #23]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d139      	bne.n	80033d0 <HAL_I2C_Master_Receive_DMA+0x1dc>
 800335c:	e013      	b.n	8003386 <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2220      	movs	r2, #32
 8003362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e057      	b.n	8003436 <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003394:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033a4:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80033bc:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	e02f      	b.n	8003430 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	f043 0210 	orr.w	r2, r3, #16
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e01e      	b.n	8003436 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800340e:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800341e:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800342e:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	e000      	b.n	8003436 <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8003434:	2302      	movs	r3, #2
  }
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20000008 	.word	0x20000008
 8003444:	14f8b589 	.word	0x14f8b589
 8003448:	ffff0000 	.word	0xffff0000
 800344c:	08004e5d 	.word	0x08004e5d
 8003450:	08005007 	.word	0x08005007

08003454 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003474:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800347c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800347e:	7bfb      	ldrb	r3, [r7, #15]
 8003480:	2b10      	cmp	r3, #16
 8003482:	d003      	beq.n	800348c <HAL_I2C_EV_IRQHandler+0x38>
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	2b40      	cmp	r3, #64	; 0x40
 8003488:	f040 80b1 	bne.w	80035ee <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10d      	bne.n	80034c2 <HAL_I2C_EV_IRQHandler+0x6e>
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80034ac:	d003      	beq.n	80034b6 <HAL_I2C_EV_IRQHandler+0x62>
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80034b4:	d101      	bne.n	80034ba <HAL_I2C_EV_IRQHandler+0x66>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <HAL_I2C_EV_IRQHandler+0x68>
 80034ba:	2300      	movs	r3, #0
 80034bc:	2b01      	cmp	r3, #1
 80034be:	f000 8114 	beq.w	80036ea <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00b      	beq.n	80034e4 <HAL_I2C_EV_IRQHandler+0x90>
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d006      	beq.n	80034e4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f002 f889 	bl	80055ee <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fd54 	bl	8003f8a <I2C_Master_SB>
 80034e2:	e083      	b.n	80035ec <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d008      	beq.n	8003500 <HAL_I2C_EV_IRQHandler+0xac>
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fdcc 	bl	8004096 <I2C_Master_ADD10>
 80034fe:	e075      	b.n	80035ec <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d008      	beq.n	800351c <HAL_I2C_EV_IRQHandler+0xc8>
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fde8 	bl	80040ea <I2C_Master_ADDR>
 800351a:	e067      	b.n	80035ec <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b00      	cmp	r3, #0
 8003524:	d036      	beq.n	8003594 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003534:	f000 80db 	beq.w	80036ee <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00d      	beq.n	800355e <HAL_I2C_EV_IRQHandler+0x10a>
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003548:	2b00      	cmp	r3, #0
 800354a:	d008      	beq.n	800355e <HAL_I2C_EV_IRQHandler+0x10a>
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	d103      	bne.n	800355e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f9cc 	bl	80038f4 <I2C_MasterTransmit_TXE>
 800355c:	e046      	b.n	80035ec <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 80c2 	beq.w	80036ee <HAL_I2C_EV_IRQHandler+0x29a>
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80bc 	beq.w	80036ee <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003576:	7bbb      	ldrb	r3, [r7, #14]
 8003578:	2b21      	cmp	r3, #33	; 0x21
 800357a:	d103      	bne.n	8003584 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fa55 	bl	8003a2c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003582:	e0b4      	b.n	80036ee <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003584:	7bfb      	ldrb	r3, [r7, #15]
 8003586:	2b40      	cmp	r3, #64	; 0x40
 8003588:	f040 80b1 	bne.w	80036ee <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fac3 	bl	8003b18 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003592:	e0ac      	b.n	80036ee <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800359e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035a2:	f000 80a4 	beq.w	80036ee <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00d      	beq.n	80035cc <HAL_I2C_EV_IRQHandler+0x178>
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d008      	beq.n	80035cc <HAL_I2C_EV_IRQHandler+0x178>
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d103      	bne.n	80035cc <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 fb3b 	bl	8003c40 <I2C_MasterReceive_RXNE>
 80035ca:	e00f      	b.n	80035ec <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 808b 	beq.w	80036ee <HAL_I2C_EV_IRQHandler+0x29a>
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 8085 	beq.w	80036ee <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 fbe6 	bl	8003db6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035ea:	e080      	b.n	80036ee <HAL_I2C_EV_IRQHandler+0x29a>
 80035ec:	e07f      	b.n	80036ee <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d004      	beq.n	8003600 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	61fb      	str	r3, [r7, #28]
 80035fe:	e007      	b.n	8003610 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d011      	beq.n	800363e <HAL_I2C_EV_IRQHandler+0x1ea>
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00c      	beq.n	800363e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003634:	69b9      	ldr	r1, [r7, #24]
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 ffa6 	bl	8004588 <I2C_Slave_ADDR>
 800363c:	e05a      	b.n	80036f4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <HAL_I2C_EV_IRQHandler+0x206>
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 ffe0 	bl	8004618 <I2C_Slave_STOPF>
 8003658:	e04c      	b.n	80036f4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800365a:	7bbb      	ldrb	r3, [r7, #14]
 800365c:	2b21      	cmp	r3, #33	; 0x21
 800365e:	d002      	beq.n	8003666 <HAL_I2C_EV_IRQHandler+0x212>
 8003660:	7bbb      	ldrb	r3, [r7, #14]
 8003662:	2b29      	cmp	r3, #41	; 0x29
 8003664:	d120      	bne.n	80036a8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00d      	beq.n	800368c <HAL_I2C_EV_IRQHandler+0x238>
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003676:	2b00      	cmp	r3, #0
 8003678:	d008      	beq.n	800368c <HAL_I2C_EV_IRQHandler+0x238>
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d103      	bne.n	800368c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 fec1 	bl	800440c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800368a:	e032      	b.n	80036f2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	2b00      	cmp	r3, #0
 8003694:	d02d      	beq.n	80036f2 <HAL_I2C_EV_IRQHandler+0x29e>
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800369c:	2b00      	cmp	r3, #0
 800369e:	d028      	beq.n	80036f2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fef0 	bl	8004486 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036a6:	e024      	b.n	80036f2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00d      	beq.n	80036ce <HAL_I2C_EV_IRQHandler+0x27a>
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_I2C_EV_IRQHandler+0x27a>
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d103      	bne.n	80036ce <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fefe 	bl	80044c8 <I2C_SlaveReceive_RXNE>
 80036cc:	e012      	b.n	80036f4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00d      	beq.n	80036f4 <HAL_I2C_EV_IRQHandler+0x2a0>
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d008      	beq.n	80036f4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 ff2e 	bl	8004544 <I2C_SlaveReceive_BTF>
 80036e8:	e004      	b.n	80036f4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80036ea:	bf00      	nop
 80036ec:	e002      	b.n	80036f4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ee:	bf00      	nop
 80036f0:	e000      	b.n	80036f4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036f2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80036f4:	3720      	adds	r7, #32
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b08a      	sub	sp, #40	; 0x28
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003712:	2300      	movs	r3, #0
 8003714:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800371c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00d      	beq.n	8003744 <HAL_I2C_ER_IRQHandler+0x4a>
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372e:	2b00      	cmp	r3, #0
 8003730:	d008      	beq.n	8003744 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003742:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00d      	beq.n	800376a <HAL_I2C_ER_IRQHandler+0x70>
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	f043 0302 	orr.w	r3, r3, #2
 800375e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003768:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003770:	2b00      	cmp	r3, #0
 8003772:	d03e      	beq.n	80037f2 <HAL_I2C_ER_IRQHandler+0xf8>
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d039      	beq.n	80037f2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800377e:	7efb      	ldrb	r3, [r7, #27]
 8003780:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003786:	b29b      	uxth	r3, r3
 8003788:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003790:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003798:	7ebb      	ldrb	r3, [r7, #26]
 800379a:	2b20      	cmp	r3, #32
 800379c:	d112      	bne.n	80037c4 <HAL_I2C_ER_IRQHandler+0xca>
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10f      	bne.n	80037c4 <HAL_I2C_ER_IRQHandler+0xca>
 80037a4:	7cfb      	ldrb	r3, [r7, #19]
 80037a6:	2b21      	cmp	r3, #33	; 0x21
 80037a8:	d008      	beq.n	80037bc <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80037aa:	7cfb      	ldrb	r3, [r7, #19]
 80037ac:	2b29      	cmp	r3, #41	; 0x29
 80037ae:	d005      	beq.n	80037bc <HAL_I2C_ER_IRQHandler+0xc2>
 80037b0:	7cfb      	ldrb	r3, [r7, #19]
 80037b2:	2b28      	cmp	r3, #40	; 0x28
 80037b4:	d106      	bne.n	80037c4 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2b21      	cmp	r3, #33	; 0x21
 80037ba:	d103      	bne.n	80037c4 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f001 f85b 	bl	8004878 <I2C_Slave_AF>
 80037c2:	e016      	b.n	80037f2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037cc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	f043 0304 	orr.w	r3, r3, #4
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80037d6:	7efb      	ldrb	r3, [r7, #27]
 80037d8:	2b10      	cmp	r3, #16
 80037da:	d002      	beq.n	80037e2 <HAL_I2C_ER_IRQHandler+0xe8>
 80037dc:	7efb      	ldrb	r3, [r7, #27]
 80037de:	2b40      	cmp	r3, #64	; 0x40
 80037e0:	d107      	bne.n	80037f2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00d      	beq.n	8003818 <HAL_I2C_ER_IRQHandler+0x11e>
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003802:	2b00      	cmp	r3, #0
 8003804:	d008      	beq.n	8003818 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	f043 0308 	orr.w	r3, r3, #8
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003816:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	2b00      	cmp	r3, #0
 800381c:	d008      	beq.n	8003830 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f001 f894 	bl	8004958 <I2C_ITError>
  }
}
 8003830:	bf00      	nop
 8003832:	3728      	adds	r7, #40	; 0x28
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	70fb      	strb	r3, [r7, #3]
 8003880:	4613      	mov	r3, r2
 8003882:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003902:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800390a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003916:	2b00      	cmp	r3, #0
 8003918:	d150      	bne.n	80039bc <I2C_MasterTransmit_TXE+0xc8>
 800391a:	7bfb      	ldrb	r3, [r7, #15]
 800391c:	2b21      	cmp	r3, #33	; 0x21
 800391e:	d14d      	bne.n	80039bc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2b08      	cmp	r3, #8
 8003924:	d01d      	beq.n	8003962 <I2C_MasterTransmit_TXE+0x6e>
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b20      	cmp	r3, #32
 800392a:	d01a      	beq.n	8003962 <I2C_MasterTransmit_TXE+0x6e>
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003932:	d016      	beq.n	8003962 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003942:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2211      	movs	r2, #17
 8003948:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff ff6c 	bl	8003838 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003960:	e060      	b.n	8003a24 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003970:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003980:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b40      	cmp	r3, #64	; 0x40
 800399a:	d107      	bne.n	80039ac <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7ff ff7d 	bl	80038a4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039aa:	e03b      	b.n	8003a24 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff ff3f 	bl	8003838 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039ba:	e033      	b.n	8003a24 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	2b21      	cmp	r3, #33	; 0x21
 80039c0:	d005      	beq.n	80039ce <I2C_MasterTransmit_TXE+0xda>
 80039c2:	7bbb      	ldrb	r3, [r7, #14]
 80039c4:	2b40      	cmp	r3, #64	; 0x40
 80039c6:	d12d      	bne.n	8003a24 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	2b22      	cmp	r3, #34	; 0x22
 80039cc:	d12a      	bne.n	8003a24 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d108      	bne.n	80039ea <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80039e8:	e01c      	b.n	8003a24 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b40      	cmp	r3, #64	; 0x40
 80039f4:	d103      	bne.n	80039fe <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f88e 	bl	8003b18 <I2C_MemoryTransmit_TXE_BTF>
}
 80039fc:	e012      	b.n	8003a24 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	781a      	ldrb	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a22:	e7ff      	b.n	8003a24 <I2C_MasterTransmit_TXE+0x130>
 8003a24:	bf00      	nop
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b21      	cmp	r3, #33	; 0x21
 8003a44:	d164      	bne.n	8003b10 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d012      	beq.n	8003a76 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	781a      	ldrb	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	1c5a      	adds	r2, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003a74:	e04c      	b.n	8003b10 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d01d      	beq.n	8003ab8 <I2C_MasterTransmit_BTF+0x8c>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b20      	cmp	r3, #32
 8003a80:	d01a      	beq.n	8003ab8 <I2C_MasterTransmit_BTF+0x8c>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a88:	d016      	beq.n	8003ab8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a98:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2211      	movs	r2, #17
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7ff fec1 	bl	8003838 <HAL_I2C_MasterTxCpltCallback>
}
 8003ab6:	e02b      	b.n	8003b10 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ac6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b40      	cmp	r3, #64	; 0x40
 8003af0:	d107      	bne.n	8003b02 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff fed2 	bl	80038a4 <HAL_I2C_MemTxCpltCallback>
}
 8003b00:	e006      	b.n	8003b10 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff fe94 	bl	8003838 <HAL_I2C_MasterTxCpltCallback>
}
 8003b10:	bf00      	nop
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b26:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d11d      	bne.n	8003b6c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d10b      	bne.n	8003b50 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b48:	1c9a      	adds	r2, r3, #2
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003b4e:	e073      	b.n	8003c38 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	121b      	asrs	r3, r3, #8
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b6a:	e065      	b.n	8003c38 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d10b      	bne.n	8003b8c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b8a:	e055      	b.n	8003c38 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d151      	bne.n	8003c38 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	2b22      	cmp	r3, #34	; 0x22
 8003b98:	d10d      	bne.n	8003bb6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ba8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003bb4:	e040      	b.n	8003c38 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d015      	beq.n	8003bec <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
 8003bc2:	2b21      	cmp	r3, #33	; 0x21
 8003bc4:	d112      	bne.n	8003bec <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	781a      	ldrb	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003bea:	e025      	b.n	8003c38 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d120      	bne.n	8003c38 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
 8003bf8:	2b21      	cmp	r3, #33	; 0x21
 8003bfa:	d11d      	bne.n	8003c38 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c0a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c1a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff fe36 	bl	80038a4 <HAL_I2C_MemTxCpltCallback>
}
 8003c38:	bf00      	nop
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b22      	cmp	r3, #34	; 0x22
 8003c52:	f040 80ac 	bne.w	8003dae <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d921      	bls.n	8003ca8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691a      	ldr	r2, [r3, #16]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	f040 808c 	bne.w	8003dae <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003ca6:	e082      	b.n	8003dae <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d075      	beq.n	8003d9c <I2C_MasterReceive_RXNE+0x15c>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d002      	beq.n	8003cbc <I2C_MasterReceive_RXNE+0x7c>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d16f      	bne.n	8003d9c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f001 fbdf 	bl	8005480 <I2C_WaitOnSTOPRequestThroughIT>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d142      	bne.n	8003d4e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ce6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b40      	cmp	r3, #64	; 0x40
 8003d20:	d10a      	bne.n	8003d38 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff fdc1 	bl	80038b8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d36:	e03a      	b.n	8003dae <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2212      	movs	r2, #18
 8003d44:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7fd fb68 	bl	800141c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d4c:	e02f      	b.n	8003dae <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d5c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff fd99 	bl	80038cc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d9a:	e008      	b.n	8003dae <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003daa:	605a      	str	r2, [r3, #4]
}
 8003dac:	e7ff      	b.n	8003dae <I2C_MasterReceive_RXNE+0x16e>
 8003dae:	bf00      	nop
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d11b      	bne.n	8003e06 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ddc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003e04:	e0bd      	b.n	8003f82 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d129      	bne.n	8003e64 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e1e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d00a      	beq.n	8003e3c <I2C_MasterReceive_BTF+0x86>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d007      	beq.n	8003e3c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e3a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003e62:	e08e      	b.n	8003f82 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d176      	bne.n	8003f5c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d002      	beq.n	8003e7a <I2C_MasterReceive_BTF+0xc4>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b10      	cmp	r3, #16
 8003e78:	d108      	bne.n	8003e8c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	e019      	b.n	8003ec0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d002      	beq.n	8003e98 <I2C_MasterReceive_BTF+0xe2>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d108      	bne.n	8003eaa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	e00a      	b.n	8003ec0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b10      	cmp	r3, #16
 8003eae:	d007      	beq.n	8003ec0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ebe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f1a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	d10a      	bne.n	8003f46 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff fcba 	bl	80038b8 <HAL_I2C_MemRxCpltCallback>
}
 8003f44:	e01d      	b.n	8003f82 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2212      	movs	r2, #18
 8003f52:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7fd fa61 	bl	800141c <HAL_I2C_MasterRxCpltCallback>
}
 8003f5a:	e012      	b.n	8003f82 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691a      	ldr	r2, [r3, #16]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f82:	bf00      	nop
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b40      	cmp	r3, #64	; 0x40
 8003f9c:	d117      	bne.n	8003fce <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d109      	bne.n	8003fba <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	461a      	mov	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fb6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003fb8:	e067      	b.n	800408a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	611a      	str	r2, [r3, #16]
}
 8003fcc:	e05d      	b.n	800408a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fd6:	d133      	bne.n	8004040 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b21      	cmp	r3, #33	; 0x21
 8003fe2:	d109      	bne.n	8003ff8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	461a      	mov	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ff4:	611a      	str	r2, [r3, #16]
 8003ff6:	e008      	b.n	800400a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	b2da      	uxtb	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400e:	2b00      	cmp	r3, #0
 8004010:	d004      	beq.n	800401c <I2C_Master_SB+0x92>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d108      	bne.n	800402e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004020:	2b00      	cmp	r3, #0
 8004022:	d032      	beq.n	800408a <I2C_Master_SB+0x100>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402a:	2b00      	cmp	r3, #0
 800402c:	d02d      	beq.n	800408a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800403c:	605a      	str	r2, [r3, #4]
}
 800403e:	e024      	b.n	800408a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10e      	bne.n	8004066 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404c:	b29b      	uxth	r3, r3
 800404e:	11db      	asrs	r3, r3, #7
 8004050:	b2db      	uxtb	r3, r3
 8004052:	f003 0306 	and.w	r3, r3, #6
 8004056:	b2db      	uxtb	r3, r3
 8004058:	f063 030f 	orn	r3, r3, #15
 800405c:	b2da      	uxtb	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	611a      	str	r2, [r3, #16]
}
 8004064:	e011      	b.n	800408a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406a:	2b01      	cmp	r3, #1
 800406c:	d10d      	bne.n	800408a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004072:	b29b      	uxth	r3, r3
 8004074:	11db      	asrs	r3, r3, #7
 8004076:	b2db      	uxtb	r3, r3
 8004078:	f003 0306 	and.w	r3, r3, #6
 800407c:	b2db      	uxtb	r3, r3
 800407e:	f063 030e 	orn	r3, r3, #14
 8004082:	b2da      	uxtb	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	611a      	str	r2, [r3, #16]
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d004      	beq.n	80040bc <I2C_Master_ADD10+0x26>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d108      	bne.n	80040ce <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00c      	beq.n	80040de <I2C_Master_ADD10+0x48>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d007      	beq.n	80040de <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040dc:	605a      	str	r2, [r3, #4]
  }
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b091      	sub	sp, #68	; 0x44
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b22      	cmp	r3, #34	; 0x22
 8004112:	f040 8169 	bne.w	80043e8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10f      	bne.n	800413e <I2C_Master_ADDR+0x54>
 800411e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004122:	2b40      	cmp	r3, #64	; 0x40
 8004124:	d10b      	bne.n	800413e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004126:	2300      	movs	r3, #0
 8004128:	633b      	str	r3, [r7, #48]	; 0x30
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	633b      	str	r3, [r7, #48]	; 0x30
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	633b      	str	r3, [r7, #48]	; 0x30
 800413a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413c:	e160      	b.n	8004400 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004142:	2b00      	cmp	r3, #0
 8004144:	d11d      	bne.n	8004182 <I2C_Master_ADDR+0x98>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800414e:	d118      	bne.n	8004182 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004150:	2300      	movs	r3, #0
 8004152:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004164:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004174:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	651a      	str	r2, [r3, #80]	; 0x50
 8004180:	e13e      	b.n	8004400 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d113      	bne.n	80041b4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800418c:	2300      	movs	r3, #0
 800418e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	62bb      	str	r3, [r7, #40]	; 0x28
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	62bb      	str	r3, [r7, #40]	; 0x28
 80041a0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	e115      	b.n	80043e0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	f040 808a 	bne.w	80042d4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80041c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041c6:	d137      	bne.n	8004238 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041e6:	d113      	bne.n	8004210 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f8:	2300      	movs	r3, #0
 80041fa:	627b      	str	r3, [r7, #36]	; 0x24
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	627b      	str	r3, [r7, #36]	; 0x24
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	e0e7      	b.n	80043e0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004210:	2300      	movs	r3, #0
 8004212:	623b      	str	r3, [r7, #32]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	623b      	str	r3, [r7, #32]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	623b      	str	r3, [r7, #32]
 8004224:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	e0d3      	b.n	80043e0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423a:	2b08      	cmp	r3, #8
 800423c:	d02e      	beq.n	800429c <I2C_Master_ADDR+0x1b2>
 800423e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004240:	2b20      	cmp	r3, #32
 8004242:	d02b      	beq.n	800429c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004246:	2b12      	cmp	r3, #18
 8004248:	d102      	bne.n	8004250 <I2C_Master_ADDR+0x166>
 800424a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424c:	2b01      	cmp	r3, #1
 800424e:	d125      	bne.n	800429c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004252:	2b04      	cmp	r3, #4
 8004254:	d00e      	beq.n	8004274 <I2C_Master_ADDR+0x18a>
 8004256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004258:	2b02      	cmp	r3, #2
 800425a:	d00b      	beq.n	8004274 <I2C_Master_ADDR+0x18a>
 800425c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425e:	2b10      	cmp	r3, #16
 8004260:	d008      	beq.n	8004274 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	e007      	b.n	8004284 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004282:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004284:	2300      	movs	r3, #0
 8004286:	61fb      	str	r3, [r7, #28]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	61fb      	str	r3, [r7, #28]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	61fb      	str	r3, [r7, #28]
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	e0a1      	b.n	80043e0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042aa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ac:	2300      	movs	r3, #0
 80042ae:	61bb      	str	r3, [r7, #24]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	61bb      	str	r3, [r7, #24]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	61bb      	str	r3, [r7, #24]
 80042c0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	e085      	b.n	80043e0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d14d      	bne.n	800437a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80042de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d016      	beq.n	8004312 <I2C_Master_ADDR+0x228>
 80042e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d013      	beq.n	8004312 <I2C_Master_ADDR+0x228>
 80042ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ec:	2b10      	cmp	r3, #16
 80042ee:	d010      	beq.n	8004312 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042fe:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	e007      	b.n	8004322 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004320:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800432c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004330:	d117      	bne.n	8004362 <I2C_Master_ADDR+0x278>
 8004332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004334:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004338:	d00b      	beq.n	8004352 <I2C_Master_ADDR+0x268>
 800433a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433c:	2b01      	cmp	r3, #1
 800433e:	d008      	beq.n	8004352 <I2C_Master_ADDR+0x268>
 8004340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004342:	2b08      	cmp	r3, #8
 8004344:	d005      	beq.n	8004352 <I2C_Master_ADDR+0x268>
 8004346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004348:	2b10      	cmp	r3, #16
 800434a:	d002      	beq.n	8004352 <I2C_Master_ADDR+0x268>
 800434c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434e:	2b20      	cmp	r3, #32
 8004350:	d107      	bne.n	8004362 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004360:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	e032      	b.n	80043e0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004388:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004398:	d117      	bne.n	80043ca <I2C_Master_ADDR+0x2e0>
 800439a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043a0:	d00b      	beq.n	80043ba <I2C_Master_ADDR+0x2d0>
 80043a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d008      	beq.n	80043ba <I2C_Master_ADDR+0x2d0>
 80043a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043aa:	2b08      	cmp	r3, #8
 80043ac:	d005      	beq.n	80043ba <I2C_Master_ADDR+0x2d0>
 80043ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b0:	2b10      	cmp	r3, #16
 80043b2:	d002      	beq.n	80043ba <I2C_Master_ADDR+0x2d0>
 80043b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	d107      	bne.n	80043ca <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043c8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ca:	2300      	movs	r3, #0
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80043e6:	e00b      	b.n	8004400 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
}
 80043fe:	e7ff      	b.n	8004400 <I2C_Master_ADDR+0x316>
 8004400:	bf00      	nop
 8004402:	3744      	adds	r7, #68	; 0x44
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d02b      	beq.n	800447e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	781a      	ldrb	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29a      	uxth	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444e:	b29b      	uxth	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d114      	bne.n	800447e <I2C_SlaveTransmit_TXE+0x72>
 8004454:	7bfb      	ldrb	r3, [r7, #15]
 8004456:	2b29      	cmp	r3, #41	; 0x29
 8004458:	d111      	bne.n	800447e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004468:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2221      	movs	r2, #33	; 0x21
 800446e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2228      	movs	r2, #40	; 0x28
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff f9e7 	bl	800384c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800447e:	bf00      	nop
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d011      	beq.n	80044bc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	781a      	ldrb	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d02c      	beq.n	800453c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d114      	bne.n	800453c <I2C_SlaveReceive_RXNE+0x74>
 8004512:	7bfb      	ldrb	r3, [r7, #15]
 8004514:	2b2a      	cmp	r3, #42	; 0x2a
 8004516:	d111      	bne.n	800453c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004526:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2222      	movs	r2, #34	; 0x22
 800452c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2228      	movs	r2, #40	; 0x28
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7ff f992 	bl	8003860 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004550:	b29b      	uxth	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d012      	beq.n	800457c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004572:	b29b      	uxth	r3, r3
 8004574:	3b01      	subs	r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004592:	2300      	movs	r3, #0
 8004594:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459c:	b2db      	uxtb	r3, r3
 800459e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045a2:	2b28      	cmp	r3, #40	; 0x28
 80045a4:	d125      	bne.n	80045f2 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80045c0:	2301      	movs	r3, #1
 80045c2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d103      	bne.n	80045d6 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	81bb      	strh	r3, [r7, #12]
 80045d4:	e002      	b.n	80045dc <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80045e4:	89ba      	ldrh	r2, [r7, #12]
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
 80045e8:	4619      	mov	r1, r3
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff f942 	bl	8003874 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80045f0:	e00e      	b.n	8004610 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f2:	2300      	movs	r3, #0
 80045f4:	60bb      	str	r3, [r7, #8]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	60bb      	str	r3, [r7, #8]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004610:	bf00      	nop
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004626:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004636:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004638:	2300      	movs	r3, #0
 800463a:	60bb      	str	r3, [r7, #8]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	60bb      	str	r3, [r7, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004664:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004674:	d172      	bne.n	800475c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004676:	7bfb      	ldrb	r3, [r7, #15]
 8004678:	2b22      	cmp	r3, #34	; 0x22
 800467a:	d002      	beq.n	8004682 <I2C_Slave_STOPF+0x6a>
 800467c:	7bfb      	ldrb	r3, [r7, #15]
 800467e:	2b2a      	cmp	r3, #42	; 0x2a
 8004680:	d135      	bne.n	80046ee <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	b29a      	uxth	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	f043 0204 	orr.w	r2, r3, #4
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fd fe80 	bl	80023c0 <HAL_DMA_GetState>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d049      	beq.n	800475a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	4a69      	ldr	r2, [pc, #420]	; (8004870 <I2C_Slave_STOPF+0x258>)
 80046cc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fd fcc8 	bl	8002068 <HAL_DMA_Abort_IT>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d03d      	beq.n	800475a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046e8:	4610      	mov	r0, r2
 80046ea:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046ec:	e035      	b.n	800475a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004700:	b29b      	uxth	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d005      	beq.n	8004712 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	f043 0204 	orr.w	r2, r3, #4
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004720:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004726:	4618      	mov	r0, r3
 8004728:	f7fd fe4a 	bl	80023c0 <HAL_DMA_GetState>
 800472c:	4603      	mov	r3, r0
 800472e:	2b01      	cmp	r3, #1
 8004730:	d014      	beq.n	800475c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004736:	4a4e      	ldr	r2, [pc, #312]	; (8004870 <I2C_Slave_STOPF+0x258>)
 8004738:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473e:	4618      	mov	r0, r3
 8004740:	f7fd fc92 	bl	8002068 <HAL_DMA_Abort_IT>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d008      	beq.n	800475c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004754:	4610      	mov	r0, r2
 8004756:	4798      	blx	r3
 8004758:	e000      	b.n	800475c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800475a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d03e      	beq.n	80047e4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b04      	cmp	r3, #4
 8004772:	d112      	bne.n	800479a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a4:	2b40      	cmp	r3, #64	; 0x40
 80047a6:	d112      	bne.n	80047ce <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691a      	ldr	r2, [r3, #16]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	f043 0204 	orr.w	r2, r3, #4
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f8b3 	bl	8004958 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80047f2:	e039      	b.n	8004868 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
 80047f6:	2b2a      	cmp	r3, #42	; 0x2a
 80047f8:	d109      	bne.n	800480e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2228      	movs	r2, #40	; 0x28
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7ff f829 	bl	8003860 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b28      	cmp	r3, #40	; 0x28
 8004818:	d111      	bne.n	800483e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a15      	ldr	r2, [pc, #84]	; (8004874 <I2C_Slave_STOPF+0x25c>)
 800481e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2220      	movs	r2, #32
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7ff f82a 	bl	8003890 <HAL_I2C_ListenCpltCallback>
}
 800483c:	e014      	b.n	8004868 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	2b22      	cmp	r3, #34	; 0x22
 8004844:	d002      	beq.n	800484c <I2C_Slave_STOPF+0x234>
 8004846:	7bfb      	ldrb	r3, [r7, #15]
 8004848:	2b22      	cmp	r3, #34	; 0x22
 800484a:	d10d      	bne.n	8004868 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2220      	movs	r2, #32
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fe fffc 	bl	8003860 <HAL_I2C_SlaveRxCpltCallback>
}
 8004868:	bf00      	nop
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	08005081 	.word	0x08005081
 8004874:	ffff0000 	.word	0xffff0000

08004878 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004886:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b08      	cmp	r3, #8
 8004892:	d002      	beq.n	800489a <I2C_Slave_AF+0x22>
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2b20      	cmp	r3, #32
 8004898:	d129      	bne.n	80048ee <I2C_Slave_AF+0x76>
 800489a:	7bfb      	ldrb	r3, [r7, #15]
 800489c:	2b28      	cmp	r3, #40	; 0x28
 800489e:	d126      	bne.n	80048ee <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a2c      	ldr	r2, [pc, #176]	; (8004954 <I2C_Slave_AF+0xdc>)
 80048a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048b4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048be:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ce:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fe ffd2 	bl	8003890 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80048ec:	e02e      	b.n	800494c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
 80048f0:	2b21      	cmp	r3, #33	; 0x21
 80048f2:	d126      	bne.n	8004942 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a17      	ldr	r2, [pc, #92]	; (8004954 <I2C_Slave_AF+0xdc>)
 80048f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2221      	movs	r2, #33	; 0x21
 80048fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800491e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004928:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004938:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7fe ff86 	bl	800384c <HAL_I2C_SlaveTxCpltCallback>
}
 8004940:	e004      	b.n	800494c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800494a:	615a      	str	r2, [r3, #20]
}
 800494c:	bf00      	nop
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	ffff0000 	.word	0xffff0000

08004958 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004966:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800496e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004970:	7bbb      	ldrb	r3, [r7, #14]
 8004972:	2b10      	cmp	r3, #16
 8004974:	d002      	beq.n	800497c <I2C_ITError+0x24>
 8004976:	7bbb      	ldrb	r3, [r7, #14]
 8004978:	2b40      	cmp	r3, #64	; 0x40
 800497a:	d10a      	bne.n	8004992 <I2C_ITError+0x3a>
 800497c:	7bfb      	ldrb	r3, [r7, #15]
 800497e:	2b22      	cmp	r3, #34	; 0x22
 8004980:	d107      	bne.n	8004992 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004990:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004992:	7bfb      	ldrb	r3, [r7, #15]
 8004994:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004998:	2b28      	cmp	r3, #40	; 0x28
 800499a:	d107      	bne.n	80049ac <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2228      	movs	r2, #40	; 0x28
 80049a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049aa:	e015      	b.n	80049d8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ba:	d00a      	beq.n	80049d2 <I2C_ITError+0x7a>
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	2b60      	cmp	r3, #96	; 0x60
 80049c0:	d007      	beq.n	80049d2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049e6:	d162      	bne.n	8004aae <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049f6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d020      	beq.n	8004a48 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0a:	4a6a      	ldr	r2, [pc, #424]	; (8004bb4 <I2C_ITError+0x25c>)
 8004a0c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fd fb28 	bl	8002068 <HAL_DMA_Abort_IT>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 8089 	beq.w	8004b32 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0201 	bic.w	r2, r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a42:	4610      	mov	r0, r2
 8004a44:	4798      	blx	r3
 8004a46:	e074      	b.n	8004b32 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	4a59      	ldr	r2, [pc, #356]	; (8004bb4 <I2C_ITError+0x25c>)
 8004a4e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fd fb07 	bl	8002068 <HAL_DMA_Abort_IT>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d068      	beq.n	8004b32 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6a:	2b40      	cmp	r3, #64	; 0x40
 8004a6c:	d10b      	bne.n	8004a86 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	b2d2      	uxtb	r2, r2
 8004a7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0201 	bic.w	r2, r2, #1
 8004a94:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	4798      	blx	r3
 8004aac:	e041      	b.n	8004b32 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b60      	cmp	r3, #96	; 0x60
 8004ab8:	d125      	bne.n	8004b06 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2220      	movs	r2, #32
 8004abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad2:	2b40      	cmp	r3, #64	; 0x40
 8004ad4:	d10b      	bne.n	8004aee <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0201 	bic.w	r2, r2, #1
 8004afc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fe feee 	bl	80038e0 <HAL_I2C_AbortCpltCallback>
 8004b04:	e015      	b.n	8004b32 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b10:	2b40      	cmp	r3, #64	; 0x40
 8004b12:	d10b      	bne.n	8004b2c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	691a      	ldr	r2, [r3, #16]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7fe fecd 	bl	80038cc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10e      	bne.n	8004b60 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d109      	bne.n	8004b60 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d104      	bne.n	8004b60 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d007      	beq.n	8004b70 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b6e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b76:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b04      	cmp	r3, #4
 8004b82:	d113      	bne.n	8004bac <I2C_ITError+0x254>
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
 8004b86:	2b28      	cmp	r3, #40	; 0x28
 8004b88:	d110      	bne.n	8004bac <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a0a      	ldr	r2, [pc, #40]	; (8004bb8 <I2C_ITError+0x260>)
 8004b8e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7fe fe72 	bl	8003890 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004bac:	bf00      	nop
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	08005081 	.word	0x08005081
 8004bb8:	ffff0000 	.word	0xffff0000

08004bbc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af02      	add	r7, sp, #8
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	607a      	str	r2, [r7, #4]
 8004bc6:	603b      	str	r3, [r7, #0]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d006      	beq.n	8004be6 <I2C_MasterRequestWrite+0x2a>
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d003      	beq.n	8004be6 <I2C_MasterRequestWrite+0x2a>
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004be4:	d108      	bne.n	8004bf8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	e00b      	b.n	8004c10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	2b12      	cmp	r3, #18
 8004bfe:	d107      	bne.n	8004c10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 fad7 	bl	80051d0 <I2C_WaitOnFlagUntilTimeout>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00d      	beq.n	8004c44 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c36:	d103      	bne.n	8004c40 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e035      	b.n	8004cb0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c4c:	d108      	bne.n	8004c60 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c4e:	897b      	ldrh	r3, [r7, #10]
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	461a      	mov	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c5c:	611a      	str	r2, [r3, #16]
 8004c5e:	e01b      	b.n	8004c98 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c60:	897b      	ldrh	r3, [r7, #10]
 8004c62:	11db      	asrs	r3, r3, #7
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	f003 0306 	and.w	r3, r3, #6
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	f063 030f 	orn	r3, r3, #15
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	490e      	ldr	r1, [pc, #56]	; (8004cb8 <I2C_MasterRequestWrite+0xfc>)
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 fafd 	bl	800527e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e010      	b.n	8004cb0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c8e:	897b      	ldrh	r3, [r7, #10]
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	4907      	ldr	r1, [pc, #28]	; (8004cbc <I2C_MasterRequestWrite+0x100>)
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 faed 	bl	800527e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e000      	b.n	8004cb0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	00010008 	.word	0x00010008
 8004cbc:	00010002 	.word	0x00010002

08004cc0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af02      	add	r7, sp, #8
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	607a      	str	r2, [r7, #4]
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ce4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d006      	beq.n	8004cfa <I2C_MasterRequestRead+0x3a>
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d003      	beq.n	8004cfa <I2C_MasterRequestRead+0x3a>
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cf8:	d108      	bne.n	8004d0c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	e00b      	b.n	8004d24 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d10:	2b11      	cmp	r3, #17
 8004d12:	d107      	bne.n	8004d24 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 fa4d 	bl	80051d0 <I2C_WaitOnFlagUntilTimeout>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00d      	beq.n	8004d58 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d4a:	d103      	bne.n	8004d54 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e079      	b.n	8004e4c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d60:	d108      	bne.n	8004d74 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d62:	897b      	ldrh	r3, [r7, #10]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	f043 0301 	orr.w	r3, r3, #1
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	611a      	str	r2, [r3, #16]
 8004d72:	e05f      	b.n	8004e34 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d74:	897b      	ldrh	r3, [r7, #10]
 8004d76:	11db      	asrs	r3, r3, #7
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	f003 0306 	and.w	r3, r3, #6
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	f063 030f 	orn	r3, r3, #15
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	4930      	ldr	r1, [pc, #192]	; (8004e54 <I2C_MasterRequestRead+0x194>)
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 fa73 	bl	800527e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e054      	b.n	8004e4c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004da2:	897b      	ldrh	r3, [r7, #10]
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	4929      	ldr	r1, [pc, #164]	; (8004e58 <I2C_MasterRequestRead+0x198>)
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 fa63 	bl	800527e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e044      	b.n	8004e4c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	613b      	str	r3, [r7, #16]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	613b      	str	r3, [r7, #16]
 8004dd6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004de6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 f9eb 	bl	80051d0 <I2C_WaitOnFlagUntilTimeout>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00d      	beq.n	8004e1c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e0e:	d103      	bne.n	8004e18 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e16:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e017      	b.n	8004e4c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004e1c:	897b      	ldrh	r3, [r7, #10]
 8004e1e:	11db      	asrs	r3, r3, #7
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	f003 0306 	and.w	r3, r3, #6
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	f063 030e 	orn	r3, r3, #14
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	4907      	ldr	r1, [pc, #28]	; (8004e58 <I2C_MasterRequestRead+0x198>)
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 fa1f 	bl	800527e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3718      	adds	r7, #24
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	00010008 	.word	0x00010008
 8004e58:	00010002 	.word	0x00010002

08004e5c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e68:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e70:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e78:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e8e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eac:	2200      	movs	r2, #0
 8004eae:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004eb0:	7cfb      	ldrb	r3, [r7, #19]
 8004eb2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004eb6:	2b21      	cmp	r3, #33	; 0x21
 8004eb8:	d007      	beq.n	8004eca <I2C_DMAXferCplt+0x6e>
 8004eba:	7cfb      	ldrb	r3, [r7, #19]
 8004ebc:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004ec0:	2b22      	cmp	r3, #34	; 0x22
 8004ec2:	d131      	bne.n	8004f28 <I2C_DMAXferCplt+0xcc>
 8004ec4:	7cbb      	ldrb	r3, [r7, #18]
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d12e      	bne.n	8004f28 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ed8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2200      	movs	r2, #0
 8004ede:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004ee0:	7cfb      	ldrb	r3, [r7, #19]
 8004ee2:	2b29      	cmp	r3, #41	; 0x29
 8004ee4:	d10a      	bne.n	8004efc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2221      	movs	r2, #33	; 0x21
 8004eea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	2228      	movs	r2, #40	; 0x28
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ef4:	6978      	ldr	r0, [r7, #20]
 8004ef6:	f7fe fca9 	bl	800384c <HAL_I2C_SlaveTxCpltCallback>
 8004efa:	e00c      	b.n	8004f16 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004efc:	7cfb      	ldrb	r3, [r7, #19]
 8004efe:	2b2a      	cmp	r3, #42	; 0x2a
 8004f00:	d109      	bne.n	8004f16 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2222      	movs	r2, #34	; 0x22
 8004f06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2228      	movs	r2, #40	; 0x28
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f10:	6978      	ldr	r0, [r7, #20]
 8004f12:	f7fe fca5 	bl	8003860 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004f24:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004f26:	e06a      	b.n	8004ffe <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d064      	beq.n	8004ffe <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d107      	bne.n	8004f4e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f4c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f5c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f64:	d009      	beq.n	8004f7a <I2C_DMAXferCplt+0x11e>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d006      	beq.n	8004f7a <I2C_DMAXferCplt+0x11e>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004f72:	d002      	beq.n	8004f7a <I2C_DMAXferCplt+0x11e>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b20      	cmp	r3, #32
 8004f78:	d107      	bne.n	8004f8a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f88:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f98:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fa8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2200      	movs	r2, #0
 8004fae:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004fb8:	6978      	ldr	r0, [r7, #20]
 8004fba:	f7fe fc87 	bl	80038cc <HAL_I2C_ErrorCallback>
}
 8004fbe:	e01e      	b.n	8004ffe <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b40      	cmp	r3, #64	; 0x40
 8004fd2:	d10a      	bne.n	8004fea <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004fe2:	6978      	ldr	r0, [r7, #20]
 8004fe4:	f7fe fc68 	bl	80038b8 <HAL_I2C_MemRxCpltCallback>
}
 8004fe8:	e009      	b.n	8004ffe <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2212      	movs	r2, #18
 8004ff6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ff8:	6978      	ldr	r0, [r7, #20]
 8004ffa:	f7fc fa0f 	bl	800141c <HAL_I2C_MasterRxCpltCallback>
}
 8004ffe:	bf00      	nop
 8005000:	3718      	adds	r7, #24
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005012:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005020:	2200      	movs	r2, #0
 8005022:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005030:	2200      	movs	r2, #0
 8005032:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7fd f9d1 	bl	80023dc <HAL_DMA_GetError>
 800503a:	4603      	mov	r3, r0
 800503c:	2b02      	cmp	r3, #2
 800503e:	d01b      	beq.n	8005078 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800504e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2220      	movs	r2, #32
 800505a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	f043 0210 	orr.w	r2, r3, #16
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f7fe fc2a 	bl	80038cc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005078:	bf00      	nop
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005090:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005098:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800509a:	4b4b      	ldr	r3, [pc, #300]	; (80051c8 <I2C_DMAAbort+0x148>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	08db      	lsrs	r3, r3, #3
 80050a0:	4a4a      	ldr	r2, [pc, #296]	; (80051cc <I2C_DMAAbort+0x14c>)
 80050a2:	fba2 2303 	umull	r2, r3, r2, r3
 80050a6:	0a1a      	lsrs	r2, r3, #8
 80050a8:	4613      	mov	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	00da      	lsls	r2, r3, #3
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d106      	bne.n	80050c8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	f043 0220 	orr.w	r2, r3, #32
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80050c6:	e00a      	b.n	80050de <I2C_DMAAbort+0x5e>
    }
    count--;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050dc:	d0ea      	beq.n	80050b4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ea:	2200      	movs	r2, #0
 80050ec:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fa:	2200      	movs	r2, #0
 80050fc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800510c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2200      	movs	r2, #0
 8005112:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005120:	2200      	movs	r2, #0
 8005122:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005130:	2200      	movs	r2, #0
 8005132:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 0201 	bic.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b60      	cmp	r3, #96	; 0x60
 800514e:	d10e      	bne.n	800516e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	2200      	movs	r2, #0
 8005164:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005166:	6978      	ldr	r0, [r7, #20]
 8005168:	f7fe fbba 	bl	80038e0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800516c:	e027      	b.n	80051be <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800516e:	7cfb      	ldrb	r3, [r7, #19]
 8005170:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005174:	2b28      	cmp	r3, #40	; 0x28
 8005176:	d117      	bne.n	80051a8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0201 	orr.w	r2, r2, #1
 8005186:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005196:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	2200      	movs	r2, #0
 800519c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2228      	movs	r2, #40	; 0x28
 80051a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80051a6:	e007      	b.n	80051b8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80051b8:	6978      	ldr	r0, [r7, #20]
 80051ba:	f7fe fb87 	bl	80038cc <HAL_I2C_ErrorCallback>
}
 80051be:	bf00      	nop
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20000008 	.word	0x20000008
 80051cc:	14f8b589 	.word	0x14f8b589

080051d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	603b      	str	r3, [r7, #0]
 80051dc:	4613      	mov	r3, r2
 80051de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051e0:	e025      	b.n	800522e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051e8:	d021      	beq.n	800522e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ea:	f7fc fca9 	bl	8001b40 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d302      	bcc.n	8005200 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d116      	bne.n	800522e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	f043 0220 	orr.w	r2, r3, #32
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e023      	b.n	8005276 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	0c1b      	lsrs	r3, r3, #16
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b01      	cmp	r3, #1
 8005236:	d10d      	bne.n	8005254 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	43da      	mvns	r2, r3
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	4013      	ands	r3, r2
 8005244:	b29b      	uxth	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	bf0c      	ite	eq
 800524a:	2301      	moveq	r3, #1
 800524c:	2300      	movne	r3, #0
 800524e:	b2db      	uxtb	r3, r3
 8005250:	461a      	mov	r2, r3
 8005252:	e00c      	b.n	800526e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	43da      	mvns	r2, r3
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	4013      	ands	r3, r2
 8005260:	b29b      	uxth	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	bf0c      	ite	eq
 8005266:	2301      	moveq	r3, #1
 8005268:	2300      	movne	r3, #0
 800526a:	b2db      	uxtb	r3, r3
 800526c:	461a      	mov	r2, r3
 800526e:	79fb      	ldrb	r3, [r7, #7]
 8005270:	429a      	cmp	r2, r3
 8005272:	d0b6      	beq.n	80051e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b084      	sub	sp, #16
 8005282:	af00      	add	r7, sp, #0
 8005284:	60f8      	str	r0, [r7, #12]
 8005286:	60b9      	str	r1, [r7, #8]
 8005288:	607a      	str	r2, [r7, #4]
 800528a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800528c:	e051      	b.n	8005332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800529c:	d123      	bne.n	80052e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	f043 0204 	orr.w	r2, r3, #4
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e046      	b.n	8005374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052ec:	d021      	beq.n	8005332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ee:	f7fc fc27 	bl	8001b40 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d302      	bcc.n	8005304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d116      	bne.n	8005332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	f043 0220 	orr.w	r2, r3, #32
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e020      	b.n	8005374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	0c1b      	lsrs	r3, r3, #16
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b01      	cmp	r3, #1
 800533a:	d10c      	bne.n	8005356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	43da      	mvns	r2, r3
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	4013      	ands	r3, r2
 8005348:	b29b      	uxth	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	bf14      	ite	ne
 800534e:	2301      	movne	r3, #1
 8005350:	2300      	moveq	r3, #0
 8005352:	b2db      	uxtb	r3, r3
 8005354:	e00b      	b.n	800536e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	43da      	mvns	r2, r3
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	4013      	ands	r3, r2
 8005362:	b29b      	uxth	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	bf14      	ite	ne
 8005368:	2301      	movne	r3, #1
 800536a:	2300      	moveq	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d18d      	bne.n	800528e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005388:	e02d      	b.n	80053e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 f900 	bl	8005590 <I2C_IsAcknowledgeFailed>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e02d      	b.n	80053f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053a0:	d021      	beq.n	80053e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a2:	f7fc fbcd 	bl	8001b40 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d302      	bcc.n	80053b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d116      	bne.n	80053e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2220      	movs	r2, #32
 80053c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	f043 0220 	orr.w	r2, r3, #32
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e007      	b.n	80053f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f0:	2b80      	cmp	r3, #128	; 0x80
 80053f2:	d1ca      	bne.n	800538a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b084      	sub	sp, #16
 8005402:	af00      	add	r7, sp, #0
 8005404:	60f8      	str	r0, [r7, #12]
 8005406:	60b9      	str	r1, [r7, #8]
 8005408:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800540a:	e02d      	b.n	8005468 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 f8bf 	bl	8005590 <I2C_IsAcknowledgeFailed>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e02d      	b.n	8005478 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005422:	d021      	beq.n	8005468 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005424:	f7fc fb8c 	bl	8001b40 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	429a      	cmp	r2, r3
 8005432:	d302      	bcc.n	800543a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d116      	bne.n	8005468 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2220      	movs	r2, #32
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005454:	f043 0220 	orr.w	r2, r3, #32
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e007      	b.n	8005478 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	f003 0304 	and.w	r3, r3, #4
 8005472:	2b04      	cmp	r3, #4
 8005474:	d1ca      	bne.n	800540c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800548c:	4b13      	ldr	r3, [pc, #76]	; (80054dc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	08db      	lsrs	r3, r3, #3
 8005492:	4a13      	ldr	r2, [pc, #76]	; (80054e0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005494:	fba2 2303 	umull	r2, r3, r2, r3
 8005498:	0a1a      	lsrs	r2, r3, #8
 800549a:	4613      	mov	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	3b01      	subs	r3, #1
 80054a6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d107      	bne.n	80054be <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	f043 0220 	orr.w	r2, r3, #32
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e008      	b.n	80054d0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054cc:	d0e9      	beq.n	80054a2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	20000008 	.word	0x20000008
 80054e0:	14f8b589 	.word	0x14f8b589

080054e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054f0:	e042      	b.n	8005578 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	f003 0310 	and.w	r3, r3, #16
 80054fc:	2b10      	cmp	r3, #16
 80054fe:	d119      	bne.n	8005534 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f06f 0210 	mvn.w	r2, #16
 8005508:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2220      	movs	r2, #32
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e029      	b.n	8005588 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005534:	f7fc fb04 	bl	8001b40 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	429a      	cmp	r2, r3
 8005542:	d302      	bcc.n	800554a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d116      	bne.n	8005578 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2220      	movs	r2, #32
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005564:	f043 0220 	orr.w	r2, r3, #32
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e007      	b.n	8005588 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005582:	2b40      	cmp	r3, #64	; 0x40
 8005584:	d1b5      	bne.n	80054f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a6:	d11b      	bne.n	80055e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055cc:	f043 0204 	orr.w	r2, r3, #4
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e000      	b.n	80055e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80055fe:	d103      	bne.n	8005608 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005606:	e007      	b.n	8005618 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005610:	d102      	bne.n	8005618 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2208      	movs	r2, #8
 8005616:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e267      	b.n	8005b06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d075      	beq.n	800572e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005642:	4b88      	ldr	r3, [pc, #544]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 030c 	and.w	r3, r3, #12
 800564a:	2b04      	cmp	r3, #4
 800564c:	d00c      	beq.n	8005668 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800564e:	4b85      	ldr	r3, [pc, #532]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005656:	2b08      	cmp	r3, #8
 8005658:	d112      	bne.n	8005680 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800565a:	4b82      	ldr	r3, [pc, #520]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005666:	d10b      	bne.n	8005680 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005668:	4b7e      	ldr	r3, [pc, #504]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d05b      	beq.n	800572c <HAL_RCC_OscConfig+0x108>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d157      	bne.n	800572c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e242      	b.n	8005b06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005688:	d106      	bne.n	8005698 <HAL_RCC_OscConfig+0x74>
 800568a:	4b76      	ldr	r3, [pc, #472]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a75      	ldr	r2, [pc, #468]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 8005690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005694:	6013      	str	r3, [r2, #0]
 8005696:	e01d      	b.n	80056d4 <HAL_RCC_OscConfig+0xb0>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056a0:	d10c      	bne.n	80056bc <HAL_RCC_OscConfig+0x98>
 80056a2:	4b70      	ldr	r3, [pc, #448]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a6f      	ldr	r2, [pc, #444]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 80056a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	4b6d      	ldr	r3, [pc, #436]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a6c      	ldr	r2, [pc, #432]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 80056b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056b8:	6013      	str	r3, [r2, #0]
 80056ba:	e00b      	b.n	80056d4 <HAL_RCC_OscConfig+0xb0>
 80056bc:	4b69      	ldr	r3, [pc, #420]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a68      	ldr	r2, [pc, #416]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 80056c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	4b66      	ldr	r3, [pc, #408]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a65      	ldr	r2, [pc, #404]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 80056ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d013      	beq.n	8005704 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056dc:	f7fc fa30 	bl	8001b40 <HAL_GetTick>
 80056e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056e2:	e008      	b.n	80056f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056e4:	f7fc fa2c 	bl	8001b40 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b64      	cmp	r3, #100	; 0x64
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e207      	b.n	8005b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056f6:	4b5b      	ldr	r3, [pc, #364]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0f0      	beq.n	80056e4 <HAL_RCC_OscConfig+0xc0>
 8005702:	e014      	b.n	800572e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005704:	f7fc fa1c 	bl	8001b40 <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800570c:	f7fc fa18 	bl	8001b40 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b64      	cmp	r3, #100	; 0x64
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e1f3      	b.n	8005b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800571e:	4b51      	ldr	r3, [pc, #324]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1f0      	bne.n	800570c <HAL_RCC_OscConfig+0xe8>
 800572a:	e000      	b.n	800572e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800572c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d063      	beq.n	8005802 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800573a:	4b4a      	ldr	r3, [pc, #296]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 030c 	and.w	r3, r3, #12
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00b      	beq.n	800575e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005746:	4b47      	ldr	r3, [pc, #284]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800574e:	2b08      	cmp	r3, #8
 8005750:	d11c      	bne.n	800578c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005752:	4b44      	ldr	r3, [pc, #272]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d116      	bne.n	800578c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800575e:	4b41      	ldr	r3, [pc, #260]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d005      	beq.n	8005776 <HAL_RCC_OscConfig+0x152>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d001      	beq.n	8005776 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e1c7      	b.n	8005b06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005776:	4b3b      	ldr	r3, [pc, #236]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	4937      	ldr	r1, [pc, #220]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 8005786:	4313      	orrs	r3, r2
 8005788:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800578a:	e03a      	b.n	8005802 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d020      	beq.n	80057d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005794:	4b34      	ldr	r3, [pc, #208]	; (8005868 <HAL_RCC_OscConfig+0x244>)
 8005796:	2201      	movs	r2, #1
 8005798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579a:	f7fc f9d1 	bl	8001b40 <HAL_GetTick>
 800579e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057a0:	e008      	b.n	80057b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057a2:	f7fc f9cd 	bl	8001b40 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d901      	bls.n	80057b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e1a8      	b.n	8005b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057b4:	4b2b      	ldr	r3, [pc, #172]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0f0      	beq.n	80057a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057c0:	4b28      	ldr	r3, [pc, #160]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	4925      	ldr	r1, [pc, #148]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	600b      	str	r3, [r1, #0]
 80057d4:	e015      	b.n	8005802 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057d6:	4b24      	ldr	r3, [pc, #144]	; (8005868 <HAL_RCC_OscConfig+0x244>)
 80057d8:	2200      	movs	r2, #0
 80057da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057dc:	f7fc f9b0 	bl	8001b40 <HAL_GetTick>
 80057e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057e4:	f7fc f9ac 	bl	8001b40 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e187      	b.n	8005b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057f6:	4b1b      	ldr	r3, [pc, #108]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1f0      	bne.n	80057e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0308 	and.w	r3, r3, #8
 800580a:	2b00      	cmp	r3, #0
 800580c:	d036      	beq.n	800587c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d016      	beq.n	8005844 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005816:	4b15      	ldr	r3, [pc, #84]	; (800586c <HAL_RCC_OscConfig+0x248>)
 8005818:	2201      	movs	r2, #1
 800581a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800581c:	f7fc f990 	bl	8001b40 <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005824:	f7fc f98c 	bl	8001b40 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e167      	b.n	8005b06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005836:	4b0b      	ldr	r3, [pc, #44]	; (8005864 <HAL_RCC_OscConfig+0x240>)
 8005838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0f0      	beq.n	8005824 <HAL_RCC_OscConfig+0x200>
 8005842:	e01b      	b.n	800587c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005844:	4b09      	ldr	r3, [pc, #36]	; (800586c <HAL_RCC_OscConfig+0x248>)
 8005846:	2200      	movs	r2, #0
 8005848:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800584a:	f7fc f979 	bl	8001b40 <HAL_GetTick>
 800584e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005850:	e00e      	b.n	8005870 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005852:	f7fc f975 	bl	8001b40 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d907      	bls.n	8005870 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e150      	b.n	8005b06 <HAL_RCC_OscConfig+0x4e2>
 8005864:	40023800 	.word	0x40023800
 8005868:	42470000 	.word	0x42470000
 800586c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005870:	4b88      	ldr	r3, [pc, #544]	; (8005a94 <HAL_RCC_OscConfig+0x470>)
 8005872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1ea      	bne.n	8005852 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 8097 	beq.w	80059b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800588a:	2300      	movs	r3, #0
 800588c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800588e:	4b81      	ldr	r3, [pc, #516]	; (8005a94 <HAL_RCC_OscConfig+0x470>)
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10f      	bne.n	80058ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800589a:	2300      	movs	r3, #0
 800589c:	60bb      	str	r3, [r7, #8]
 800589e:	4b7d      	ldr	r3, [pc, #500]	; (8005a94 <HAL_RCC_OscConfig+0x470>)
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	4a7c      	ldr	r2, [pc, #496]	; (8005a94 <HAL_RCC_OscConfig+0x470>)
 80058a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058a8:	6413      	str	r3, [r2, #64]	; 0x40
 80058aa:	4b7a      	ldr	r3, [pc, #488]	; (8005a94 <HAL_RCC_OscConfig+0x470>)
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b2:	60bb      	str	r3, [r7, #8]
 80058b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058b6:	2301      	movs	r3, #1
 80058b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ba:	4b77      	ldr	r3, [pc, #476]	; (8005a98 <HAL_RCC_OscConfig+0x474>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d118      	bne.n	80058f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058c6:	4b74      	ldr	r3, [pc, #464]	; (8005a98 <HAL_RCC_OscConfig+0x474>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a73      	ldr	r2, [pc, #460]	; (8005a98 <HAL_RCC_OscConfig+0x474>)
 80058cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058d2:	f7fc f935 	bl	8001b40 <HAL_GetTick>
 80058d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d8:	e008      	b.n	80058ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058da:	f7fc f931 	bl	8001b40 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d901      	bls.n	80058ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e10c      	b.n	8005b06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ec:	4b6a      	ldr	r3, [pc, #424]	; (8005a98 <HAL_RCC_OscConfig+0x474>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0f0      	beq.n	80058da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d106      	bne.n	800590e <HAL_RCC_OscConfig+0x2ea>
 8005900:	4b64      	ldr	r3, [pc, #400]	; (8005a94 <HAL_RCC_OscConfig+0x470>)
 8005902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005904:	4a63      	ldr	r2, [pc, #396]	; (8005a94 <HAL_RCC_OscConfig+0x470>)
 8005906:	f043 0301 	orr.w	r3, r3, #1
 800590a:	6713      	str	r3, [r2, #112]	; 0x70
 800590c:	e01c      	b.n	8005948 <HAL_RCC_OscConfig+0x324>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	2b05      	cmp	r3, #5
 8005914:	d10c      	bne.n	8005930 <HAL_RCC_OscConfig+0x30c>
 8005916:	4b5f      	ldr	r3, [pc, #380]	; (8005a94 <HAL_RCC_OscConfig+0x470>)
 8005918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591a:	4a5e      	ldr	r2, [pc, #376]	; (8005a94 <HAL_RCC_OscConfig+0x470>)
 800591c:	f043 0304 	orr.w	r3, r3, #4
 8005920:	6713      	str	r3, [r2, #112]	; 0x70
 8005922:	4b5c      	ldr	r3, [pc, #368]	; (8005a94 <HAL_RCC_OscConfig+0x470>)
 8005924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005926:	4a5b      	ldr	r2, [pc, #364]	; (8005a94 <HAL_RCC_OscConfig+0x470>)
 8005928:	f043 0301 	orr.w	r3, r3, #1
 800592c:	6713      	str	r3, [r2, #112]	; 0x70
 800592e:	e00b      	b.n	8005948 <HAL_RCC_OscConfig+0x324>
 8005930:	4b58      	ldr	r3, [pc, #352]	; (8005a94 <HAL_RCC_OscConfig+0x470>)
 8005932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005934:	4a57      	ldr	r2, [pc, #348]	; (8005a94 <HAL_RCC_OscConfig+0x470>)
 8005936:	f023 0301 	bic.w	r3, r3, #1
 800593a:	6713      	str	r3, [r2, #112]	; 0x70
 800593c:	4b55      	ldr	r3, [pc, #340]	; (8005a94 <HAL_RCC_OscConfig+0x470>)
 800593e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005940:	4a54      	ldr	r2, [pc, #336]	; (8005a94 <HAL_RCC_OscConfig+0x470>)
 8005942:	f023 0304 	bic.w	r3, r3, #4
 8005946:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d015      	beq.n	800597c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005950:	f7fc f8f6 	bl	8001b40 <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005956:	e00a      	b.n	800596e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005958:	f7fc f8f2 	bl	8001b40 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	f241 3288 	movw	r2, #5000	; 0x1388
 8005966:	4293      	cmp	r3, r2
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e0cb      	b.n	8005b06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800596e:	4b49      	ldr	r3, [pc, #292]	; (8005a94 <HAL_RCC_OscConfig+0x470>)
 8005970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d0ee      	beq.n	8005958 <HAL_RCC_OscConfig+0x334>
 800597a:	e014      	b.n	80059a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800597c:	f7fc f8e0 	bl	8001b40 <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005982:	e00a      	b.n	800599a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005984:	f7fc f8dc 	bl	8001b40 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005992:	4293      	cmp	r3, r2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e0b5      	b.n	8005b06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800599a:	4b3e      	ldr	r3, [pc, #248]	; (8005a94 <HAL_RCC_OscConfig+0x470>)
 800599c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1ee      	bne.n	8005984 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059a6:	7dfb      	ldrb	r3, [r7, #23]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d105      	bne.n	80059b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059ac:	4b39      	ldr	r3, [pc, #228]	; (8005a94 <HAL_RCC_OscConfig+0x470>)
 80059ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b0:	4a38      	ldr	r2, [pc, #224]	; (8005a94 <HAL_RCC_OscConfig+0x470>)
 80059b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 80a1 	beq.w	8005b04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059c2:	4b34      	ldr	r3, [pc, #208]	; (8005a94 <HAL_RCC_OscConfig+0x470>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 030c 	and.w	r3, r3, #12
 80059ca:	2b08      	cmp	r3, #8
 80059cc:	d05c      	beq.n	8005a88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d141      	bne.n	8005a5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059d6:	4b31      	ldr	r3, [pc, #196]	; (8005a9c <HAL_RCC_OscConfig+0x478>)
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059dc:	f7fc f8b0 	bl	8001b40 <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059e2:	e008      	b.n	80059f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059e4:	f7fc f8ac 	bl	8001b40 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e087      	b.n	8005b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059f6:	4b27      	ldr	r3, [pc, #156]	; (8005a94 <HAL_RCC_OscConfig+0x470>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1f0      	bne.n	80059e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	69da      	ldr	r2, [r3, #28]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	019b      	lsls	r3, r3, #6
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a18:	085b      	lsrs	r3, r3, #1
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	041b      	lsls	r3, r3, #16
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a24:	061b      	lsls	r3, r3, #24
 8005a26:	491b      	ldr	r1, [pc, #108]	; (8005a94 <HAL_RCC_OscConfig+0x470>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a2c:	4b1b      	ldr	r3, [pc, #108]	; (8005a9c <HAL_RCC_OscConfig+0x478>)
 8005a2e:	2201      	movs	r2, #1
 8005a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a32:	f7fc f885 	bl	8001b40 <HAL_GetTick>
 8005a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a38:	e008      	b.n	8005a4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a3a:	f7fc f881 	bl	8001b40 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e05c      	b.n	8005b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a4c:	4b11      	ldr	r3, [pc, #68]	; (8005a94 <HAL_RCC_OscConfig+0x470>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0f0      	beq.n	8005a3a <HAL_RCC_OscConfig+0x416>
 8005a58:	e054      	b.n	8005b04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a5a:	4b10      	ldr	r3, [pc, #64]	; (8005a9c <HAL_RCC_OscConfig+0x478>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a60:	f7fc f86e 	bl	8001b40 <HAL_GetTick>
 8005a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a66:	e008      	b.n	8005a7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a68:	f7fc f86a 	bl	8001b40 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e045      	b.n	8005b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a7a:	4b06      	ldr	r3, [pc, #24]	; (8005a94 <HAL_RCC_OscConfig+0x470>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1f0      	bne.n	8005a68 <HAL_RCC_OscConfig+0x444>
 8005a86:	e03d      	b.n	8005b04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d107      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e038      	b.n	8005b06 <HAL_RCC_OscConfig+0x4e2>
 8005a94:	40023800 	.word	0x40023800
 8005a98:	40007000 	.word	0x40007000
 8005a9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005aa0:	4b1b      	ldr	r3, [pc, #108]	; (8005b10 <HAL_RCC_OscConfig+0x4ec>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d028      	beq.n	8005b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d121      	bne.n	8005b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d11a      	bne.n	8005b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ad6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d111      	bne.n	8005b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae6:	085b      	lsrs	r3, r3, #1
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d107      	bne.n	8005b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d001      	beq.n	8005b04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e000      	b.n	8005b06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	40023800 	.word	0x40023800

08005b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d101      	bne.n	8005b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e0cc      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b28:	4b68      	ldr	r3, [pc, #416]	; (8005ccc <HAL_RCC_ClockConfig+0x1b8>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0307 	and.w	r3, r3, #7
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d90c      	bls.n	8005b50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b36:	4b65      	ldr	r3, [pc, #404]	; (8005ccc <HAL_RCC_ClockConfig+0x1b8>)
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	b2d2      	uxtb	r2, r2
 8005b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b3e:	4b63      	ldr	r3, [pc, #396]	; (8005ccc <HAL_RCC_ClockConfig+0x1b8>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0307 	and.w	r3, r3, #7
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d001      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e0b8      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d020      	beq.n	8005b9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0304 	and.w	r3, r3, #4
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d005      	beq.n	8005b74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b68:	4b59      	ldr	r3, [pc, #356]	; (8005cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	4a58      	ldr	r2, [pc, #352]	; (8005cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0308 	and.w	r3, r3, #8
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d005      	beq.n	8005b8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b80:	4b53      	ldr	r3, [pc, #332]	; (8005cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	4a52      	ldr	r2, [pc, #328]	; (8005cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b8c:	4b50      	ldr	r3, [pc, #320]	; (8005cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	494d      	ldr	r1, [pc, #308]	; (8005cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d044      	beq.n	8005c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d107      	bne.n	8005bc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bb2:	4b47      	ldr	r3, [pc, #284]	; (8005cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d119      	bne.n	8005bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e07f      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d003      	beq.n	8005bd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	d107      	bne.n	8005be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bd2:	4b3f      	ldr	r3, [pc, #252]	; (8005cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d109      	bne.n	8005bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e06f      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005be2:	4b3b      	ldr	r3, [pc, #236]	; (8005cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d101      	bne.n	8005bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e067      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bf2:	4b37      	ldr	r3, [pc, #220]	; (8005cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f023 0203 	bic.w	r2, r3, #3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	4934      	ldr	r1, [pc, #208]	; (8005cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c04:	f7fb ff9c 	bl	8001b40 <HAL_GetTick>
 8005c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c0a:	e00a      	b.n	8005c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c0c:	f7fb ff98 	bl	8001b40 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d901      	bls.n	8005c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e04f      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c22:	4b2b      	ldr	r3, [pc, #172]	; (8005cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 020c 	and.w	r2, r3, #12
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d1eb      	bne.n	8005c0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c34:	4b25      	ldr	r3, [pc, #148]	; (8005ccc <HAL_RCC_ClockConfig+0x1b8>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0307 	and.w	r3, r3, #7
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d20c      	bcs.n	8005c5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c42:	4b22      	ldr	r3, [pc, #136]	; (8005ccc <HAL_RCC_ClockConfig+0x1b8>)
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	b2d2      	uxtb	r2, r2
 8005c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c4a:	4b20      	ldr	r3, [pc, #128]	; (8005ccc <HAL_RCC_ClockConfig+0x1b8>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0307 	and.w	r3, r3, #7
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d001      	beq.n	8005c5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e032      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d008      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c68:	4b19      	ldr	r3, [pc, #100]	; (8005cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	4916      	ldr	r1, [pc, #88]	; (8005cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0308 	and.w	r3, r3, #8
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d009      	beq.n	8005c9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c86:	4b12      	ldr	r3, [pc, #72]	; (8005cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	490e      	ldr	r1, [pc, #56]	; (8005cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c9a:	f000 f821 	bl	8005ce0 <HAL_RCC_GetSysClockFreq>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	091b      	lsrs	r3, r3, #4
 8005ca6:	f003 030f 	and.w	r3, r3, #15
 8005caa:	490a      	ldr	r1, [pc, #40]	; (8005cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8005cac:	5ccb      	ldrb	r3, [r1, r3]
 8005cae:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb2:	4a09      	ldr	r2, [pc, #36]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005cb6:	4b09      	ldr	r3, [pc, #36]	; (8005cdc <HAL_RCC_ClockConfig+0x1c8>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fb fefc 	bl	8001ab8 <HAL_InitTick>

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	40023c00 	.word	0x40023c00
 8005cd0:	40023800 	.word	0x40023800
 8005cd4:	0800a938 	.word	0x0800a938
 8005cd8:	20000008 	.word	0x20000008
 8005cdc:	2000000c 	.word	0x2000000c

08005ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ce4:	b094      	sub	sp, #80	; 0x50
 8005ce6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	647b      	str	r3, [r7, #68]	; 0x44
 8005cec:	2300      	movs	r3, #0
 8005cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cf8:	4b79      	ldr	r3, [pc, #484]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f003 030c 	and.w	r3, r3, #12
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d00d      	beq.n	8005d20 <HAL_RCC_GetSysClockFreq+0x40>
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	f200 80e1 	bhi.w	8005ecc <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d002      	beq.n	8005d14 <HAL_RCC_GetSysClockFreq+0x34>
 8005d0e:	2b04      	cmp	r3, #4
 8005d10:	d003      	beq.n	8005d1a <HAL_RCC_GetSysClockFreq+0x3a>
 8005d12:	e0db      	b.n	8005ecc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d14:	4b73      	ldr	r3, [pc, #460]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d16:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005d18:	e0db      	b.n	8005ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d1a:	4b73      	ldr	r3, [pc, #460]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d1e:	e0d8      	b.n	8005ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d20:	4b6f      	ldr	r3, [pc, #444]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d28:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d2a:	4b6d      	ldr	r3, [pc, #436]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d063      	beq.n	8005dfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d36:	4b6a      	ldr	r3, [pc, #424]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	099b      	lsrs	r3, r3, #6
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d48:	633b      	str	r3, [r7, #48]	; 0x30
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005d52:	4622      	mov	r2, r4
 8005d54:	462b      	mov	r3, r5
 8005d56:	f04f 0000 	mov.w	r0, #0
 8005d5a:	f04f 0100 	mov.w	r1, #0
 8005d5e:	0159      	lsls	r1, r3, #5
 8005d60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d64:	0150      	lsls	r0, r2, #5
 8005d66:	4602      	mov	r2, r0
 8005d68:	460b      	mov	r3, r1
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	1a51      	subs	r1, r2, r1
 8005d6e:	6139      	str	r1, [r7, #16]
 8005d70:	4629      	mov	r1, r5
 8005d72:	eb63 0301 	sbc.w	r3, r3, r1
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	f04f 0200 	mov.w	r2, #0
 8005d7c:	f04f 0300 	mov.w	r3, #0
 8005d80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d84:	4659      	mov	r1, fp
 8005d86:	018b      	lsls	r3, r1, #6
 8005d88:	4651      	mov	r1, sl
 8005d8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d8e:	4651      	mov	r1, sl
 8005d90:	018a      	lsls	r2, r1, #6
 8005d92:	4651      	mov	r1, sl
 8005d94:	ebb2 0801 	subs.w	r8, r2, r1
 8005d98:	4659      	mov	r1, fp
 8005d9a:	eb63 0901 	sbc.w	r9, r3, r1
 8005d9e:	f04f 0200 	mov.w	r2, #0
 8005da2:	f04f 0300 	mov.w	r3, #0
 8005da6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005daa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005db2:	4690      	mov	r8, r2
 8005db4:	4699      	mov	r9, r3
 8005db6:	4623      	mov	r3, r4
 8005db8:	eb18 0303 	adds.w	r3, r8, r3
 8005dbc:	60bb      	str	r3, [r7, #8]
 8005dbe:	462b      	mov	r3, r5
 8005dc0:	eb49 0303 	adc.w	r3, r9, r3
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	f04f 0200 	mov.w	r2, #0
 8005dca:	f04f 0300 	mov.w	r3, #0
 8005dce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005dd2:	4629      	mov	r1, r5
 8005dd4:	024b      	lsls	r3, r1, #9
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ddc:	4621      	mov	r1, r4
 8005dde:	024a      	lsls	r2, r1, #9
 8005de0:	4610      	mov	r0, r2
 8005de2:	4619      	mov	r1, r3
 8005de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de6:	2200      	movs	r2, #0
 8005de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005df0:	f7fa fee2 	bl	8000bb8 <__aeabi_uldivmod>
 8005df4:	4602      	mov	r2, r0
 8005df6:	460b      	mov	r3, r1
 8005df8:	4613      	mov	r3, r2
 8005dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dfc:	e058      	b.n	8005eb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dfe:	4b38      	ldr	r3, [pc, #224]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	099b      	lsrs	r3, r3, #6
 8005e04:	2200      	movs	r2, #0
 8005e06:	4618      	mov	r0, r3
 8005e08:	4611      	mov	r1, r2
 8005e0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e0e:	623b      	str	r3, [r7, #32]
 8005e10:	2300      	movs	r3, #0
 8005e12:	627b      	str	r3, [r7, #36]	; 0x24
 8005e14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e18:	4642      	mov	r2, r8
 8005e1a:	464b      	mov	r3, r9
 8005e1c:	f04f 0000 	mov.w	r0, #0
 8005e20:	f04f 0100 	mov.w	r1, #0
 8005e24:	0159      	lsls	r1, r3, #5
 8005e26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e2a:	0150      	lsls	r0, r2, #5
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4641      	mov	r1, r8
 8005e32:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e36:	4649      	mov	r1, r9
 8005e38:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e3c:	f04f 0200 	mov.w	r2, #0
 8005e40:	f04f 0300 	mov.w	r3, #0
 8005e44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e50:	ebb2 040a 	subs.w	r4, r2, sl
 8005e54:	eb63 050b 	sbc.w	r5, r3, fp
 8005e58:	f04f 0200 	mov.w	r2, #0
 8005e5c:	f04f 0300 	mov.w	r3, #0
 8005e60:	00eb      	lsls	r3, r5, #3
 8005e62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e66:	00e2      	lsls	r2, r4, #3
 8005e68:	4614      	mov	r4, r2
 8005e6a:	461d      	mov	r5, r3
 8005e6c:	4643      	mov	r3, r8
 8005e6e:	18e3      	adds	r3, r4, r3
 8005e70:	603b      	str	r3, [r7, #0]
 8005e72:	464b      	mov	r3, r9
 8005e74:	eb45 0303 	adc.w	r3, r5, r3
 8005e78:	607b      	str	r3, [r7, #4]
 8005e7a:	f04f 0200 	mov.w	r2, #0
 8005e7e:	f04f 0300 	mov.w	r3, #0
 8005e82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e86:	4629      	mov	r1, r5
 8005e88:	028b      	lsls	r3, r1, #10
 8005e8a:	4621      	mov	r1, r4
 8005e8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e90:	4621      	mov	r1, r4
 8005e92:	028a      	lsls	r2, r1, #10
 8005e94:	4610      	mov	r0, r2
 8005e96:	4619      	mov	r1, r3
 8005e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	61bb      	str	r3, [r7, #24]
 8005e9e:	61fa      	str	r2, [r7, #28]
 8005ea0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ea4:	f7fa fe88 	bl	8000bb8 <__aeabi_uldivmod>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4613      	mov	r3, r2
 8005eae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005eb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	0c1b      	lsrs	r3, r3, #16
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	3301      	adds	r3, #1
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005ec0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005eca:	e002      	b.n	8005ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ecc:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ece:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3750      	adds	r7, #80	; 0x50
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ede:	bf00      	nop
 8005ee0:	40023800 	.word	0x40023800
 8005ee4:	00f42400 	.word	0x00f42400
 8005ee8:	007a1200 	.word	0x007a1200

08005eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ef0:	4b03      	ldr	r3, [pc, #12]	; (8005f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	20000008 	.word	0x20000008

08005f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f08:	f7ff fff0 	bl	8005eec <HAL_RCC_GetHCLKFreq>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	0a9b      	lsrs	r3, r3, #10
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	4903      	ldr	r1, [pc, #12]	; (8005f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f1a:	5ccb      	ldrb	r3, [r1, r3]
 8005f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	40023800 	.word	0x40023800
 8005f28:	0800a948 	.word	0x0800a948

08005f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f30:	f7ff ffdc 	bl	8005eec <HAL_RCC_GetHCLKFreq>
 8005f34:	4602      	mov	r2, r0
 8005f36:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	0b5b      	lsrs	r3, r3, #13
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	4903      	ldr	r1, [pc, #12]	; (8005f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f42:	5ccb      	ldrb	r3, [r1, r3]
 8005f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	40023800 	.word	0x40023800
 8005f50:	0800a948 	.word	0x0800a948

08005f54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d001      	beq.n	8005f6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e044      	b.n	8005ff6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68da      	ldr	r2, [r3, #12]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f042 0201 	orr.w	r2, r2, #1
 8005f82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a1e      	ldr	r2, [pc, #120]	; (8006004 <HAL_TIM_Base_Start_IT+0xb0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d018      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x6c>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f96:	d013      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x6c>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a1a      	ldr	r2, [pc, #104]	; (8006008 <HAL_TIM_Base_Start_IT+0xb4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d00e      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x6c>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a19      	ldr	r2, [pc, #100]	; (800600c <HAL_TIM_Base_Start_IT+0xb8>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d009      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x6c>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a17      	ldr	r2, [pc, #92]	; (8006010 <HAL_TIM_Base_Start_IT+0xbc>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d004      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x6c>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a16      	ldr	r2, [pc, #88]	; (8006014 <HAL_TIM_Base_Start_IT+0xc0>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d111      	bne.n	8005fe4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b06      	cmp	r3, #6
 8005fd0:	d010      	beq.n	8005ff4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f042 0201 	orr.w	r2, r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fe2:	e007      	b.n	8005ff4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f042 0201 	orr.w	r2, r2, #1
 8005ff2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40010000 	.word	0x40010000
 8006008:	40000400 	.word	0x40000400
 800600c:	40000800 	.word	0x40000800
 8006010:	40000c00 	.word	0x40000c00
 8006014:	40014000 	.word	0x40014000

08006018 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e041      	b.n	80060ae <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d106      	bne.n	8006044 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7fb fb08 	bl	8001654 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3304      	adds	r3, #4
 8006054:	4619      	mov	r1, r3
 8006056:	4610      	mov	r0, r2
 8006058:	f000 f9ba 	bl	80063d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b082      	sub	sp, #8
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d122      	bne.n	8006112 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d11b      	bne.n	8006112 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f06f 0202 	mvn.w	r2, #2
 80060e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	f003 0303 	and.w	r3, r3, #3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d003      	beq.n	8006100 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f94b 	bl	8006394 <HAL_TIM_IC_CaptureCallback>
 80060fe:	e005      	b.n	800610c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f93d 	bl	8006380 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f94e 	bl	80063a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	f003 0304 	and.w	r3, r3, #4
 800611c:	2b04      	cmp	r3, #4
 800611e:	d122      	bne.n	8006166 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	2b04      	cmp	r3, #4
 800612c:	d11b      	bne.n	8006166 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f06f 0204 	mvn.w	r2, #4
 8006136:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f921 	bl	8006394 <HAL_TIM_IC_CaptureCallback>
 8006152:	e005      	b.n	8006160 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f913 	bl	8006380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f924 	bl	80063a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	f003 0308 	and.w	r3, r3, #8
 8006170:	2b08      	cmp	r3, #8
 8006172:	d122      	bne.n	80061ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f003 0308 	and.w	r3, r3, #8
 800617e:	2b08      	cmp	r3, #8
 8006180:	d11b      	bne.n	80061ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f06f 0208 	mvn.w	r2, #8
 800618a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2204      	movs	r2, #4
 8006190:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	f003 0303 	and.w	r3, r3, #3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f8f7 	bl	8006394 <HAL_TIM_IC_CaptureCallback>
 80061a6:	e005      	b.n	80061b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f8e9 	bl	8006380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f8fa 	bl	80063a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	f003 0310 	and.w	r3, r3, #16
 80061c4:	2b10      	cmp	r3, #16
 80061c6:	d122      	bne.n	800620e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f003 0310 	and.w	r3, r3, #16
 80061d2:	2b10      	cmp	r3, #16
 80061d4:	d11b      	bne.n	800620e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f06f 0210 	mvn.w	r2, #16
 80061de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2208      	movs	r2, #8
 80061e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d003      	beq.n	80061fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f8cd 	bl	8006394 <HAL_TIM_IC_CaptureCallback>
 80061fa:	e005      	b.n	8006208 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f8bf 	bl	8006380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f8d0 	bl	80063a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b01      	cmp	r3, #1
 800621a:	d10e      	bne.n	800623a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b01      	cmp	r3, #1
 8006228:	d107      	bne.n	800623a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f06f 0201 	mvn.w	r2, #1
 8006232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7fb f8cf 	bl	80013d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006244:	2b80      	cmp	r3, #128	; 0x80
 8006246:	d10e      	bne.n	8006266 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006252:	2b80      	cmp	r3, #128	; 0x80
 8006254:	d107      	bne.n	8006266 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800625e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fb39 	bl	80068d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006270:	2b40      	cmp	r3, #64	; 0x40
 8006272:	d10e      	bne.n	8006292 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627e:	2b40      	cmp	r3, #64	; 0x40
 8006280:	d107      	bne.n	8006292 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800628a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f895 	bl	80063bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	f003 0320 	and.w	r3, r3, #32
 800629c:	2b20      	cmp	r3, #32
 800629e:	d10e      	bne.n	80062be <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b20      	cmp	r3, #32
 80062ac:	d107      	bne.n	80062be <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f06f 0220 	mvn.w	r2, #32
 80062b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fb03 	bl	80068c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062be:	bf00      	nop
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
	...

080062c8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062d4:	2300      	movs	r3, #0
 80062d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d101      	bne.n	80062e6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80062e2:	2302      	movs	r3, #2
 80062e4:	e048      	b.n	8006378 <HAL_TIM_OC_ConfigChannel+0xb0>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b0c      	cmp	r3, #12
 80062f2:	d839      	bhi.n	8006368 <HAL_TIM_OC_ConfigChannel+0xa0>
 80062f4:	a201      	add	r2, pc, #4	; (adr r2, 80062fc <HAL_TIM_OC_ConfigChannel+0x34>)
 80062f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fa:	bf00      	nop
 80062fc:	08006331 	.word	0x08006331
 8006300:	08006369 	.word	0x08006369
 8006304:	08006369 	.word	0x08006369
 8006308:	08006369 	.word	0x08006369
 800630c:	0800633f 	.word	0x0800633f
 8006310:	08006369 	.word	0x08006369
 8006314:	08006369 	.word	0x08006369
 8006318:	08006369 	.word	0x08006369
 800631c:	0800634d 	.word	0x0800634d
 8006320:	08006369 	.word	0x08006369
 8006324:	08006369 	.word	0x08006369
 8006328:	08006369 	.word	0x08006369
 800632c:	0800635b 	.word	0x0800635b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68b9      	ldr	r1, [r7, #8]
 8006336:	4618      	mov	r0, r3
 8006338:	f000 f8ca 	bl	80064d0 <TIM_OC1_SetConfig>
      break;
 800633c:	e017      	b.n	800636e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68b9      	ldr	r1, [r7, #8]
 8006344:	4618      	mov	r0, r3
 8006346:	f000 f929 	bl	800659c <TIM_OC2_SetConfig>
      break;
 800634a:	e010      	b.n	800636e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68b9      	ldr	r1, [r7, #8]
 8006352:	4618      	mov	r0, r3
 8006354:	f000 f98e 	bl	8006674 <TIM_OC3_SetConfig>
      break;
 8006358:	e009      	b.n	800636e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68b9      	ldr	r1, [r7, #8]
 8006360:	4618      	mov	r0, r3
 8006362:	f000 f9f1 	bl	8006748 <TIM_OC4_SetConfig>
      break;
 8006366:	e002      	b.n	800636e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	75fb      	strb	r3, [r7, #23]
      break;
 800636c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006376:	7dfb      	ldrb	r3, [r7, #23]
}
 8006378:	4618      	mov	r0, r3
 800637a:	3718      	adds	r7, #24
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a34      	ldr	r2, [pc, #208]	; (80064b4 <TIM_Base_SetConfig+0xe4>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d00f      	beq.n	8006408 <TIM_Base_SetConfig+0x38>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ee:	d00b      	beq.n	8006408 <TIM_Base_SetConfig+0x38>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a31      	ldr	r2, [pc, #196]	; (80064b8 <TIM_Base_SetConfig+0xe8>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d007      	beq.n	8006408 <TIM_Base_SetConfig+0x38>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a30      	ldr	r2, [pc, #192]	; (80064bc <TIM_Base_SetConfig+0xec>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d003      	beq.n	8006408 <TIM_Base_SetConfig+0x38>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a2f      	ldr	r2, [pc, #188]	; (80064c0 <TIM_Base_SetConfig+0xf0>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d108      	bne.n	800641a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800640e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	4313      	orrs	r3, r2
 8006418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a25      	ldr	r2, [pc, #148]	; (80064b4 <TIM_Base_SetConfig+0xe4>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d01b      	beq.n	800645a <TIM_Base_SetConfig+0x8a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006428:	d017      	beq.n	800645a <TIM_Base_SetConfig+0x8a>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a22      	ldr	r2, [pc, #136]	; (80064b8 <TIM_Base_SetConfig+0xe8>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d013      	beq.n	800645a <TIM_Base_SetConfig+0x8a>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a21      	ldr	r2, [pc, #132]	; (80064bc <TIM_Base_SetConfig+0xec>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d00f      	beq.n	800645a <TIM_Base_SetConfig+0x8a>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a20      	ldr	r2, [pc, #128]	; (80064c0 <TIM_Base_SetConfig+0xf0>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d00b      	beq.n	800645a <TIM_Base_SetConfig+0x8a>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a1f      	ldr	r2, [pc, #124]	; (80064c4 <TIM_Base_SetConfig+0xf4>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d007      	beq.n	800645a <TIM_Base_SetConfig+0x8a>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a1e      	ldr	r2, [pc, #120]	; (80064c8 <TIM_Base_SetConfig+0xf8>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d003      	beq.n	800645a <TIM_Base_SetConfig+0x8a>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a1d      	ldr	r2, [pc, #116]	; (80064cc <TIM_Base_SetConfig+0xfc>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d108      	bne.n	800646c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	4313      	orrs	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	4313      	orrs	r3, r2
 8006478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a08      	ldr	r2, [pc, #32]	; (80064b4 <TIM_Base_SetConfig+0xe4>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d103      	bne.n	80064a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	615a      	str	r2, [r3, #20]
}
 80064a6:	bf00      	nop
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	40010000 	.word	0x40010000
 80064b8:	40000400 	.word	0x40000400
 80064bc:	40000800 	.word	0x40000800
 80064c0:	40000c00 	.word	0x40000c00
 80064c4:	40014000 	.word	0x40014000
 80064c8:	40014400 	.word	0x40014400
 80064cc:	40014800 	.word	0x40014800

080064d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	f023 0201 	bic.w	r2, r3, #1
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f023 0303 	bic.w	r3, r3, #3
 8006506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4313      	orrs	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f023 0302 	bic.w	r3, r3, #2
 8006518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	4313      	orrs	r3, r2
 8006522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a1c      	ldr	r2, [pc, #112]	; (8006598 <TIM_OC1_SetConfig+0xc8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d10c      	bne.n	8006546 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f023 0308 	bic.w	r3, r3, #8
 8006532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	4313      	orrs	r3, r2
 800653c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f023 0304 	bic.w	r3, r3, #4
 8006544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a13      	ldr	r2, [pc, #76]	; (8006598 <TIM_OC1_SetConfig+0xc8>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d111      	bne.n	8006572 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800655c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	4313      	orrs	r3, r2
 8006566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	4313      	orrs	r3, r2
 8006570:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	621a      	str	r2, [r3, #32]
}
 800658c:	bf00      	nop
 800658e:	371c      	adds	r7, #28
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	40010000 	.word	0x40010000

0800659c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	f023 0210 	bic.w	r2, r3, #16
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	021b      	lsls	r3, r3, #8
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f023 0320 	bic.w	r3, r3, #32
 80065e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	011b      	lsls	r3, r3, #4
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a1e      	ldr	r2, [pc, #120]	; (8006670 <TIM_OC2_SetConfig+0xd4>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d10d      	bne.n	8006618 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	4313      	orrs	r3, r2
 800660e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006616:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a15      	ldr	r2, [pc, #84]	; (8006670 <TIM_OC2_SetConfig+0xd4>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d113      	bne.n	8006648 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006626:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800662e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	4313      	orrs	r3, r2
 800663a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	4313      	orrs	r3, r2
 8006646:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	621a      	str	r2, [r3, #32]
}
 8006662:	bf00      	nop
 8006664:	371c      	adds	r7, #28
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	40010000 	.word	0x40010000

08006674 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0303 	bic.w	r3, r3, #3
 80066aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	021b      	lsls	r3, r3, #8
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a1d      	ldr	r2, [pc, #116]	; (8006744 <TIM_OC3_SetConfig+0xd0>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d10d      	bne.n	80066ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a14      	ldr	r2, [pc, #80]	; (8006744 <TIM_OC3_SetConfig+0xd0>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d113      	bne.n	800671e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	011b      	lsls	r3, r3, #4
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	4313      	orrs	r3, r2
 8006710:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	011b      	lsls	r3, r3, #4
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	4313      	orrs	r3, r2
 800671c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	621a      	str	r2, [r3, #32]
}
 8006738:	bf00      	nop
 800673a:	371c      	adds	r7, #28
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	40010000 	.word	0x40010000

08006748 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800677e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	021b      	lsls	r3, r3, #8
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	031b      	lsls	r3, r3, #12
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	4313      	orrs	r3, r2
 800679e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a10      	ldr	r2, [pc, #64]	; (80067e4 <TIM_OC4_SetConfig+0x9c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d109      	bne.n	80067bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	019b      	lsls	r3, r3, #6
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	621a      	str	r2, [r3, #32]
}
 80067d6:	bf00      	nop
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	40010000 	.word	0x40010000

080067e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d101      	bne.n	8006800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067fc:	2302      	movs	r3, #2
 80067fe:	e050      	b.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a1c      	ldr	r2, [pc, #112]	; (80068b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d018      	beq.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800684c:	d013      	beq.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a18      	ldr	r2, [pc, #96]	; (80068b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d00e      	beq.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a16      	ldr	r2, [pc, #88]	; (80068b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d009      	beq.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a15      	ldr	r2, [pc, #84]	; (80068bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d004      	beq.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a13      	ldr	r2, [pc, #76]	; (80068c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d10c      	bne.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800687c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	4313      	orrs	r3, r2
 8006886:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	40010000 	.word	0x40010000
 80068b4:	40000400 	.word	0x40000400
 80068b8:	40000800 	.word	0x40000800
 80068bc:	40000c00 	.word	0x40000c00
 80068c0:	40014000 	.word	0x40014000

080068c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068cc:	bf00      	nop
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e03f      	b.n	800697e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d106      	bne.n	8006918 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7fa fec4 	bl	80016a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2224      	movs	r2, #36	; 0x24
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68da      	ldr	r2, [r3, #12]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800692e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fed1 	bl	80076d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	691a      	ldr	r2, [r3, #16]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006944:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	695a      	ldr	r2, [r3, #20]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006954:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68da      	ldr	r2, [r3, #12]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006964:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2220      	movs	r2, #32
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2220      	movs	r2, #32
 8006978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b08a      	sub	sp, #40	; 0x28
 800698a:	af02      	add	r7, sp, #8
 800698c:	60f8      	str	r0, [r7, #12]
 800698e:	60b9      	str	r1, [r7, #8]
 8006990:	603b      	str	r3, [r7, #0]
 8006992:	4613      	mov	r3, r2
 8006994:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b20      	cmp	r3, #32
 80069a4:	d17c      	bne.n	8006aa0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d002      	beq.n	80069b2 <HAL_UART_Transmit+0x2c>
 80069ac:	88fb      	ldrh	r3, [r7, #6]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d101      	bne.n	80069b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e075      	b.n	8006aa2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d101      	bne.n	80069c4 <HAL_UART_Transmit+0x3e>
 80069c0:	2302      	movs	r3, #2
 80069c2:	e06e      	b.n	8006aa2 <HAL_UART_Transmit+0x11c>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2221      	movs	r2, #33	; 0x21
 80069d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069da:	f7fb f8b1 	bl	8001b40 <HAL_GetTick>
 80069de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	88fa      	ldrh	r2, [r7, #6]
 80069e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	88fa      	ldrh	r2, [r7, #6]
 80069ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f4:	d108      	bne.n	8006a08 <HAL_UART_Transmit+0x82>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d104      	bne.n	8006a08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80069fe:	2300      	movs	r3, #0
 8006a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	61bb      	str	r3, [r7, #24]
 8006a06:	e003      	b.n	8006a10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006a18:	e02a      	b.n	8006a70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2200      	movs	r2, #0
 8006a22:	2180      	movs	r1, #128	; 0x80
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 fc26 	bl	8007276 <UART_WaitOnFlagUntilTimeout>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e036      	b.n	8006aa2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10b      	bne.n	8006a52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	3302      	adds	r3, #2
 8006a4e:	61bb      	str	r3, [r7, #24]
 8006a50:	e007      	b.n	8006a62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	781a      	ldrb	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1cf      	bne.n	8006a1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	2200      	movs	r2, #0
 8006a82:	2140      	movs	r1, #64	; 0x40
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 fbf6 	bl	8007276 <UART_WaitOnFlagUntilTimeout>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e006      	b.n	8006aa2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2220      	movs	r2, #32
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	e000      	b.n	8006aa2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006aa0:	2302      	movs	r3, #2
  }
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3720      	adds	r7, #32
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b08c      	sub	sp, #48	; 0x30
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b20      	cmp	r3, #32
 8006ac4:	d165      	bne.n	8006b92 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d002      	beq.n	8006ad2 <HAL_UART_Transmit_DMA+0x26>
 8006acc:	88fb      	ldrh	r3, [r7, #6]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e05e      	b.n	8006b94 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d101      	bne.n	8006ae4 <HAL_UART_Transmit_DMA+0x38>
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	e057      	b.n	8006b94 <HAL_UART_Transmit_DMA+0xe8>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	88fa      	ldrh	r2, [r7, #6]
 8006af6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	88fa      	ldrh	r2, [r7, #6]
 8006afc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2221      	movs	r2, #33	; 0x21
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b10:	4a22      	ldr	r2, [pc, #136]	; (8006b9c <HAL_UART_Transmit_DMA+0xf0>)
 8006b12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b18:	4a21      	ldr	r2, [pc, #132]	; (8006ba0 <HAL_UART_Transmit_DMA+0xf4>)
 8006b1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b20:	4a20      	ldr	r2, [pc, #128]	; (8006ba4 <HAL_UART_Transmit_DMA+0xf8>)
 8006b22:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b28:	2200      	movs	r2, #0
 8006b2a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006b2c:	f107 0308 	add.w	r3, r7, #8
 8006b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b38:	6819      	ldr	r1, [r3, #0]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3304      	adds	r3, #4
 8006b40:	461a      	mov	r2, r3
 8006b42:	88fb      	ldrh	r3, [r7, #6]
 8006b44:	f7fb f9c8 	bl	8001ed8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b50:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3314      	adds	r3, #20
 8006b60:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	617b      	str	r3, [r7, #20]
   return(result);
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b70:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3314      	adds	r3, #20
 8006b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b7a:	627a      	str	r2, [r7, #36]	; 0x24
 8006b7c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7e:	6a39      	ldr	r1, [r7, #32]
 8006b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b82:	e841 2300 	strex	r3, r2, [r1]
 8006b86:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1e5      	bne.n	8006b5a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	e000      	b.n	8006b94 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006b92:	2302      	movs	r3, #2
  }
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3730      	adds	r7, #48	; 0x30
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	0800712d 	.word	0x0800712d
 8006ba0:	080071c7 	.word	0x080071c7
 8006ba4:	080071e3 	.word	0x080071e3

08006ba8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b0ba      	sub	sp, #232	; 0xe8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bde:	f003 030f 	and.w	r3, r3, #15
 8006be2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006be6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10f      	bne.n	8006c0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf2:	f003 0320 	and.w	r3, r3, #32
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d009      	beq.n	8006c0e <HAL_UART_IRQHandler+0x66>
 8006bfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bfe:	f003 0320 	and.w	r3, r3, #32
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fcaa 	bl	8007560 <UART_Receive_IT>
      return;
 8006c0c:	e256      	b.n	80070bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006c0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f000 80de 	beq.w	8006dd4 <HAL_UART_IRQHandler+0x22c>
 8006c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d106      	bne.n	8006c32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c28:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 80d1 	beq.w	8006dd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00b      	beq.n	8006c56 <HAL_UART_IRQHandler+0xae>
 8006c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d005      	beq.n	8006c56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4e:	f043 0201 	orr.w	r2, r3, #1
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c5a:	f003 0304 	and.w	r3, r3, #4
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00b      	beq.n	8006c7a <HAL_UART_IRQHandler+0xd2>
 8006c62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d005      	beq.n	8006c7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c72:	f043 0202 	orr.w	r2, r3, #2
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00b      	beq.n	8006c9e <HAL_UART_IRQHandler+0xf6>
 8006c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d005      	beq.n	8006c9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	f043 0204 	orr.w	r2, r3, #4
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca2:	f003 0308 	and.w	r3, r3, #8
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d011      	beq.n	8006cce <HAL_UART_IRQHandler+0x126>
 8006caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cae:	f003 0320 	and.w	r3, r3, #32
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d105      	bne.n	8006cc2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d005      	beq.n	8006cce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	f043 0208 	orr.w	r2, r3, #8
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 81ed 	beq.w	80070b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cdc:	f003 0320 	and.w	r3, r3, #32
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d008      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x14e>
 8006ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ce8:	f003 0320 	and.w	r3, r3, #32
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d002      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fc35 	bl	8007560 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d00:	2b40      	cmp	r3, #64	; 0x40
 8006d02:	bf0c      	ite	eq
 8006d04:	2301      	moveq	r3, #1
 8006d06:	2300      	movne	r3, #0
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d12:	f003 0308 	and.w	r3, r3, #8
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d103      	bne.n	8006d22 <HAL_UART_IRQHandler+0x17a>
 8006d1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d04f      	beq.n	8006dc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fb3d 	bl	80073a2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d32:	2b40      	cmp	r3, #64	; 0x40
 8006d34:	d141      	bne.n	8006dba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3314      	adds	r3, #20
 8006d3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d44:	e853 3f00 	ldrex	r3, [r3]
 8006d48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3314      	adds	r3, #20
 8006d5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d72:	e841 2300 	strex	r3, r2, [r1]
 8006d76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1d9      	bne.n	8006d36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d013      	beq.n	8006db2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	4a7d      	ldr	r2, [pc, #500]	; (8006f84 <HAL_UART_IRQHandler+0x3dc>)
 8006d90:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fb f966 	bl	8002068 <HAL_DMA_Abort_IT>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d016      	beq.n	8006dd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006dac:	4610      	mov	r0, r2
 8006dae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db0:	e00e      	b.n	8006dd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f9a4 	bl	8007100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db8:	e00a      	b.n	8006dd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f9a0 	bl	8007100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc0:	e006      	b.n	8006dd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f99c 	bl	8007100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006dce:	e170      	b.n	80070b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd0:	bf00      	nop
    return;
 8006dd2:	e16e      	b.n	80070b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	f040 814a 	bne.w	8007072 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de2:	f003 0310 	and.w	r3, r3, #16
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f000 8143 	beq.w	8007072 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df0:	f003 0310 	and.w	r3, r3, #16
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 813c 	beq.w	8007072 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60bb      	str	r3, [r7, #8]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	60bb      	str	r3, [r7, #8]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	60bb      	str	r3, [r7, #8]
 8006e0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e1a:	2b40      	cmp	r3, #64	; 0x40
 8006e1c:	f040 80b4 	bne.w	8006f88 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 8140 	beq.w	80070b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	f080 8139 	bcs.w	80070b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e4a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e56:	f000 8088 	beq.w	8006f6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	330c      	adds	r3, #12
 8006e60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	330c      	adds	r3, #12
 8006e82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006e86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1d9      	bne.n	8006e5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	3314      	adds	r3, #20
 8006eac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eb0:	e853 3f00 	ldrex	r3, [r3]
 8006eb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006eb8:	f023 0301 	bic.w	r3, r3, #1
 8006ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3314      	adds	r3, #20
 8006ec6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006eca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ece:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ed2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ed6:	e841 2300 	strex	r3, r2, [r1]
 8006eda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1e1      	bne.n	8006ea6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	3314      	adds	r3, #20
 8006ee8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006eec:	e853 3f00 	ldrex	r3, [r3]
 8006ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3314      	adds	r3, #20
 8006f02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f0e:	e841 2300 	strex	r3, r2, [r1]
 8006f12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1e3      	bne.n	8006ee2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	330c      	adds	r3, #12
 8006f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f32:	e853 3f00 	ldrex	r3, [r3]
 8006f36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f3a:	f023 0310 	bic.w	r3, r3, #16
 8006f3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	330c      	adds	r3, #12
 8006f48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006f4c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006f4e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f54:	e841 2300 	strex	r3, r2, [r1]
 8006f58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1e3      	bne.n	8006f28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fb f80f 	bl	8001f88 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	4619      	mov	r1, r3
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f8ca 	bl	8007114 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f80:	e099      	b.n	80070b6 <HAL_UART_IRQHandler+0x50e>
 8006f82:	bf00      	nop
 8006f84:	08007469 	.word	0x08007469
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f000 808b 	beq.w	80070ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006fa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 8086 	beq.w	80070ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	330c      	adds	r3, #12
 8006fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb8:	e853 3f00 	ldrex	r3, [r3]
 8006fbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	330c      	adds	r3, #12
 8006fce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006fd2:	647a      	str	r2, [r7, #68]	; 0x44
 8006fd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fda:	e841 2300 	strex	r3, r2, [r1]
 8006fde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1e3      	bne.n	8006fae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3314      	adds	r3, #20
 8006fec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	f023 0301 	bic.w	r3, r3, #1
 8006ffc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3314      	adds	r3, #20
 8007006:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800700a:	633a      	str	r2, [r7, #48]	; 0x30
 800700c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007012:	e841 2300 	strex	r3, r2, [r1]
 8007016:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1e3      	bne.n	8006fe6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2220      	movs	r2, #32
 8007022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	330c      	adds	r3, #12
 8007032:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	e853 3f00 	ldrex	r3, [r3]
 800703a:	60fb      	str	r3, [r7, #12]
   return(result);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f023 0310 	bic.w	r3, r3, #16
 8007042:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	330c      	adds	r3, #12
 800704c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007050:	61fa      	str	r2, [r7, #28]
 8007052:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007054:	69b9      	ldr	r1, [r7, #24]
 8007056:	69fa      	ldr	r2, [r7, #28]
 8007058:	e841 2300 	strex	r3, r2, [r1]
 800705c:	617b      	str	r3, [r7, #20]
   return(result);
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1e3      	bne.n	800702c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007064:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007068:	4619      	mov	r1, r3
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f852 	bl	8007114 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007070:	e023      	b.n	80070ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800707a:	2b00      	cmp	r3, #0
 800707c:	d009      	beq.n	8007092 <HAL_UART_IRQHandler+0x4ea>
 800707e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007086:	2b00      	cmp	r3, #0
 8007088:	d003      	beq.n	8007092 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fa00 	bl	8007490 <UART_Transmit_IT>
    return;
 8007090:	e014      	b.n	80070bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00e      	beq.n	80070bc <HAL_UART_IRQHandler+0x514>
 800709e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d008      	beq.n	80070bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fa40 	bl	8007530 <UART_EndTransmit_IT>
    return;
 80070b0:	e004      	b.n	80070bc <HAL_UART_IRQHandler+0x514>
    return;
 80070b2:	bf00      	nop
 80070b4:	e002      	b.n	80070bc <HAL_UART_IRQHandler+0x514>
      return;
 80070b6:	bf00      	nop
 80070b8:	e000      	b.n	80070bc <HAL_UART_IRQHandler+0x514>
      return;
 80070ba:	bf00      	nop
  }
}
 80070bc:	37e8      	adds	r7, #232	; 0xe8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop

080070c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	460b      	mov	r3, r1
 800711e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b090      	sub	sp, #64	; 0x40
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007138:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007144:	2b00      	cmp	r3, #0
 8007146:	d137      	bne.n	80071b8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800714a:	2200      	movs	r2, #0
 800714c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800714e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	3314      	adds	r3, #20
 8007154:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007158:	e853 3f00 	ldrex	r3, [r3]
 800715c:	623b      	str	r3, [r7, #32]
   return(result);
 800715e:	6a3b      	ldr	r3, [r7, #32]
 8007160:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007164:	63bb      	str	r3, [r7, #56]	; 0x38
 8007166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3314      	adds	r3, #20
 800716c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800716e:	633a      	str	r2, [r7, #48]	; 0x30
 8007170:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007172:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007176:	e841 2300 	strex	r3, r2, [r1]
 800717a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800717c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1e5      	bne.n	800714e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	330c      	adds	r3, #12
 8007188:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	e853 3f00 	ldrex	r3, [r3]
 8007190:	60fb      	str	r3, [r7, #12]
   return(result);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007198:	637b      	str	r3, [r7, #52]	; 0x34
 800719a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	330c      	adds	r3, #12
 80071a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071a2:	61fa      	str	r2, [r7, #28]
 80071a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a6:	69b9      	ldr	r1, [r7, #24]
 80071a8:	69fa      	ldr	r2, [r7, #28]
 80071aa:	e841 2300 	strex	r3, r2, [r1]
 80071ae:	617b      	str	r3, [r7, #20]
   return(result);
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1e5      	bne.n	8007182 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071b6:	e002      	b.n	80071be <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80071b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80071ba:	f7ff ff83 	bl	80070c4 <HAL_UART_TxCpltCallback>
}
 80071be:	bf00      	nop
 80071c0:	3740      	adds	r7, #64	; 0x40
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b084      	sub	sp, #16
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f7ff ff7f 	bl	80070d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071da:	bf00      	nop
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b084      	sub	sp, #16
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80071ea:	2300      	movs	r3, #0
 80071ec:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071fe:	2b80      	cmp	r3, #128	; 0x80
 8007200:	bf0c      	ite	eq
 8007202:	2301      	moveq	r3, #1
 8007204:	2300      	movne	r3, #0
 8007206:	b2db      	uxtb	r3, r3
 8007208:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b21      	cmp	r3, #33	; 0x21
 8007214:	d108      	bne.n	8007228 <UART_DMAError+0x46>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d005      	beq.n	8007228 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2200      	movs	r2, #0
 8007220:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007222:	68b8      	ldr	r0, [r7, #8]
 8007224:	f000 f895 	bl	8007352 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007232:	2b40      	cmp	r3, #64	; 0x40
 8007234:	bf0c      	ite	eq
 8007236:	2301      	moveq	r3, #1
 8007238:	2300      	movne	r3, #0
 800723a:	b2db      	uxtb	r3, r3
 800723c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b22      	cmp	r3, #34	; 0x22
 8007248:	d108      	bne.n	800725c <UART_DMAError+0x7a>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d005      	beq.n	800725c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	2200      	movs	r2, #0
 8007254:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007256:	68b8      	ldr	r0, [r7, #8]
 8007258:	f000 f8a3 	bl	80073a2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007260:	f043 0210 	orr.w	r2, r3, #16
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007268:	68b8      	ldr	r0, [r7, #8]
 800726a:	f7ff ff49 	bl	8007100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800726e:	bf00      	nop
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b090      	sub	sp, #64	; 0x40
 800727a:	af00      	add	r7, sp, #0
 800727c:	60f8      	str	r0, [r7, #12]
 800727e:	60b9      	str	r1, [r7, #8]
 8007280:	603b      	str	r3, [r7, #0]
 8007282:	4613      	mov	r3, r2
 8007284:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007286:	e050      	b.n	800732a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800728a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800728e:	d04c      	beq.n	800732a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007292:	2b00      	cmp	r3, #0
 8007294:	d007      	beq.n	80072a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8007296:	f7fa fc53 	bl	8001b40 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d241      	bcs.n	800732a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	330c      	adds	r3, #12
 80072ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b0:	e853 3f00 	ldrex	r3, [r3]
 80072b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	330c      	adds	r3, #12
 80072c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80072c6:	637a      	str	r2, [r7, #52]	; 0x34
 80072c8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1e5      	bne.n	80072a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3314      	adds	r3, #20
 80072e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	e853 3f00 	ldrex	r3, [r3]
 80072e8:	613b      	str	r3, [r7, #16]
   return(result);
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	f023 0301 	bic.w	r3, r3, #1
 80072f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	3314      	adds	r3, #20
 80072f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072fa:	623a      	str	r2, [r7, #32]
 80072fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fe:	69f9      	ldr	r1, [r7, #28]
 8007300:	6a3a      	ldr	r2, [r7, #32]
 8007302:	e841 2300 	strex	r3, r2, [r1]
 8007306:	61bb      	str	r3, [r7, #24]
   return(result);
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1e5      	bne.n	80072da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2220      	movs	r2, #32
 8007312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2220      	movs	r2, #32
 800731a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e00f      	b.n	800734a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	4013      	ands	r3, r2
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	429a      	cmp	r2, r3
 8007338:	bf0c      	ite	eq
 800733a:	2301      	moveq	r3, #1
 800733c:	2300      	movne	r3, #0
 800733e:	b2db      	uxtb	r3, r3
 8007340:	461a      	mov	r2, r3
 8007342:	79fb      	ldrb	r3, [r7, #7]
 8007344:	429a      	cmp	r2, r3
 8007346:	d09f      	beq.n	8007288 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3740      	adds	r7, #64	; 0x40
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007352:	b480      	push	{r7}
 8007354:	b089      	sub	sp, #36	; 0x24
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	330c      	adds	r3, #12
 8007360:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	e853 3f00 	ldrex	r3, [r3]
 8007368:	60bb      	str	r3, [r7, #8]
   return(result);
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007370:	61fb      	str	r3, [r7, #28]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	330c      	adds	r3, #12
 8007378:	69fa      	ldr	r2, [r7, #28]
 800737a:	61ba      	str	r2, [r7, #24]
 800737c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737e:	6979      	ldr	r1, [r7, #20]
 8007380:	69ba      	ldr	r2, [r7, #24]
 8007382:	e841 2300 	strex	r3, r2, [r1]
 8007386:	613b      	str	r3, [r7, #16]
   return(result);
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1e5      	bne.n	800735a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2220      	movs	r2, #32
 8007392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007396:	bf00      	nop
 8007398:	3724      	adds	r7, #36	; 0x24
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b095      	sub	sp, #84	; 0x54
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	330c      	adds	r3, #12
 80073b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b4:	e853 3f00 	ldrex	r3, [r3]
 80073b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	330c      	adds	r3, #12
 80073c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073ca:	643a      	str	r2, [r7, #64]	; 0x40
 80073cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073d2:	e841 2300 	strex	r3, r2, [r1]
 80073d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1e5      	bne.n	80073aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	3314      	adds	r3, #20
 80073e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e6:	6a3b      	ldr	r3, [r7, #32]
 80073e8:	e853 3f00 	ldrex	r3, [r3]
 80073ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	f023 0301 	bic.w	r3, r3, #1
 80073f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3314      	adds	r3, #20
 80073fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007400:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007406:	e841 2300 	strex	r3, r2, [r1]
 800740a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1e5      	bne.n	80073de <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007416:	2b01      	cmp	r3, #1
 8007418:	d119      	bne.n	800744e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	330c      	adds	r3, #12
 8007420:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	e853 3f00 	ldrex	r3, [r3]
 8007428:	60bb      	str	r3, [r7, #8]
   return(result);
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	f023 0310 	bic.w	r3, r3, #16
 8007430:	647b      	str	r3, [r7, #68]	; 0x44
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	330c      	adds	r3, #12
 8007438:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800743a:	61ba      	str	r2, [r7, #24]
 800743c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743e:	6979      	ldr	r1, [r7, #20]
 8007440:	69ba      	ldr	r2, [r7, #24]
 8007442:	e841 2300 	strex	r3, r2, [r1]
 8007446:	613b      	str	r3, [r7, #16]
   return(result);
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1e5      	bne.n	800741a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2220      	movs	r2, #32
 8007452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800745c:	bf00      	nop
 800745e:	3754      	adds	r7, #84	; 0x54
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007474:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f7ff fe3c 	bl	8007100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007488:	bf00      	nop
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b21      	cmp	r3, #33	; 0x21
 80074a2:	d13e      	bne.n	8007522 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ac:	d114      	bne.n	80074d8 <UART_Transmit_IT+0x48>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d110      	bne.n	80074d8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	461a      	mov	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a1b      	ldr	r3, [r3, #32]
 80074d0:	1c9a      	adds	r2, r3, #2
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	621a      	str	r2, [r3, #32]
 80074d6:	e008      	b.n	80074ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	1c59      	adds	r1, r3, #1
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6211      	str	r1, [r2, #32]
 80074e2:	781a      	ldrb	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	3b01      	subs	r3, #1
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	4619      	mov	r1, r3
 80074f8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10f      	bne.n	800751e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68da      	ldr	r2, [r3, #12]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800750c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68da      	ldr	r2, [r3, #12]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800751c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	e000      	b.n	8007524 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007522:	2302      	movs	r3, #2
  }
}
 8007524:	4618      	mov	r0, r3
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68da      	ldr	r2, [r3, #12]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007546:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2220      	movs	r2, #32
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f7ff fdb7 	bl	80070c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b08c      	sub	sp, #48	; 0x30
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b22      	cmp	r3, #34	; 0x22
 8007572:	f040 80ab 	bne.w	80076cc <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800757e:	d117      	bne.n	80075b0 <UART_Receive_IT+0x50>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d113      	bne.n	80075b0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007588:	2300      	movs	r3, #0
 800758a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007590:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	b29b      	uxth	r3, r3
 800759a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759e:	b29a      	uxth	r2, r3
 80075a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a8:	1c9a      	adds	r2, r3, #2
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	629a      	str	r2, [r3, #40]	; 0x28
 80075ae:	e026      	b.n	80075fe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80075b6:	2300      	movs	r3, #0
 80075b8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075c2:	d007      	beq.n	80075d4 <UART_Receive_IT+0x74>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d10a      	bne.n	80075e2 <UART_Receive_IT+0x82>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d106      	bne.n	80075e2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075de:	701a      	strb	r2, [r3, #0]
 80075e0:	e008      	b.n	80075f4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ee:	b2da      	uxtb	r2, r3
 80075f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f8:	1c5a      	adds	r2, r3, #1
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007602:	b29b      	uxth	r3, r3
 8007604:	3b01      	subs	r3, #1
 8007606:	b29b      	uxth	r3, r3
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	4619      	mov	r1, r3
 800760c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800760e:	2b00      	cmp	r3, #0
 8007610:	d15a      	bne.n	80076c8 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68da      	ldr	r2, [r3, #12]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f022 0220 	bic.w	r2, r2, #32
 8007620:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68da      	ldr	r2, [r3, #12]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007630:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	695a      	ldr	r2, [r3, #20]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f022 0201 	bic.w	r2, r2, #1
 8007640:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2220      	movs	r2, #32
 8007646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764e:	2b01      	cmp	r3, #1
 8007650:	d135      	bne.n	80076be <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	330c      	adds	r3, #12
 800765e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	e853 3f00 	ldrex	r3, [r3]
 8007666:	613b      	str	r3, [r7, #16]
   return(result);
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	f023 0310 	bic.w	r3, r3, #16
 800766e:	627b      	str	r3, [r7, #36]	; 0x24
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	330c      	adds	r3, #12
 8007676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007678:	623a      	str	r2, [r7, #32]
 800767a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767c:	69f9      	ldr	r1, [r7, #28]
 800767e:	6a3a      	ldr	r2, [r7, #32]
 8007680:	e841 2300 	strex	r3, r2, [r1]
 8007684:	61bb      	str	r3, [r7, #24]
   return(result);
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1e5      	bne.n	8007658 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0310 	and.w	r3, r3, #16
 8007696:	2b10      	cmp	r3, #16
 8007698:	d10a      	bne.n	80076b0 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800769a:	2300      	movs	r3, #0
 800769c:	60fb      	str	r3, [r7, #12]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	60fb      	str	r3, [r7, #12]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	60fb      	str	r3, [r7, #12]
 80076ae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076b4:	4619      	mov	r1, r3
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f7ff fd2c 	bl	8007114 <HAL_UARTEx_RxEventCallback>
 80076bc:	e002      	b.n	80076c4 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7ff fd14 	bl	80070ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80076c4:	2300      	movs	r3, #0
 80076c6:	e002      	b.n	80076ce <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80076c8:	2300      	movs	r3, #0
 80076ca:	e000      	b.n	80076ce <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80076cc:	2302      	movs	r3, #2
  }
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3730      	adds	r7, #48	; 0x30
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
	...

080076d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076dc:	b0c0      	sub	sp, #256	; 0x100
 80076de:	af00      	add	r7, sp, #0
 80076e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80076f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076f4:	68d9      	ldr	r1, [r3, #12]
 80076f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	ea40 0301 	orr.w	r3, r0, r1
 8007700:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007706:	689a      	ldr	r2, [r3, #8]
 8007708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	431a      	orrs	r2, r3
 8007710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	431a      	orrs	r2, r3
 8007718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800771c:	69db      	ldr	r3, [r3, #28]
 800771e:	4313      	orrs	r3, r2
 8007720:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007730:	f021 010c 	bic.w	r1, r1, #12
 8007734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800773e:	430b      	orrs	r3, r1
 8007740:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800774e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007752:	6999      	ldr	r1, [r3, #24]
 8007754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	ea40 0301 	orr.w	r3, r0, r1
 800775e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	4b8f      	ldr	r3, [pc, #572]	; (80079a4 <UART_SetConfig+0x2cc>)
 8007768:	429a      	cmp	r2, r3
 800776a:	d005      	beq.n	8007778 <UART_SetConfig+0xa0>
 800776c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	4b8d      	ldr	r3, [pc, #564]	; (80079a8 <UART_SetConfig+0x2d0>)
 8007774:	429a      	cmp	r2, r3
 8007776:	d104      	bne.n	8007782 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007778:	f7fe fbd8 	bl	8005f2c <HAL_RCC_GetPCLK2Freq>
 800777c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007780:	e003      	b.n	800778a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007782:	f7fe fbbf 	bl	8005f04 <HAL_RCC_GetPCLK1Freq>
 8007786:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800778a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007794:	f040 810c 	bne.w	80079b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800779c:	2200      	movs	r2, #0
 800779e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80077a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80077a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80077aa:	4622      	mov	r2, r4
 80077ac:	462b      	mov	r3, r5
 80077ae:	1891      	adds	r1, r2, r2
 80077b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80077b2:	415b      	adcs	r3, r3
 80077b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80077ba:	4621      	mov	r1, r4
 80077bc:	eb12 0801 	adds.w	r8, r2, r1
 80077c0:	4629      	mov	r1, r5
 80077c2:	eb43 0901 	adc.w	r9, r3, r1
 80077c6:	f04f 0200 	mov.w	r2, #0
 80077ca:	f04f 0300 	mov.w	r3, #0
 80077ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077da:	4690      	mov	r8, r2
 80077dc:	4699      	mov	r9, r3
 80077de:	4623      	mov	r3, r4
 80077e0:	eb18 0303 	adds.w	r3, r8, r3
 80077e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80077e8:	462b      	mov	r3, r5
 80077ea:	eb49 0303 	adc.w	r3, r9, r3
 80077ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80077fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007802:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007806:	460b      	mov	r3, r1
 8007808:	18db      	adds	r3, r3, r3
 800780a:	653b      	str	r3, [r7, #80]	; 0x50
 800780c:	4613      	mov	r3, r2
 800780e:	eb42 0303 	adc.w	r3, r2, r3
 8007812:	657b      	str	r3, [r7, #84]	; 0x54
 8007814:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007818:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800781c:	f7f9 f9cc 	bl	8000bb8 <__aeabi_uldivmod>
 8007820:	4602      	mov	r2, r0
 8007822:	460b      	mov	r3, r1
 8007824:	4b61      	ldr	r3, [pc, #388]	; (80079ac <UART_SetConfig+0x2d4>)
 8007826:	fba3 2302 	umull	r2, r3, r3, r2
 800782a:	095b      	lsrs	r3, r3, #5
 800782c:	011c      	lsls	r4, r3, #4
 800782e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007832:	2200      	movs	r2, #0
 8007834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007838:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800783c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007840:	4642      	mov	r2, r8
 8007842:	464b      	mov	r3, r9
 8007844:	1891      	adds	r1, r2, r2
 8007846:	64b9      	str	r1, [r7, #72]	; 0x48
 8007848:	415b      	adcs	r3, r3
 800784a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800784c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007850:	4641      	mov	r1, r8
 8007852:	eb12 0a01 	adds.w	sl, r2, r1
 8007856:	4649      	mov	r1, r9
 8007858:	eb43 0b01 	adc.w	fp, r3, r1
 800785c:	f04f 0200 	mov.w	r2, #0
 8007860:	f04f 0300 	mov.w	r3, #0
 8007864:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007868:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800786c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007870:	4692      	mov	sl, r2
 8007872:	469b      	mov	fp, r3
 8007874:	4643      	mov	r3, r8
 8007876:	eb1a 0303 	adds.w	r3, sl, r3
 800787a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800787e:	464b      	mov	r3, r9
 8007880:	eb4b 0303 	adc.w	r3, fp, r3
 8007884:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007894:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007898:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800789c:	460b      	mov	r3, r1
 800789e:	18db      	adds	r3, r3, r3
 80078a0:	643b      	str	r3, [r7, #64]	; 0x40
 80078a2:	4613      	mov	r3, r2
 80078a4:	eb42 0303 	adc.w	r3, r2, r3
 80078a8:	647b      	str	r3, [r7, #68]	; 0x44
 80078aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80078ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80078b2:	f7f9 f981 	bl	8000bb8 <__aeabi_uldivmod>
 80078b6:	4602      	mov	r2, r0
 80078b8:	460b      	mov	r3, r1
 80078ba:	4611      	mov	r1, r2
 80078bc:	4b3b      	ldr	r3, [pc, #236]	; (80079ac <UART_SetConfig+0x2d4>)
 80078be:	fba3 2301 	umull	r2, r3, r3, r1
 80078c2:	095b      	lsrs	r3, r3, #5
 80078c4:	2264      	movs	r2, #100	; 0x64
 80078c6:	fb02 f303 	mul.w	r3, r2, r3
 80078ca:	1acb      	subs	r3, r1, r3
 80078cc:	00db      	lsls	r3, r3, #3
 80078ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80078d2:	4b36      	ldr	r3, [pc, #216]	; (80079ac <UART_SetConfig+0x2d4>)
 80078d4:	fba3 2302 	umull	r2, r3, r3, r2
 80078d8:	095b      	lsrs	r3, r3, #5
 80078da:	005b      	lsls	r3, r3, #1
 80078dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80078e0:	441c      	add	r4, r3
 80078e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078e6:	2200      	movs	r2, #0
 80078e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80078f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80078f4:	4642      	mov	r2, r8
 80078f6:	464b      	mov	r3, r9
 80078f8:	1891      	adds	r1, r2, r2
 80078fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80078fc:	415b      	adcs	r3, r3
 80078fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007900:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007904:	4641      	mov	r1, r8
 8007906:	1851      	adds	r1, r2, r1
 8007908:	6339      	str	r1, [r7, #48]	; 0x30
 800790a:	4649      	mov	r1, r9
 800790c:	414b      	adcs	r3, r1
 800790e:	637b      	str	r3, [r7, #52]	; 0x34
 8007910:	f04f 0200 	mov.w	r2, #0
 8007914:	f04f 0300 	mov.w	r3, #0
 8007918:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800791c:	4659      	mov	r1, fp
 800791e:	00cb      	lsls	r3, r1, #3
 8007920:	4651      	mov	r1, sl
 8007922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007926:	4651      	mov	r1, sl
 8007928:	00ca      	lsls	r2, r1, #3
 800792a:	4610      	mov	r0, r2
 800792c:	4619      	mov	r1, r3
 800792e:	4603      	mov	r3, r0
 8007930:	4642      	mov	r2, r8
 8007932:	189b      	adds	r3, r3, r2
 8007934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007938:	464b      	mov	r3, r9
 800793a:	460a      	mov	r2, r1
 800793c:	eb42 0303 	adc.w	r3, r2, r3
 8007940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007950:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007954:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007958:	460b      	mov	r3, r1
 800795a:	18db      	adds	r3, r3, r3
 800795c:	62bb      	str	r3, [r7, #40]	; 0x28
 800795e:	4613      	mov	r3, r2
 8007960:	eb42 0303 	adc.w	r3, r2, r3
 8007964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007966:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800796a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800796e:	f7f9 f923 	bl	8000bb8 <__aeabi_uldivmod>
 8007972:	4602      	mov	r2, r0
 8007974:	460b      	mov	r3, r1
 8007976:	4b0d      	ldr	r3, [pc, #52]	; (80079ac <UART_SetConfig+0x2d4>)
 8007978:	fba3 1302 	umull	r1, r3, r3, r2
 800797c:	095b      	lsrs	r3, r3, #5
 800797e:	2164      	movs	r1, #100	; 0x64
 8007980:	fb01 f303 	mul.w	r3, r1, r3
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	00db      	lsls	r3, r3, #3
 8007988:	3332      	adds	r3, #50	; 0x32
 800798a:	4a08      	ldr	r2, [pc, #32]	; (80079ac <UART_SetConfig+0x2d4>)
 800798c:	fba2 2303 	umull	r2, r3, r2, r3
 8007990:	095b      	lsrs	r3, r3, #5
 8007992:	f003 0207 	and.w	r2, r3, #7
 8007996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4422      	add	r2, r4
 800799e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079a0:	e106      	b.n	8007bb0 <UART_SetConfig+0x4d8>
 80079a2:	bf00      	nop
 80079a4:	40011000 	.word	0x40011000
 80079a8:	40011400 	.word	0x40011400
 80079ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079b4:	2200      	movs	r2, #0
 80079b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80079ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80079be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80079c2:	4642      	mov	r2, r8
 80079c4:	464b      	mov	r3, r9
 80079c6:	1891      	adds	r1, r2, r2
 80079c8:	6239      	str	r1, [r7, #32]
 80079ca:	415b      	adcs	r3, r3
 80079cc:	627b      	str	r3, [r7, #36]	; 0x24
 80079ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079d2:	4641      	mov	r1, r8
 80079d4:	1854      	adds	r4, r2, r1
 80079d6:	4649      	mov	r1, r9
 80079d8:	eb43 0501 	adc.w	r5, r3, r1
 80079dc:	f04f 0200 	mov.w	r2, #0
 80079e0:	f04f 0300 	mov.w	r3, #0
 80079e4:	00eb      	lsls	r3, r5, #3
 80079e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079ea:	00e2      	lsls	r2, r4, #3
 80079ec:	4614      	mov	r4, r2
 80079ee:	461d      	mov	r5, r3
 80079f0:	4643      	mov	r3, r8
 80079f2:	18e3      	adds	r3, r4, r3
 80079f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80079f8:	464b      	mov	r3, r9
 80079fa:	eb45 0303 	adc.w	r3, r5, r3
 80079fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a12:	f04f 0200 	mov.w	r2, #0
 8007a16:	f04f 0300 	mov.w	r3, #0
 8007a1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007a1e:	4629      	mov	r1, r5
 8007a20:	008b      	lsls	r3, r1, #2
 8007a22:	4621      	mov	r1, r4
 8007a24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a28:	4621      	mov	r1, r4
 8007a2a:	008a      	lsls	r2, r1, #2
 8007a2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007a30:	f7f9 f8c2 	bl	8000bb8 <__aeabi_uldivmod>
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	4b60      	ldr	r3, [pc, #384]	; (8007bbc <UART_SetConfig+0x4e4>)
 8007a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8007a3e:	095b      	lsrs	r3, r3, #5
 8007a40:	011c      	lsls	r4, r3, #4
 8007a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a46:	2200      	movs	r2, #0
 8007a48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007a50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007a54:	4642      	mov	r2, r8
 8007a56:	464b      	mov	r3, r9
 8007a58:	1891      	adds	r1, r2, r2
 8007a5a:	61b9      	str	r1, [r7, #24]
 8007a5c:	415b      	adcs	r3, r3
 8007a5e:	61fb      	str	r3, [r7, #28]
 8007a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a64:	4641      	mov	r1, r8
 8007a66:	1851      	adds	r1, r2, r1
 8007a68:	6139      	str	r1, [r7, #16]
 8007a6a:	4649      	mov	r1, r9
 8007a6c:	414b      	adcs	r3, r1
 8007a6e:	617b      	str	r3, [r7, #20]
 8007a70:	f04f 0200 	mov.w	r2, #0
 8007a74:	f04f 0300 	mov.w	r3, #0
 8007a78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a7c:	4659      	mov	r1, fp
 8007a7e:	00cb      	lsls	r3, r1, #3
 8007a80:	4651      	mov	r1, sl
 8007a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a86:	4651      	mov	r1, sl
 8007a88:	00ca      	lsls	r2, r1, #3
 8007a8a:	4610      	mov	r0, r2
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	4603      	mov	r3, r0
 8007a90:	4642      	mov	r2, r8
 8007a92:	189b      	adds	r3, r3, r2
 8007a94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a98:	464b      	mov	r3, r9
 8007a9a:	460a      	mov	r2, r1
 8007a9c:	eb42 0303 	adc.w	r3, r2, r3
 8007aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	67bb      	str	r3, [r7, #120]	; 0x78
 8007aae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007ab0:	f04f 0200 	mov.w	r2, #0
 8007ab4:	f04f 0300 	mov.w	r3, #0
 8007ab8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007abc:	4649      	mov	r1, r9
 8007abe:	008b      	lsls	r3, r1, #2
 8007ac0:	4641      	mov	r1, r8
 8007ac2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ac6:	4641      	mov	r1, r8
 8007ac8:	008a      	lsls	r2, r1, #2
 8007aca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007ace:	f7f9 f873 	bl	8000bb8 <__aeabi_uldivmod>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	4b38      	ldr	r3, [pc, #224]	; (8007bbc <UART_SetConfig+0x4e4>)
 8007ada:	fba3 2301 	umull	r2, r3, r3, r1
 8007ade:	095b      	lsrs	r3, r3, #5
 8007ae0:	2264      	movs	r2, #100	; 0x64
 8007ae2:	fb02 f303 	mul.w	r3, r2, r3
 8007ae6:	1acb      	subs	r3, r1, r3
 8007ae8:	011b      	lsls	r3, r3, #4
 8007aea:	3332      	adds	r3, #50	; 0x32
 8007aec:	4a33      	ldr	r2, [pc, #204]	; (8007bbc <UART_SetConfig+0x4e4>)
 8007aee:	fba2 2303 	umull	r2, r3, r2, r3
 8007af2:	095b      	lsrs	r3, r3, #5
 8007af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007af8:	441c      	add	r4, r3
 8007afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007afe:	2200      	movs	r2, #0
 8007b00:	673b      	str	r3, [r7, #112]	; 0x70
 8007b02:	677a      	str	r2, [r7, #116]	; 0x74
 8007b04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007b08:	4642      	mov	r2, r8
 8007b0a:	464b      	mov	r3, r9
 8007b0c:	1891      	adds	r1, r2, r2
 8007b0e:	60b9      	str	r1, [r7, #8]
 8007b10:	415b      	adcs	r3, r3
 8007b12:	60fb      	str	r3, [r7, #12]
 8007b14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b18:	4641      	mov	r1, r8
 8007b1a:	1851      	adds	r1, r2, r1
 8007b1c:	6039      	str	r1, [r7, #0]
 8007b1e:	4649      	mov	r1, r9
 8007b20:	414b      	adcs	r3, r1
 8007b22:	607b      	str	r3, [r7, #4]
 8007b24:	f04f 0200 	mov.w	r2, #0
 8007b28:	f04f 0300 	mov.w	r3, #0
 8007b2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b30:	4659      	mov	r1, fp
 8007b32:	00cb      	lsls	r3, r1, #3
 8007b34:	4651      	mov	r1, sl
 8007b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b3a:	4651      	mov	r1, sl
 8007b3c:	00ca      	lsls	r2, r1, #3
 8007b3e:	4610      	mov	r0, r2
 8007b40:	4619      	mov	r1, r3
 8007b42:	4603      	mov	r3, r0
 8007b44:	4642      	mov	r2, r8
 8007b46:	189b      	adds	r3, r3, r2
 8007b48:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b4a:	464b      	mov	r3, r9
 8007b4c:	460a      	mov	r2, r1
 8007b4e:	eb42 0303 	adc.w	r3, r2, r3
 8007b52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	663b      	str	r3, [r7, #96]	; 0x60
 8007b5e:	667a      	str	r2, [r7, #100]	; 0x64
 8007b60:	f04f 0200 	mov.w	r2, #0
 8007b64:	f04f 0300 	mov.w	r3, #0
 8007b68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007b6c:	4649      	mov	r1, r9
 8007b6e:	008b      	lsls	r3, r1, #2
 8007b70:	4641      	mov	r1, r8
 8007b72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b76:	4641      	mov	r1, r8
 8007b78:	008a      	lsls	r2, r1, #2
 8007b7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007b7e:	f7f9 f81b 	bl	8000bb8 <__aeabi_uldivmod>
 8007b82:	4602      	mov	r2, r0
 8007b84:	460b      	mov	r3, r1
 8007b86:	4b0d      	ldr	r3, [pc, #52]	; (8007bbc <UART_SetConfig+0x4e4>)
 8007b88:	fba3 1302 	umull	r1, r3, r3, r2
 8007b8c:	095b      	lsrs	r3, r3, #5
 8007b8e:	2164      	movs	r1, #100	; 0x64
 8007b90:	fb01 f303 	mul.w	r3, r1, r3
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	011b      	lsls	r3, r3, #4
 8007b98:	3332      	adds	r3, #50	; 0x32
 8007b9a:	4a08      	ldr	r2, [pc, #32]	; (8007bbc <UART_SetConfig+0x4e4>)
 8007b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba0:	095b      	lsrs	r3, r3, #5
 8007ba2:	f003 020f 	and.w	r2, r3, #15
 8007ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4422      	add	r2, r4
 8007bae:	609a      	str	r2, [r3, #8]
}
 8007bb0:	bf00      	nop
 8007bb2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bbc:	51eb851f 	.word	0x51eb851f

08007bc0 <__cvt>:
 8007bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc4:	ec55 4b10 	vmov	r4, r5, d0
 8007bc8:	2d00      	cmp	r5, #0
 8007bca:	460e      	mov	r6, r1
 8007bcc:	4619      	mov	r1, r3
 8007bce:	462b      	mov	r3, r5
 8007bd0:	bfbb      	ittet	lt
 8007bd2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007bd6:	461d      	movlt	r5, r3
 8007bd8:	2300      	movge	r3, #0
 8007bda:	232d      	movlt	r3, #45	; 0x2d
 8007bdc:	700b      	strb	r3, [r1, #0]
 8007bde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007be0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007be4:	4691      	mov	r9, r2
 8007be6:	f023 0820 	bic.w	r8, r3, #32
 8007bea:	bfbc      	itt	lt
 8007bec:	4622      	movlt	r2, r4
 8007bee:	4614      	movlt	r4, r2
 8007bf0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007bf4:	d005      	beq.n	8007c02 <__cvt+0x42>
 8007bf6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007bfa:	d100      	bne.n	8007bfe <__cvt+0x3e>
 8007bfc:	3601      	adds	r6, #1
 8007bfe:	2102      	movs	r1, #2
 8007c00:	e000      	b.n	8007c04 <__cvt+0x44>
 8007c02:	2103      	movs	r1, #3
 8007c04:	ab03      	add	r3, sp, #12
 8007c06:	9301      	str	r3, [sp, #4]
 8007c08:	ab02      	add	r3, sp, #8
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	ec45 4b10 	vmov	d0, r4, r5
 8007c10:	4653      	mov	r3, sl
 8007c12:	4632      	mov	r2, r6
 8007c14:	f000 fe68 	bl	80088e8 <_dtoa_r>
 8007c18:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c1c:	4607      	mov	r7, r0
 8007c1e:	d102      	bne.n	8007c26 <__cvt+0x66>
 8007c20:	f019 0f01 	tst.w	r9, #1
 8007c24:	d022      	beq.n	8007c6c <__cvt+0xac>
 8007c26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c2a:	eb07 0906 	add.w	r9, r7, r6
 8007c2e:	d110      	bne.n	8007c52 <__cvt+0x92>
 8007c30:	783b      	ldrb	r3, [r7, #0]
 8007c32:	2b30      	cmp	r3, #48	; 0x30
 8007c34:	d10a      	bne.n	8007c4c <__cvt+0x8c>
 8007c36:	2200      	movs	r2, #0
 8007c38:	2300      	movs	r3, #0
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	f7f8 ff4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c42:	b918      	cbnz	r0, 8007c4c <__cvt+0x8c>
 8007c44:	f1c6 0601 	rsb	r6, r6, #1
 8007c48:	f8ca 6000 	str.w	r6, [sl]
 8007c4c:	f8da 3000 	ldr.w	r3, [sl]
 8007c50:	4499      	add	r9, r3
 8007c52:	2200      	movs	r2, #0
 8007c54:	2300      	movs	r3, #0
 8007c56:	4620      	mov	r0, r4
 8007c58:	4629      	mov	r1, r5
 8007c5a:	f7f8 ff3d 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c5e:	b108      	cbz	r0, 8007c64 <__cvt+0xa4>
 8007c60:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c64:	2230      	movs	r2, #48	; 0x30
 8007c66:	9b03      	ldr	r3, [sp, #12]
 8007c68:	454b      	cmp	r3, r9
 8007c6a:	d307      	bcc.n	8007c7c <__cvt+0xbc>
 8007c6c:	9b03      	ldr	r3, [sp, #12]
 8007c6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c70:	1bdb      	subs	r3, r3, r7
 8007c72:	4638      	mov	r0, r7
 8007c74:	6013      	str	r3, [r2, #0]
 8007c76:	b004      	add	sp, #16
 8007c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c7c:	1c59      	adds	r1, r3, #1
 8007c7e:	9103      	str	r1, [sp, #12]
 8007c80:	701a      	strb	r2, [r3, #0]
 8007c82:	e7f0      	b.n	8007c66 <__cvt+0xa6>

08007c84 <__exponent>:
 8007c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c86:	4603      	mov	r3, r0
 8007c88:	2900      	cmp	r1, #0
 8007c8a:	bfb8      	it	lt
 8007c8c:	4249      	neglt	r1, r1
 8007c8e:	f803 2b02 	strb.w	r2, [r3], #2
 8007c92:	bfb4      	ite	lt
 8007c94:	222d      	movlt	r2, #45	; 0x2d
 8007c96:	222b      	movge	r2, #43	; 0x2b
 8007c98:	2909      	cmp	r1, #9
 8007c9a:	7042      	strb	r2, [r0, #1]
 8007c9c:	dd2a      	ble.n	8007cf4 <__exponent+0x70>
 8007c9e:	f10d 0207 	add.w	r2, sp, #7
 8007ca2:	4617      	mov	r7, r2
 8007ca4:	260a      	movs	r6, #10
 8007ca6:	4694      	mov	ip, r2
 8007ca8:	fb91 f5f6 	sdiv	r5, r1, r6
 8007cac:	fb06 1415 	mls	r4, r6, r5, r1
 8007cb0:	3430      	adds	r4, #48	; 0x30
 8007cb2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	2c63      	cmp	r4, #99	; 0x63
 8007cba:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	dcf1      	bgt.n	8007ca6 <__exponent+0x22>
 8007cc2:	3130      	adds	r1, #48	; 0x30
 8007cc4:	f1ac 0402 	sub.w	r4, ip, #2
 8007cc8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007ccc:	1c41      	adds	r1, r0, #1
 8007cce:	4622      	mov	r2, r4
 8007cd0:	42ba      	cmp	r2, r7
 8007cd2:	d30a      	bcc.n	8007cea <__exponent+0x66>
 8007cd4:	f10d 0209 	add.w	r2, sp, #9
 8007cd8:	eba2 020c 	sub.w	r2, r2, ip
 8007cdc:	42bc      	cmp	r4, r7
 8007cde:	bf88      	it	hi
 8007ce0:	2200      	movhi	r2, #0
 8007ce2:	4413      	add	r3, r2
 8007ce4:	1a18      	subs	r0, r3, r0
 8007ce6:	b003      	add	sp, #12
 8007ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cea:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007cee:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007cf2:	e7ed      	b.n	8007cd0 <__exponent+0x4c>
 8007cf4:	2330      	movs	r3, #48	; 0x30
 8007cf6:	3130      	adds	r1, #48	; 0x30
 8007cf8:	7083      	strb	r3, [r0, #2]
 8007cfa:	70c1      	strb	r1, [r0, #3]
 8007cfc:	1d03      	adds	r3, r0, #4
 8007cfe:	e7f1      	b.n	8007ce4 <__exponent+0x60>

08007d00 <_printf_float>:
 8007d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d04:	ed2d 8b02 	vpush	{d8}
 8007d08:	b08d      	sub	sp, #52	; 0x34
 8007d0a:	460c      	mov	r4, r1
 8007d0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d10:	4616      	mov	r6, r2
 8007d12:	461f      	mov	r7, r3
 8007d14:	4605      	mov	r5, r0
 8007d16:	f000 fce7 	bl	80086e8 <_localeconv_r>
 8007d1a:	f8d0 a000 	ldr.w	sl, [r0]
 8007d1e:	4650      	mov	r0, sl
 8007d20:	f7f8 faae 	bl	8000280 <strlen>
 8007d24:	2300      	movs	r3, #0
 8007d26:	930a      	str	r3, [sp, #40]	; 0x28
 8007d28:	6823      	ldr	r3, [r4, #0]
 8007d2a:	9305      	str	r3, [sp, #20]
 8007d2c:	f8d8 3000 	ldr.w	r3, [r8]
 8007d30:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007d34:	3307      	adds	r3, #7
 8007d36:	f023 0307 	bic.w	r3, r3, #7
 8007d3a:	f103 0208 	add.w	r2, r3, #8
 8007d3e:	f8c8 2000 	str.w	r2, [r8]
 8007d42:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d4a:	9307      	str	r3, [sp, #28]
 8007d4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d50:	ee08 0a10 	vmov	s16, r0
 8007d54:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007d58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d5c:	4b9e      	ldr	r3, [pc, #632]	; (8007fd8 <_printf_float+0x2d8>)
 8007d5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d62:	f7f8 feeb 	bl	8000b3c <__aeabi_dcmpun>
 8007d66:	bb88      	cbnz	r0, 8007dcc <_printf_float+0xcc>
 8007d68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d6c:	4b9a      	ldr	r3, [pc, #616]	; (8007fd8 <_printf_float+0x2d8>)
 8007d6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d72:	f7f8 fec5 	bl	8000b00 <__aeabi_dcmple>
 8007d76:	bb48      	cbnz	r0, 8007dcc <_printf_float+0xcc>
 8007d78:	2200      	movs	r2, #0
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	4640      	mov	r0, r8
 8007d7e:	4649      	mov	r1, r9
 8007d80:	f7f8 feb4 	bl	8000aec <__aeabi_dcmplt>
 8007d84:	b110      	cbz	r0, 8007d8c <_printf_float+0x8c>
 8007d86:	232d      	movs	r3, #45	; 0x2d
 8007d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d8c:	4a93      	ldr	r2, [pc, #588]	; (8007fdc <_printf_float+0x2dc>)
 8007d8e:	4b94      	ldr	r3, [pc, #592]	; (8007fe0 <_printf_float+0x2e0>)
 8007d90:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007d94:	bf94      	ite	ls
 8007d96:	4690      	movls	r8, r2
 8007d98:	4698      	movhi	r8, r3
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	6123      	str	r3, [r4, #16]
 8007d9e:	9b05      	ldr	r3, [sp, #20]
 8007da0:	f023 0304 	bic.w	r3, r3, #4
 8007da4:	6023      	str	r3, [r4, #0]
 8007da6:	f04f 0900 	mov.w	r9, #0
 8007daa:	9700      	str	r7, [sp, #0]
 8007dac:	4633      	mov	r3, r6
 8007dae:	aa0b      	add	r2, sp, #44	; 0x2c
 8007db0:	4621      	mov	r1, r4
 8007db2:	4628      	mov	r0, r5
 8007db4:	f000 f9da 	bl	800816c <_printf_common>
 8007db8:	3001      	adds	r0, #1
 8007dba:	f040 8090 	bne.w	8007ede <_printf_float+0x1de>
 8007dbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dc2:	b00d      	add	sp, #52	; 0x34
 8007dc4:	ecbd 8b02 	vpop	{d8}
 8007dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dcc:	4642      	mov	r2, r8
 8007dce:	464b      	mov	r3, r9
 8007dd0:	4640      	mov	r0, r8
 8007dd2:	4649      	mov	r1, r9
 8007dd4:	f7f8 feb2 	bl	8000b3c <__aeabi_dcmpun>
 8007dd8:	b140      	cbz	r0, 8007dec <_printf_float+0xec>
 8007dda:	464b      	mov	r3, r9
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	bfbc      	itt	lt
 8007de0:	232d      	movlt	r3, #45	; 0x2d
 8007de2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007de6:	4a7f      	ldr	r2, [pc, #508]	; (8007fe4 <_printf_float+0x2e4>)
 8007de8:	4b7f      	ldr	r3, [pc, #508]	; (8007fe8 <_printf_float+0x2e8>)
 8007dea:	e7d1      	b.n	8007d90 <_printf_float+0x90>
 8007dec:	6863      	ldr	r3, [r4, #4]
 8007dee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007df2:	9206      	str	r2, [sp, #24]
 8007df4:	1c5a      	adds	r2, r3, #1
 8007df6:	d13f      	bne.n	8007e78 <_printf_float+0x178>
 8007df8:	2306      	movs	r3, #6
 8007dfa:	6063      	str	r3, [r4, #4]
 8007dfc:	9b05      	ldr	r3, [sp, #20]
 8007dfe:	6861      	ldr	r1, [r4, #4]
 8007e00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e04:	2300      	movs	r3, #0
 8007e06:	9303      	str	r3, [sp, #12]
 8007e08:	ab0a      	add	r3, sp, #40	; 0x28
 8007e0a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e0e:	ab09      	add	r3, sp, #36	; 0x24
 8007e10:	ec49 8b10 	vmov	d0, r8, r9
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	6022      	str	r2, [r4, #0]
 8007e18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	f7ff fecf 	bl	8007bc0 <__cvt>
 8007e22:	9b06      	ldr	r3, [sp, #24]
 8007e24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e26:	2b47      	cmp	r3, #71	; 0x47
 8007e28:	4680      	mov	r8, r0
 8007e2a:	d108      	bne.n	8007e3e <_printf_float+0x13e>
 8007e2c:	1cc8      	adds	r0, r1, #3
 8007e2e:	db02      	blt.n	8007e36 <_printf_float+0x136>
 8007e30:	6863      	ldr	r3, [r4, #4]
 8007e32:	4299      	cmp	r1, r3
 8007e34:	dd41      	ble.n	8007eba <_printf_float+0x1ba>
 8007e36:	f1ab 0302 	sub.w	r3, fp, #2
 8007e3a:	fa5f fb83 	uxtb.w	fp, r3
 8007e3e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e42:	d820      	bhi.n	8007e86 <_printf_float+0x186>
 8007e44:	3901      	subs	r1, #1
 8007e46:	465a      	mov	r2, fp
 8007e48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e4c:	9109      	str	r1, [sp, #36]	; 0x24
 8007e4e:	f7ff ff19 	bl	8007c84 <__exponent>
 8007e52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e54:	1813      	adds	r3, r2, r0
 8007e56:	2a01      	cmp	r2, #1
 8007e58:	4681      	mov	r9, r0
 8007e5a:	6123      	str	r3, [r4, #16]
 8007e5c:	dc02      	bgt.n	8007e64 <_printf_float+0x164>
 8007e5e:	6822      	ldr	r2, [r4, #0]
 8007e60:	07d2      	lsls	r2, r2, #31
 8007e62:	d501      	bpl.n	8007e68 <_printf_float+0x168>
 8007e64:	3301      	adds	r3, #1
 8007e66:	6123      	str	r3, [r4, #16]
 8007e68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d09c      	beq.n	8007daa <_printf_float+0xaa>
 8007e70:	232d      	movs	r3, #45	; 0x2d
 8007e72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e76:	e798      	b.n	8007daa <_printf_float+0xaa>
 8007e78:	9a06      	ldr	r2, [sp, #24]
 8007e7a:	2a47      	cmp	r2, #71	; 0x47
 8007e7c:	d1be      	bne.n	8007dfc <_printf_float+0xfc>
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1bc      	bne.n	8007dfc <_printf_float+0xfc>
 8007e82:	2301      	movs	r3, #1
 8007e84:	e7b9      	b.n	8007dfa <_printf_float+0xfa>
 8007e86:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007e8a:	d118      	bne.n	8007ebe <_printf_float+0x1be>
 8007e8c:	2900      	cmp	r1, #0
 8007e8e:	6863      	ldr	r3, [r4, #4]
 8007e90:	dd0b      	ble.n	8007eaa <_printf_float+0x1aa>
 8007e92:	6121      	str	r1, [r4, #16]
 8007e94:	b913      	cbnz	r3, 8007e9c <_printf_float+0x19c>
 8007e96:	6822      	ldr	r2, [r4, #0]
 8007e98:	07d0      	lsls	r0, r2, #31
 8007e9a:	d502      	bpl.n	8007ea2 <_printf_float+0x1a2>
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	440b      	add	r3, r1
 8007ea0:	6123      	str	r3, [r4, #16]
 8007ea2:	65a1      	str	r1, [r4, #88]	; 0x58
 8007ea4:	f04f 0900 	mov.w	r9, #0
 8007ea8:	e7de      	b.n	8007e68 <_printf_float+0x168>
 8007eaa:	b913      	cbnz	r3, 8007eb2 <_printf_float+0x1b2>
 8007eac:	6822      	ldr	r2, [r4, #0]
 8007eae:	07d2      	lsls	r2, r2, #31
 8007eb0:	d501      	bpl.n	8007eb6 <_printf_float+0x1b6>
 8007eb2:	3302      	adds	r3, #2
 8007eb4:	e7f4      	b.n	8007ea0 <_printf_float+0x1a0>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e7f2      	b.n	8007ea0 <_printf_float+0x1a0>
 8007eba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ec0:	4299      	cmp	r1, r3
 8007ec2:	db05      	blt.n	8007ed0 <_printf_float+0x1d0>
 8007ec4:	6823      	ldr	r3, [r4, #0]
 8007ec6:	6121      	str	r1, [r4, #16]
 8007ec8:	07d8      	lsls	r0, r3, #31
 8007eca:	d5ea      	bpl.n	8007ea2 <_printf_float+0x1a2>
 8007ecc:	1c4b      	adds	r3, r1, #1
 8007ece:	e7e7      	b.n	8007ea0 <_printf_float+0x1a0>
 8007ed0:	2900      	cmp	r1, #0
 8007ed2:	bfd4      	ite	le
 8007ed4:	f1c1 0202 	rsble	r2, r1, #2
 8007ed8:	2201      	movgt	r2, #1
 8007eda:	4413      	add	r3, r2
 8007edc:	e7e0      	b.n	8007ea0 <_printf_float+0x1a0>
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	055a      	lsls	r2, r3, #21
 8007ee2:	d407      	bmi.n	8007ef4 <_printf_float+0x1f4>
 8007ee4:	6923      	ldr	r3, [r4, #16]
 8007ee6:	4642      	mov	r2, r8
 8007ee8:	4631      	mov	r1, r6
 8007eea:	4628      	mov	r0, r5
 8007eec:	47b8      	blx	r7
 8007eee:	3001      	adds	r0, #1
 8007ef0:	d12c      	bne.n	8007f4c <_printf_float+0x24c>
 8007ef2:	e764      	b.n	8007dbe <_printf_float+0xbe>
 8007ef4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ef8:	f240 80e0 	bls.w	80080bc <_printf_float+0x3bc>
 8007efc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f00:	2200      	movs	r2, #0
 8007f02:	2300      	movs	r3, #0
 8007f04:	f7f8 fde8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	d034      	beq.n	8007f76 <_printf_float+0x276>
 8007f0c:	4a37      	ldr	r2, [pc, #220]	; (8007fec <_printf_float+0x2ec>)
 8007f0e:	2301      	movs	r3, #1
 8007f10:	4631      	mov	r1, r6
 8007f12:	4628      	mov	r0, r5
 8007f14:	47b8      	blx	r7
 8007f16:	3001      	adds	r0, #1
 8007f18:	f43f af51 	beq.w	8007dbe <_printf_float+0xbe>
 8007f1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f20:	429a      	cmp	r2, r3
 8007f22:	db02      	blt.n	8007f2a <_printf_float+0x22a>
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	07d8      	lsls	r0, r3, #31
 8007f28:	d510      	bpl.n	8007f4c <_printf_float+0x24c>
 8007f2a:	ee18 3a10 	vmov	r3, s16
 8007f2e:	4652      	mov	r2, sl
 8007f30:	4631      	mov	r1, r6
 8007f32:	4628      	mov	r0, r5
 8007f34:	47b8      	blx	r7
 8007f36:	3001      	adds	r0, #1
 8007f38:	f43f af41 	beq.w	8007dbe <_printf_float+0xbe>
 8007f3c:	f04f 0800 	mov.w	r8, #0
 8007f40:	f104 091a 	add.w	r9, r4, #26
 8007f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f46:	3b01      	subs	r3, #1
 8007f48:	4543      	cmp	r3, r8
 8007f4a:	dc09      	bgt.n	8007f60 <_printf_float+0x260>
 8007f4c:	6823      	ldr	r3, [r4, #0]
 8007f4e:	079b      	lsls	r3, r3, #30
 8007f50:	f100 8107 	bmi.w	8008162 <_printf_float+0x462>
 8007f54:	68e0      	ldr	r0, [r4, #12]
 8007f56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f58:	4298      	cmp	r0, r3
 8007f5a:	bfb8      	it	lt
 8007f5c:	4618      	movlt	r0, r3
 8007f5e:	e730      	b.n	8007dc2 <_printf_float+0xc2>
 8007f60:	2301      	movs	r3, #1
 8007f62:	464a      	mov	r2, r9
 8007f64:	4631      	mov	r1, r6
 8007f66:	4628      	mov	r0, r5
 8007f68:	47b8      	blx	r7
 8007f6a:	3001      	adds	r0, #1
 8007f6c:	f43f af27 	beq.w	8007dbe <_printf_float+0xbe>
 8007f70:	f108 0801 	add.w	r8, r8, #1
 8007f74:	e7e6      	b.n	8007f44 <_printf_float+0x244>
 8007f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	dc39      	bgt.n	8007ff0 <_printf_float+0x2f0>
 8007f7c:	4a1b      	ldr	r2, [pc, #108]	; (8007fec <_printf_float+0x2ec>)
 8007f7e:	2301      	movs	r3, #1
 8007f80:	4631      	mov	r1, r6
 8007f82:	4628      	mov	r0, r5
 8007f84:	47b8      	blx	r7
 8007f86:	3001      	adds	r0, #1
 8007f88:	f43f af19 	beq.w	8007dbe <_printf_float+0xbe>
 8007f8c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007f90:	4313      	orrs	r3, r2
 8007f92:	d102      	bne.n	8007f9a <_printf_float+0x29a>
 8007f94:	6823      	ldr	r3, [r4, #0]
 8007f96:	07d9      	lsls	r1, r3, #31
 8007f98:	d5d8      	bpl.n	8007f4c <_printf_float+0x24c>
 8007f9a:	ee18 3a10 	vmov	r3, s16
 8007f9e:	4652      	mov	r2, sl
 8007fa0:	4631      	mov	r1, r6
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	47b8      	blx	r7
 8007fa6:	3001      	adds	r0, #1
 8007fa8:	f43f af09 	beq.w	8007dbe <_printf_float+0xbe>
 8007fac:	f04f 0900 	mov.w	r9, #0
 8007fb0:	f104 0a1a 	add.w	sl, r4, #26
 8007fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb6:	425b      	negs	r3, r3
 8007fb8:	454b      	cmp	r3, r9
 8007fba:	dc01      	bgt.n	8007fc0 <_printf_float+0x2c0>
 8007fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fbe:	e792      	b.n	8007ee6 <_printf_float+0x1e6>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	4652      	mov	r2, sl
 8007fc4:	4631      	mov	r1, r6
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	47b8      	blx	r7
 8007fca:	3001      	adds	r0, #1
 8007fcc:	f43f aef7 	beq.w	8007dbe <_printf_float+0xbe>
 8007fd0:	f109 0901 	add.w	r9, r9, #1
 8007fd4:	e7ee      	b.n	8007fb4 <_printf_float+0x2b4>
 8007fd6:	bf00      	nop
 8007fd8:	7fefffff 	.word	0x7fefffff
 8007fdc:	0800a958 	.word	0x0800a958
 8007fe0:	0800a95c 	.word	0x0800a95c
 8007fe4:	0800a960 	.word	0x0800a960
 8007fe8:	0800a964 	.word	0x0800a964
 8007fec:	0800a968 	.word	0x0800a968
 8007ff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ff2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	bfa8      	it	ge
 8007ff8:	461a      	movge	r2, r3
 8007ffa:	2a00      	cmp	r2, #0
 8007ffc:	4691      	mov	r9, r2
 8007ffe:	dc37      	bgt.n	8008070 <_printf_float+0x370>
 8008000:	f04f 0b00 	mov.w	fp, #0
 8008004:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008008:	f104 021a 	add.w	r2, r4, #26
 800800c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800800e:	9305      	str	r3, [sp, #20]
 8008010:	eba3 0309 	sub.w	r3, r3, r9
 8008014:	455b      	cmp	r3, fp
 8008016:	dc33      	bgt.n	8008080 <_printf_float+0x380>
 8008018:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800801c:	429a      	cmp	r2, r3
 800801e:	db3b      	blt.n	8008098 <_printf_float+0x398>
 8008020:	6823      	ldr	r3, [r4, #0]
 8008022:	07da      	lsls	r2, r3, #31
 8008024:	d438      	bmi.n	8008098 <_printf_float+0x398>
 8008026:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800802a:	eba2 0903 	sub.w	r9, r2, r3
 800802e:	9b05      	ldr	r3, [sp, #20]
 8008030:	1ad2      	subs	r2, r2, r3
 8008032:	4591      	cmp	r9, r2
 8008034:	bfa8      	it	ge
 8008036:	4691      	movge	r9, r2
 8008038:	f1b9 0f00 	cmp.w	r9, #0
 800803c:	dc35      	bgt.n	80080aa <_printf_float+0x3aa>
 800803e:	f04f 0800 	mov.w	r8, #0
 8008042:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008046:	f104 0a1a 	add.w	sl, r4, #26
 800804a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800804e:	1a9b      	subs	r3, r3, r2
 8008050:	eba3 0309 	sub.w	r3, r3, r9
 8008054:	4543      	cmp	r3, r8
 8008056:	f77f af79 	ble.w	8007f4c <_printf_float+0x24c>
 800805a:	2301      	movs	r3, #1
 800805c:	4652      	mov	r2, sl
 800805e:	4631      	mov	r1, r6
 8008060:	4628      	mov	r0, r5
 8008062:	47b8      	blx	r7
 8008064:	3001      	adds	r0, #1
 8008066:	f43f aeaa 	beq.w	8007dbe <_printf_float+0xbe>
 800806a:	f108 0801 	add.w	r8, r8, #1
 800806e:	e7ec      	b.n	800804a <_printf_float+0x34a>
 8008070:	4613      	mov	r3, r2
 8008072:	4631      	mov	r1, r6
 8008074:	4642      	mov	r2, r8
 8008076:	4628      	mov	r0, r5
 8008078:	47b8      	blx	r7
 800807a:	3001      	adds	r0, #1
 800807c:	d1c0      	bne.n	8008000 <_printf_float+0x300>
 800807e:	e69e      	b.n	8007dbe <_printf_float+0xbe>
 8008080:	2301      	movs	r3, #1
 8008082:	4631      	mov	r1, r6
 8008084:	4628      	mov	r0, r5
 8008086:	9205      	str	r2, [sp, #20]
 8008088:	47b8      	blx	r7
 800808a:	3001      	adds	r0, #1
 800808c:	f43f ae97 	beq.w	8007dbe <_printf_float+0xbe>
 8008090:	9a05      	ldr	r2, [sp, #20]
 8008092:	f10b 0b01 	add.w	fp, fp, #1
 8008096:	e7b9      	b.n	800800c <_printf_float+0x30c>
 8008098:	ee18 3a10 	vmov	r3, s16
 800809c:	4652      	mov	r2, sl
 800809e:	4631      	mov	r1, r6
 80080a0:	4628      	mov	r0, r5
 80080a2:	47b8      	blx	r7
 80080a4:	3001      	adds	r0, #1
 80080a6:	d1be      	bne.n	8008026 <_printf_float+0x326>
 80080a8:	e689      	b.n	8007dbe <_printf_float+0xbe>
 80080aa:	9a05      	ldr	r2, [sp, #20]
 80080ac:	464b      	mov	r3, r9
 80080ae:	4442      	add	r2, r8
 80080b0:	4631      	mov	r1, r6
 80080b2:	4628      	mov	r0, r5
 80080b4:	47b8      	blx	r7
 80080b6:	3001      	adds	r0, #1
 80080b8:	d1c1      	bne.n	800803e <_printf_float+0x33e>
 80080ba:	e680      	b.n	8007dbe <_printf_float+0xbe>
 80080bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080be:	2a01      	cmp	r2, #1
 80080c0:	dc01      	bgt.n	80080c6 <_printf_float+0x3c6>
 80080c2:	07db      	lsls	r3, r3, #31
 80080c4:	d53a      	bpl.n	800813c <_printf_float+0x43c>
 80080c6:	2301      	movs	r3, #1
 80080c8:	4642      	mov	r2, r8
 80080ca:	4631      	mov	r1, r6
 80080cc:	4628      	mov	r0, r5
 80080ce:	47b8      	blx	r7
 80080d0:	3001      	adds	r0, #1
 80080d2:	f43f ae74 	beq.w	8007dbe <_printf_float+0xbe>
 80080d6:	ee18 3a10 	vmov	r3, s16
 80080da:	4652      	mov	r2, sl
 80080dc:	4631      	mov	r1, r6
 80080de:	4628      	mov	r0, r5
 80080e0:	47b8      	blx	r7
 80080e2:	3001      	adds	r0, #1
 80080e4:	f43f ae6b 	beq.w	8007dbe <_printf_float+0xbe>
 80080e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080ec:	2200      	movs	r2, #0
 80080ee:	2300      	movs	r3, #0
 80080f0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80080f4:	f7f8 fcf0 	bl	8000ad8 <__aeabi_dcmpeq>
 80080f8:	b9d8      	cbnz	r0, 8008132 <_printf_float+0x432>
 80080fa:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80080fe:	f108 0201 	add.w	r2, r8, #1
 8008102:	4631      	mov	r1, r6
 8008104:	4628      	mov	r0, r5
 8008106:	47b8      	blx	r7
 8008108:	3001      	adds	r0, #1
 800810a:	d10e      	bne.n	800812a <_printf_float+0x42a>
 800810c:	e657      	b.n	8007dbe <_printf_float+0xbe>
 800810e:	2301      	movs	r3, #1
 8008110:	4652      	mov	r2, sl
 8008112:	4631      	mov	r1, r6
 8008114:	4628      	mov	r0, r5
 8008116:	47b8      	blx	r7
 8008118:	3001      	adds	r0, #1
 800811a:	f43f ae50 	beq.w	8007dbe <_printf_float+0xbe>
 800811e:	f108 0801 	add.w	r8, r8, #1
 8008122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008124:	3b01      	subs	r3, #1
 8008126:	4543      	cmp	r3, r8
 8008128:	dcf1      	bgt.n	800810e <_printf_float+0x40e>
 800812a:	464b      	mov	r3, r9
 800812c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008130:	e6da      	b.n	8007ee8 <_printf_float+0x1e8>
 8008132:	f04f 0800 	mov.w	r8, #0
 8008136:	f104 0a1a 	add.w	sl, r4, #26
 800813a:	e7f2      	b.n	8008122 <_printf_float+0x422>
 800813c:	2301      	movs	r3, #1
 800813e:	4642      	mov	r2, r8
 8008140:	e7df      	b.n	8008102 <_printf_float+0x402>
 8008142:	2301      	movs	r3, #1
 8008144:	464a      	mov	r2, r9
 8008146:	4631      	mov	r1, r6
 8008148:	4628      	mov	r0, r5
 800814a:	47b8      	blx	r7
 800814c:	3001      	adds	r0, #1
 800814e:	f43f ae36 	beq.w	8007dbe <_printf_float+0xbe>
 8008152:	f108 0801 	add.w	r8, r8, #1
 8008156:	68e3      	ldr	r3, [r4, #12]
 8008158:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800815a:	1a5b      	subs	r3, r3, r1
 800815c:	4543      	cmp	r3, r8
 800815e:	dcf0      	bgt.n	8008142 <_printf_float+0x442>
 8008160:	e6f8      	b.n	8007f54 <_printf_float+0x254>
 8008162:	f04f 0800 	mov.w	r8, #0
 8008166:	f104 0919 	add.w	r9, r4, #25
 800816a:	e7f4      	b.n	8008156 <_printf_float+0x456>

0800816c <_printf_common>:
 800816c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008170:	4616      	mov	r6, r2
 8008172:	4699      	mov	r9, r3
 8008174:	688a      	ldr	r2, [r1, #8]
 8008176:	690b      	ldr	r3, [r1, #16]
 8008178:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800817c:	4293      	cmp	r3, r2
 800817e:	bfb8      	it	lt
 8008180:	4613      	movlt	r3, r2
 8008182:	6033      	str	r3, [r6, #0]
 8008184:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008188:	4607      	mov	r7, r0
 800818a:	460c      	mov	r4, r1
 800818c:	b10a      	cbz	r2, 8008192 <_printf_common+0x26>
 800818e:	3301      	adds	r3, #1
 8008190:	6033      	str	r3, [r6, #0]
 8008192:	6823      	ldr	r3, [r4, #0]
 8008194:	0699      	lsls	r1, r3, #26
 8008196:	bf42      	ittt	mi
 8008198:	6833      	ldrmi	r3, [r6, #0]
 800819a:	3302      	addmi	r3, #2
 800819c:	6033      	strmi	r3, [r6, #0]
 800819e:	6825      	ldr	r5, [r4, #0]
 80081a0:	f015 0506 	ands.w	r5, r5, #6
 80081a4:	d106      	bne.n	80081b4 <_printf_common+0x48>
 80081a6:	f104 0a19 	add.w	sl, r4, #25
 80081aa:	68e3      	ldr	r3, [r4, #12]
 80081ac:	6832      	ldr	r2, [r6, #0]
 80081ae:	1a9b      	subs	r3, r3, r2
 80081b0:	42ab      	cmp	r3, r5
 80081b2:	dc26      	bgt.n	8008202 <_printf_common+0x96>
 80081b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081b8:	1e13      	subs	r3, r2, #0
 80081ba:	6822      	ldr	r2, [r4, #0]
 80081bc:	bf18      	it	ne
 80081be:	2301      	movne	r3, #1
 80081c0:	0692      	lsls	r2, r2, #26
 80081c2:	d42b      	bmi.n	800821c <_printf_common+0xb0>
 80081c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081c8:	4649      	mov	r1, r9
 80081ca:	4638      	mov	r0, r7
 80081cc:	47c0      	blx	r8
 80081ce:	3001      	adds	r0, #1
 80081d0:	d01e      	beq.n	8008210 <_printf_common+0xa4>
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	6922      	ldr	r2, [r4, #16]
 80081d6:	f003 0306 	and.w	r3, r3, #6
 80081da:	2b04      	cmp	r3, #4
 80081dc:	bf02      	ittt	eq
 80081de:	68e5      	ldreq	r5, [r4, #12]
 80081e0:	6833      	ldreq	r3, [r6, #0]
 80081e2:	1aed      	subeq	r5, r5, r3
 80081e4:	68a3      	ldr	r3, [r4, #8]
 80081e6:	bf0c      	ite	eq
 80081e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081ec:	2500      	movne	r5, #0
 80081ee:	4293      	cmp	r3, r2
 80081f0:	bfc4      	itt	gt
 80081f2:	1a9b      	subgt	r3, r3, r2
 80081f4:	18ed      	addgt	r5, r5, r3
 80081f6:	2600      	movs	r6, #0
 80081f8:	341a      	adds	r4, #26
 80081fa:	42b5      	cmp	r5, r6
 80081fc:	d11a      	bne.n	8008234 <_printf_common+0xc8>
 80081fe:	2000      	movs	r0, #0
 8008200:	e008      	b.n	8008214 <_printf_common+0xa8>
 8008202:	2301      	movs	r3, #1
 8008204:	4652      	mov	r2, sl
 8008206:	4649      	mov	r1, r9
 8008208:	4638      	mov	r0, r7
 800820a:	47c0      	blx	r8
 800820c:	3001      	adds	r0, #1
 800820e:	d103      	bne.n	8008218 <_printf_common+0xac>
 8008210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008218:	3501      	adds	r5, #1
 800821a:	e7c6      	b.n	80081aa <_printf_common+0x3e>
 800821c:	18e1      	adds	r1, r4, r3
 800821e:	1c5a      	adds	r2, r3, #1
 8008220:	2030      	movs	r0, #48	; 0x30
 8008222:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008226:	4422      	add	r2, r4
 8008228:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800822c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008230:	3302      	adds	r3, #2
 8008232:	e7c7      	b.n	80081c4 <_printf_common+0x58>
 8008234:	2301      	movs	r3, #1
 8008236:	4622      	mov	r2, r4
 8008238:	4649      	mov	r1, r9
 800823a:	4638      	mov	r0, r7
 800823c:	47c0      	blx	r8
 800823e:	3001      	adds	r0, #1
 8008240:	d0e6      	beq.n	8008210 <_printf_common+0xa4>
 8008242:	3601      	adds	r6, #1
 8008244:	e7d9      	b.n	80081fa <_printf_common+0x8e>
	...

08008248 <_printf_i>:
 8008248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800824c:	7e0f      	ldrb	r7, [r1, #24]
 800824e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008250:	2f78      	cmp	r7, #120	; 0x78
 8008252:	4691      	mov	r9, r2
 8008254:	4680      	mov	r8, r0
 8008256:	460c      	mov	r4, r1
 8008258:	469a      	mov	sl, r3
 800825a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800825e:	d807      	bhi.n	8008270 <_printf_i+0x28>
 8008260:	2f62      	cmp	r7, #98	; 0x62
 8008262:	d80a      	bhi.n	800827a <_printf_i+0x32>
 8008264:	2f00      	cmp	r7, #0
 8008266:	f000 80d4 	beq.w	8008412 <_printf_i+0x1ca>
 800826a:	2f58      	cmp	r7, #88	; 0x58
 800826c:	f000 80c0 	beq.w	80083f0 <_printf_i+0x1a8>
 8008270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008274:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008278:	e03a      	b.n	80082f0 <_printf_i+0xa8>
 800827a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800827e:	2b15      	cmp	r3, #21
 8008280:	d8f6      	bhi.n	8008270 <_printf_i+0x28>
 8008282:	a101      	add	r1, pc, #4	; (adr r1, 8008288 <_printf_i+0x40>)
 8008284:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008288:	080082e1 	.word	0x080082e1
 800828c:	080082f5 	.word	0x080082f5
 8008290:	08008271 	.word	0x08008271
 8008294:	08008271 	.word	0x08008271
 8008298:	08008271 	.word	0x08008271
 800829c:	08008271 	.word	0x08008271
 80082a0:	080082f5 	.word	0x080082f5
 80082a4:	08008271 	.word	0x08008271
 80082a8:	08008271 	.word	0x08008271
 80082ac:	08008271 	.word	0x08008271
 80082b0:	08008271 	.word	0x08008271
 80082b4:	080083f9 	.word	0x080083f9
 80082b8:	08008321 	.word	0x08008321
 80082bc:	080083b3 	.word	0x080083b3
 80082c0:	08008271 	.word	0x08008271
 80082c4:	08008271 	.word	0x08008271
 80082c8:	0800841b 	.word	0x0800841b
 80082cc:	08008271 	.word	0x08008271
 80082d0:	08008321 	.word	0x08008321
 80082d4:	08008271 	.word	0x08008271
 80082d8:	08008271 	.word	0x08008271
 80082dc:	080083bb 	.word	0x080083bb
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	1d1a      	adds	r2, r3, #4
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	602a      	str	r2, [r5, #0]
 80082e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082f0:	2301      	movs	r3, #1
 80082f2:	e09f      	b.n	8008434 <_printf_i+0x1ec>
 80082f4:	6820      	ldr	r0, [r4, #0]
 80082f6:	682b      	ldr	r3, [r5, #0]
 80082f8:	0607      	lsls	r7, r0, #24
 80082fa:	f103 0104 	add.w	r1, r3, #4
 80082fe:	6029      	str	r1, [r5, #0]
 8008300:	d501      	bpl.n	8008306 <_printf_i+0xbe>
 8008302:	681e      	ldr	r6, [r3, #0]
 8008304:	e003      	b.n	800830e <_printf_i+0xc6>
 8008306:	0646      	lsls	r6, r0, #25
 8008308:	d5fb      	bpl.n	8008302 <_printf_i+0xba>
 800830a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800830e:	2e00      	cmp	r6, #0
 8008310:	da03      	bge.n	800831a <_printf_i+0xd2>
 8008312:	232d      	movs	r3, #45	; 0x2d
 8008314:	4276      	negs	r6, r6
 8008316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800831a:	485a      	ldr	r0, [pc, #360]	; (8008484 <_printf_i+0x23c>)
 800831c:	230a      	movs	r3, #10
 800831e:	e012      	b.n	8008346 <_printf_i+0xfe>
 8008320:	682b      	ldr	r3, [r5, #0]
 8008322:	6820      	ldr	r0, [r4, #0]
 8008324:	1d19      	adds	r1, r3, #4
 8008326:	6029      	str	r1, [r5, #0]
 8008328:	0605      	lsls	r5, r0, #24
 800832a:	d501      	bpl.n	8008330 <_printf_i+0xe8>
 800832c:	681e      	ldr	r6, [r3, #0]
 800832e:	e002      	b.n	8008336 <_printf_i+0xee>
 8008330:	0641      	lsls	r1, r0, #25
 8008332:	d5fb      	bpl.n	800832c <_printf_i+0xe4>
 8008334:	881e      	ldrh	r6, [r3, #0]
 8008336:	4853      	ldr	r0, [pc, #332]	; (8008484 <_printf_i+0x23c>)
 8008338:	2f6f      	cmp	r7, #111	; 0x6f
 800833a:	bf0c      	ite	eq
 800833c:	2308      	moveq	r3, #8
 800833e:	230a      	movne	r3, #10
 8008340:	2100      	movs	r1, #0
 8008342:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008346:	6865      	ldr	r5, [r4, #4]
 8008348:	60a5      	str	r5, [r4, #8]
 800834a:	2d00      	cmp	r5, #0
 800834c:	bfa2      	ittt	ge
 800834e:	6821      	ldrge	r1, [r4, #0]
 8008350:	f021 0104 	bicge.w	r1, r1, #4
 8008354:	6021      	strge	r1, [r4, #0]
 8008356:	b90e      	cbnz	r6, 800835c <_printf_i+0x114>
 8008358:	2d00      	cmp	r5, #0
 800835a:	d04b      	beq.n	80083f4 <_printf_i+0x1ac>
 800835c:	4615      	mov	r5, r2
 800835e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008362:	fb03 6711 	mls	r7, r3, r1, r6
 8008366:	5dc7      	ldrb	r7, [r0, r7]
 8008368:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800836c:	4637      	mov	r7, r6
 800836e:	42bb      	cmp	r3, r7
 8008370:	460e      	mov	r6, r1
 8008372:	d9f4      	bls.n	800835e <_printf_i+0x116>
 8008374:	2b08      	cmp	r3, #8
 8008376:	d10b      	bne.n	8008390 <_printf_i+0x148>
 8008378:	6823      	ldr	r3, [r4, #0]
 800837a:	07de      	lsls	r6, r3, #31
 800837c:	d508      	bpl.n	8008390 <_printf_i+0x148>
 800837e:	6923      	ldr	r3, [r4, #16]
 8008380:	6861      	ldr	r1, [r4, #4]
 8008382:	4299      	cmp	r1, r3
 8008384:	bfde      	ittt	le
 8008386:	2330      	movle	r3, #48	; 0x30
 8008388:	f805 3c01 	strble.w	r3, [r5, #-1]
 800838c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008390:	1b52      	subs	r2, r2, r5
 8008392:	6122      	str	r2, [r4, #16]
 8008394:	f8cd a000 	str.w	sl, [sp]
 8008398:	464b      	mov	r3, r9
 800839a:	aa03      	add	r2, sp, #12
 800839c:	4621      	mov	r1, r4
 800839e:	4640      	mov	r0, r8
 80083a0:	f7ff fee4 	bl	800816c <_printf_common>
 80083a4:	3001      	adds	r0, #1
 80083a6:	d14a      	bne.n	800843e <_printf_i+0x1f6>
 80083a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083ac:	b004      	add	sp, #16
 80083ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b2:	6823      	ldr	r3, [r4, #0]
 80083b4:	f043 0320 	orr.w	r3, r3, #32
 80083b8:	6023      	str	r3, [r4, #0]
 80083ba:	4833      	ldr	r0, [pc, #204]	; (8008488 <_printf_i+0x240>)
 80083bc:	2778      	movs	r7, #120	; 0x78
 80083be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	6829      	ldr	r1, [r5, #0]
 80083c6:	061f      	lsls	r7, r3, #24
 80083c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80083cc:	d402      	bmi.n	80083d4 <_printf_i+0x18c>
 80083ce:	065f      	lsls	r7, r3, #25
 80083d0:	bf48      	it	mi
 80083d2:	b2b6      	uxthmi	r6, r6
 80083d4:	07df      	lsls	r7, r3, #31
 80083d6:	bf48      	it	mi
 80083d8:	f043 0320 	orrmi.w	r3, r3, #32
 80083dc:	6029      	str	r1, [r5, #0]
 80083de:	bf48      	it	mi
 80083e0:	6023      	strmi	r3, [r4, #0]
 80083e2:	b91e      	cbnz	r6, 80083ec <_printf_i+0x1a4>
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	f023 0320 	bic.w	r3, r3, #32
 80083ea:	6023      	str	r3, [r4, #0]
 80083ec:	2310      	movs	r3, #16
 80083ee:	e7a7      	b.n	8008340 <_printf_i+0xf8>
 80083f0:	4824      	ldr	r0, [pc, #144]	; (8008484 <_printf_i+0x23c>)
 80083f2:	e7e4      	b.n	80083be <_printf_i+0x176>
 80083f4:	4615      	mov	r5, r2
 80083f6:	e7bd      	b.n	8008374 <_printf_i+0x12c>
 80083f8:	682b      	ldr	r3, [r5, #0]
 80083fa:	6826      	ldr	r6, [r4, #0]
 80083fc:	6961      	ldr	r1, [r4, #20]
 80083fe:	1d18      	adds	r0, r3, #4
 8008400:	6028      	str	r0, [r5, #0]
 8008402:	0635      	lsls	r5, r6, #24
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	d501      	bpl.n	800840c <_printf_i+0x1c4>
 8008408:	6019      	str	r1, [r3, #0]
 800840a:	e002      	b.n	8008412 <_printf_i+0x1ca>
 800840c:	0670      	lsls	r0, r6, #25
 800840e:	d5fb      	bpl.n	8008408 <_printf_i+0x1c0>
 8008410:	8019      	strh	r1, [r3, #0]
 8008412:	2300      	movs	r3, #0
 8008414:	6123      	str	r3, [r4, #16]
 8008416:	4615      	mov	r5, r2
 8008418:	e7bc      	b.n	8008394 <_printf_i+0x14c>
 800841a:	682b      	ldr	r3, [r5, #0]
 800841c:	1d1a      	adds	r2, r3, #4
 800841e:	602a      	str	r2, [r5, #0]
 8008420:	681d      	ldr	r5, [r3, #0]
 8008422:	6862      	ldr	r2, [r4, #4]
 8008424:	2100      	movs	r1, #0
 8008426:	4628      	mov	r0, r5
 8008428:	f7f7 feda 	bl	80001e0 <memchr>
 800842c:	b108      	cbz	r0, 8008432 <_printf_i+0x1ea>
 800842e:	1b40      	subs	r0, r0, r5
 8008430:	6060      	str	r0, [r4, #4]
 8008432:	6863      	ldr	r3, [r4, #4]
 8008434:	6123      	str	r3, [r4, #16]
 8008436:	2300      	movs	r3, #0
 8008438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800843c:	e7aa      	b.n	8008394 <_printf_i+0x14c>
 800843e:	6923      	ldr	r3, [r4, #16]
 8008440:	462a      	mov	r2, r5
 8008442:	4649      	mov	r1, r9
 8008444:	4640      	mov	r0, r8
 8008446:	47d0      	blx	sl
 8008448:	3001      	adds	r0, #1
 800844a:	d0ad      	beq.n	80083a8 <_printf_i+0x160>
 800844c:	6823      	ldr	r3, [r4, #0]
 800844e:	079b      	lsls	r3, r3, #30
 8008450:	d413      	bmi.n	800847a <_printf_i+0x232>
 8008452:	68e0      	ldr	r0, [r4, #12]
 8008454:	9b03      	ldr	r3, [sp, #12]
 8008456:	4298      	cmp	r0, r3
 8008458:	bfb8      	it	lt
 800845a:	4618      	movlt	r0, r3
 800845c:	e7a6      	b.n	80083ac <_printf_i+0x164>
 800845e:	2301      	movs	r3, #1
 8008460:	4632      	mov	r2, r6
 8008462:	4649      	mov	r1, r9
 8008464:	4640      	mov	r0, r8
 8008466:	47d0      	blx	sl
 8008468:	3001      	adds	r0, #1
 800846a:	d09d      	beq.n	80083a8 <_printf_i+0x160>
 800846c:	3501      	adds	r5, #1
 800846e:	68e3      	ldr	r3, [r4, #12]
 8008470:	9903      	ldr	r1, [sp, #12]
 8008472:	1a5b      	subs	r3, r3, r1
 8008474:	42ab      	cmp	r3, r5
 8008476:	dcf2      	bgt.n	800845e <_printf_i+0x216>
 8008478:	e7eb      	b.n	8008452 <_printf_i+0x20a>
 800847a:	2500      	movs	r5, #0
 800847c:	f104 0619 	add.w	r6, r4, #25
 8008480:	e7f5      	b.n	800846e <_printf_i+0x226>
 8008482:	bf00      	nop
 8008484:	0800a96a 	.word	0x0800a96a
 8008488:	0800a97b 	.word	0x0800a97b

0800848c <std>:
 800848c:	2300      	movs	r3, #0
 800848e:	b510      	push	{r4, lr}
 8008490:	4604      	mov	r4, r0
 8008492:	e9c0 3300 	strd	r3, r3, [r0]
 8008496:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800849a:	6083      	str	r3, [r0, #8]
 800849c:	8181      	strh	r1, [r0, #12]
 800849e:	6643      	str	r3, [r0, #100]	; 0x64
 80084a0:	81c2      	strh	r2, [r0, #14]
 80084a2:	6183      	str	r3, [r0, #24]
 80084a4:	4619      	mov	r1, r3
 80084a6:	2208      	movs	r2, #8
 80084a8:	305c      	adds	r0, #92	; 0x5c
 80084aa:	f000 f914 	bl	80086d6 <memset>
 80084ae:	4b0d      	ldr	r3, [pc, #52]	; (80084e4 <std+0x58>)
 80084b0:	6263      	str	r3, [r4, #36]	; 0x24
 80084b2:	4b0d      	ldr	r3, [pc, #52]	; (80084e8 <std+0x5c>)
 80084b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80084b6:	4b0d      	ldr	r3, [pc, #52]	; (80084ec <std+0x60>)
 80084b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084ba:	4b0d      	ldr	r3, [pc, #52]	; (80084f0 <std+0x64>)
 80084bc:	6323      	str	r3, [r4, #48]	; 0x30
 80084be:	4b0d      	ldr	r3, [pc, #52]	; (80084f4 <std+0x68>)
 80084c0:	6224      	str	r4, [r4, #32]
 80084c2:	429c      	cmp	r4, r3
 80084c4:	d006      	beq.n	80084d4 <std+0x48>
 80084c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80084ca:	4294      	cmp	r4, r2
 80084cc:	d002      	beq.n	80084d4 <std+0x48>
 80084ce:	33d0      	adds	r3, #208	; 0xd0
 80084d0:	429c      	cmp	r4, r3
 80084d2:	d105      	bne.n	80084e0 <std+0x54>
 80084d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80084d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084dc:	f000 b978 	b.w	80087d0 <__retarget_lock_init_recursive>
 80084e0:	bd10      	pop	{r4, pc}
 80084e2:	bf00      	nop
 80084e4:	08008651 	.word	0x08008651
 80084e8:	08008673 	.word	0x08008673
 80084ec:	080086ab 	.word	0x080086ab
 80084f0:	080086cf 	.word	0x080086cf
 80084f4:	200003a8 	.word	0x200003a8

080084f8 <stdio_exit_handler>:
 80084f8:	4a02      	ldr	r2, [pc, #8]	; (8008504 <stdio_exit_handler+0xc>)
 80084fa:	4903      	ldr	r1, [pc, #12]	; (8008508 <stdio_exit_handler+0x10>)
 80084fc:	4803      	ldr	r0, [pc, #12]	; (800850c <stdio_exit_handler+0x14>)
 80084fe:	f000 b869 	b.w	80085d4 <_fwalk_sglue>
 8008502:	bf00      	nop
 8008504:	20000014 	.word	0x20000014
 8008508:	0800a181 	.word	0x0800a181
 800850c:	20000020 	.word	0x20000020

08008510 <cleanup_stdio>:
 8008510:	6841      	ldr	r1, [r0, #4]
 8008512:	4b0c      	ldr	r3, [pc, #48]	; (8008544 <cleanup_stdio+0x34>)
 8008514:	4299      	cmp	r1, r3
 8008516:	b510      	push	{r4, lr}
 8008518:	4604      	mov	r4, r0
 800851a:	d001      	beq.n	8008520 <cleanup_stdio+0x10>
 800851c:	f001 fe30 	bl	800a180 <_fflush_r>
 8008520:	68a1      	ldr	r1, [r4, #8]
 8008522:	4b09      	ldr	r3, [pc, #36]	; (8008548 <cleanup_stdio+0x38>)
 8008524:	4299      	cmp	r1, r3
 8008526:	d002      	beq.n	800852e <cleanup_stdio+0x1e>
 8008528:	4620      	mov	r0, r4
 800852a:	f001 fe29 	bl	800a180 <_fflush_r>
 800852e:	68e1      	ldr	r1, [r4, #12]
 8008530:	4b06      	ldr	r3, [pc, #24]	; (800854c <cleanup_stdio+0x3c>)
 8008532:	4299      	cmp	r1, r3
 8008534:	d004      	beq.n	8008540 <cleanup_stdio+0x30>
 8008536:	4620      	mov	r0, r4
 8008538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800853c:	f001 be20 	b.w	800a180 <_fflush_r>
 8008540:	bd10      	pop	{r4, pc}
 8008542:	bf00      	nop
 8008544:	200003a8 	.word	0x200003a8
 8008548:	20000410 	.word	0x20000410
 800854c:	20000478 	.word	0x20000478

08008550 <global_stdio_init.part.0>:
 8008550:	b510      	push	{r4, lr}
 8008552:	4b0b      	ldr	r3, [pc, #44]	; (8008580 <global_stdio_init.part.0+0x30>)
 8008554:	4c0b      	ldr	r4, [pc, #44]	; (8008584 <global_stdio_init.part.0+0x34>)
 8008556:	4a0c      	ldr	r2, [pc, #48]	; (8008588 <global_stdio_init.part.0+0x38>)
 8008558:	601a      	str	r2, [r3, #0]
 800855a:	4620      	mov	r0, r4
 800855c:	2200      	movs	r2, #0
 800855e:	2104      	movs	r1, #4
 8008560:	f7ff ff94 	bl	800848c <std>
 8008564:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008568:	2201      	movs	r2, #1
 800856a:	2109      	movs	r1, #9
 800856c:	f7ff ff8e 	bl	800848c <std>
 8008570:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008574:	2202      	movs	r2, #2
 8008576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800857a:	2112      	movs	r1, #18
 800857c:	f7ff bf86 	b.w	800848c <std>
 8008580:	200004e0 	.word	0x200004e0
 8008584:	200003a8 	.word	0x200003a8
 8008588:	080084f9 	.word	0x080084f9

0800858c <__sfp_lock_acquire>:
 800858c:	4801      	ldr	r0, [pc, #4]	; (8008594 <__sfp_lock_acquire+0x8>)
 800858e:	f000 b920 	b.w	80087d2 <__retarget_lock_acquire_recursive>
 8008592:	bf00      	nop
 8008594:	200004e9 	.word	0x200004e9

08008598 <__sfp_lock_release>:
 8008598:	4801      	ldr	r0, [pc, #4]	; (80085a0 <__sfp_lock_release+0x8>)
 800859a:	f000 b91b 	b.w	80087d4 <__retarget_lock_release_recursive>
 800859e:	bf00      	nop
 80085a0:	200004e9 	.word	0x200004e9

080085a4 <__sinit>:
 80085a4:	b510      	push	{r4, lr}
 80085a6:	4604      	mov	r4, r0
 80085a8:	f7ff fff0 	bl	800858c <__sfp_lock_acquire>
 80085ac:	6a23      	ldr	r3, [r4, #32]
 80085ae:	b11b      	cbz	r3, 80085b8 <__sinit+0x14>
 80085b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085b4:	f7ff bff0 	b.w	8008598 <__sfp_lock_release>
 80085b8:	4b04      	ldr	r3, [pc, #16]	; (80085cc <__sinit+0x28>)
 80085ba:	6223      	str	r3, [r4, #32]
 80085bc:	4b04      	ldr	r3, [pc, #16]	; (80085d0 <__sinit+0x2c>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1f5      	bne.n	80085b0 <__sinit+0xc>
 80085c4:	f7ff ffc4 	bl	8008550 <global_stdio_init.part.0>
 80085c8:	e7f2      	b.n	80085b0 <__sinit+0xc>
 80085ca:	bf00      	nop
 80085cc:	08008511 	.word	0x08008511
 80085d0:	200004e0 	.word	0x200004e0

080085d4 <_fwalk_sglue>:
 80085d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085d8:	4607      	mov	r7, r0
 80085da:	4688      	mov	r8, r1
 80085dc:	4614      	mov	r4, r2
 80085de:	2600      	movs	r6, #0
 80085e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085e4:	f1b9 0901 	subs.w	r9, r9, #1
 80085e8:	d505      	bpl.n	80085f6 <_fwalk_sglue+0x22>
 80085ea:	6824      	ldr	r4, [r4, #0]
 80085ec:	2c00      	cmp	r4, #0
 80085ee:	d1f7      	bne.n	80085e0 <_fwalk_sglue+0xc>
 80085f0:	4630      	mov	r0, r6
 80085f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085f6:	89ab      	ldrh	r3, [r5, #12]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d907      	bls.n	800860c <_fwalk_sglue+0x38>
 80085fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008600:	3301      	adds	r3, #1
 8008602:	d003      	beq.n	800860c <_fwalk_sglue+0x38>
 8008604:	4629      	mov	r1, r5
 8008606:	4638      	mov	r0, r7
 8008608:	47c0      	blx	r8
 800860a:	4306      	orrs	r6, r0
 800860c:	3568      	adds	r5, #104	; 0x68
 800860e:	e7e9      	b.n	80085e4 <_fwalk_sglue+0x10>

08008610 <siprintf>:
 8008610:	b40e      	push	{r1, r2, r3}
 8008612:	b500      	push	{lr}
 8008614:	b09c      	sub	sp, #112	; 0x70
 8008616:	ab1d      	add	r3, sp, #116	; 0x74
 8008618:	9002      	str	r0, [sp, #8]
 800861a:	9006      	str	r0, [sp, #24]
 800861c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008620:	4809      	ldr	r0, [pc, #36]	; (8008648 <siprintf+0x38>)
 8008622:	9107      	str	r1, [sp, #28]
 8008624:	9104      	str	r1, [sp, #16]
 8008626:	4909      	ldr	r1, [pc, #36]	; (800864c <siprintf+0x3c>)
 8008628:	f853 2b04 	ldr.w	r2, [r3], #4
 800862c:	9105      	str	r1, [sp, #20]
 800862e:	6800      	ldr	r0, [r0, #0]
 8008630:	9301      	str	r3, [sp, #4]
 8008632:	a902      	add	r1, sp, #8
 8008634:	f001 fc20 	bl	8009e78 <_svfiprintf_r>
 8008638:	9b02      	ldr	r3, [sp, #8]
 800863a:	2200      	movs	r2, #0
 800863c:	701a      	strb	r2, [r3, #0]
 800863e:	b01c      	add	sp, #112	; 0x70
 8008640:	f85d eb04 	ldr.w	lr, [sp], #4
 8008644:	b003      	add	sp, #12
 8008646:	4770      	bx	lr
 8008648:	2000006c 	.word	0x2000006c
 800864c:	ffff0208 	.word	0xffff0208

08008650 <__sread>:
 8008650:	b510      	push	{r4, lr}
 8008652:	460c      	mov	r4, r1
 8008654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008658:	f000 f86c 	bl	8008734 <_read_r>
 800865c:	2800      	cmp	r0, #0
 800865e:	bfab      	itete	ge
 8008660:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008662:	89a3      	ldrhlt	r3, [r4, #12]
 8008664:	181b      	addge	r3, r3, r0
 8008666:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800866a:	bfac      	ite	ge
 800866c:	6563      	strge	r3, [r4, #84]	; 0x54
 800866e:	81a3      	strhlt	r3, [r4, #12]
 8008670:	bd10      	pop	{r4, pc}

08008672 <__swrite>:
 8008672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008676:	461f      	mov	r7, r3
 8008678:	898b      	ldrh	r3, [r1, #12]
 800867a:	05db      	lsls	r3, r3, #23
 800867c:	4605      	mov	r5, r0
 800867e:	460c      	mov	r4, r1
 8008680:	4616      	mov	r6, r2
 8008682:	d505      	bpl.n	8008690 <__swrite+0x1e>
 8008684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008688:	2302      	movs	r3, #2
 800868a:	2200      	movs	r2, #0
 800868c:	f000 f840 	bl	8008710 <_lseek_r>
 8008690:	89a3      	ldrh	r3, [r4, #12]
 8008692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008696:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800869a:	81a3      	strh	r3, [r4, #12]
 800869c:	4632      	mov	r2, r6
 800869e:	463b      	mov	r3, r7
 80086a0:	4628      	mov	r0, r5
 80086a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086a6:	f000 b857 	b.w	8008758 <_write_r>

080086aa <__sseek>:
 80086aa:	b510      	push	{r4, lr}
 80086ac:	460c      	mov	r4, r1
 80086ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086b2:	f000 f82d 	bl	8008710 <_lseek_r>
 80086b6:	1c43      	adds	r3, r0, #1
 80086b8:	89a3      	ldrh	r3, [r4, #12]
 80086ba:	bf15      	itete	ne
 80086bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80086be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80086c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80086c6:	81a3      	strheq	r3, [r4, #12]
 80086c8:	bf18      	it	ne
 80086ca:	81a3      	strhne	r3, [r4, #12]
 80086cc:	bd10      	pop	{r4, pc}

080086ce <__sclose>:
 80086ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d2:	f000 b80d 	b.w	80086f0 <_close_r>

080086d6 <memset>:
 80086d6:	4402      	add	r2, r0
 80086d8:	4603      	mov	r3, r0
 80086da:	4293      	cmp	r3, r2
 80086dc:	d100      	bne.n	80086e0 <memset+0xa>
 80086de:	4770      	bx	lr
 80086e0:	f803 1b01 	strb.w	r1, [r3], #1
 80086e4:	e7f9      	b.n	80086da <memset+0x4>
	...

080086e8 <_localeconv_r>:
 80086e8:	4800      	ldr	r0, [pc, #0]	; (80086ec <_localeconv_r+0x4>)
 80086ea:	4770      	bx	lr
 80086ec:	20000160 	.word	0x20000160

080086f0 <_close_r>:
 80086f0:	b538      	push	{r3, r4, r5, lr}
 80086f2:	4d06      	ldr	r5, [pc, #24]	; (800870c <_close_r+0x1c>)
 80086f4:	2300      	movs	r3, #0
 80086f6:	4604      	mov	r4, r0
 80086f8:	4608      	mov	r0, r1
 80086fa:	602b      	str	r3, [r5, #0]
 80086fc:	f7f9 f913 	bl	8001926 <_close>
 8008700:	1c43      	adds	r3, r0, #1
 8008702:	d102      	bne.n	800870a <_close_r+0x1a>
 8008704:	682b      	ldr	r3, [r5, #0]
 8008706:	b103      	cbz	r3, 800870a <_close_r+0x1a>
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	bd38      	pop	{r3, r4, r5, pc}
 800870c:	200004e4 	.word	0x200004e4

08008710 <_lseek_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	4d07      	ldr	r5, [pc, #28]	; (8008730 <_lseek_r+0x20>)
 8008714:	4604      	mov	r4, r0
 8008716:	4608      	mov	r0, r1
 8008718:	4611      	mov	r1, r2
 800871a:	2200      	movs	r2, #0
 800871c:	602a      	str	r2, [r5, #0]
 800871e:	461a      	mov	r2, r3
 8008720:	f7f9 f928 	bl	8001974 <_lseek>
 8008724:	1c43      	adds	r3, r0, #1
 8008726:	d102      	bne.n	800872e <_lseek_r+0x1e>
 8008728:	682b      	ldr	r3, [r5, #0]
 800872a:	b103      	cbz	r3, 800872e <_lseek_r+0x1e>
 800872c:	6023      	str	r3, [r4, #0]
 800872e:	bd38      	pop	{r3, r4, r5, pc}
 8008730:	200004e4 	.word	0x200004e4

08008734 <_read_r>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	4d07      	ldr	r5, [pc, #28]	; (8008754 <_read_r+0x20>)
 8008738:	4604      	mov	r4, r0
 800873a:	4608      	mov	r0, r1
 800873c:	4611      	mov	r1, r2
 800873e:	2200      	movs	r2, #0
 8008740:	602a      	str	r2, [r5, #0]
 8008742:	461a      	mov	r2, r3
 8008744:	f7f9 f8b6 	bl	80018b4 <_read>
 8008748:	1c43      	adds	r3, r0, #1
 800874a:	d102      	bne.n	8008752 <_read_r+0x1e>
 800874c:	682b      	ldr	r3, [r5, #0]
 800874e:	b103      	cbz	r3, 8008752 <_read_r+0x1e>
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	bd38      	pop	{r3, r4, r5, pc}
 8008754:	200004e4 	.word	0x200004e4

08008758 <_write_r>:
 8008758:	b538      	push	{r3, r4, r5, lr}
 800875a:	4d07      	ldr	r5, [pc, #28]	; (8008778 <_write_r+0x20>)
 800875c:	4604      	mov	r4, r0
 800875e:	4608      	mov	r0, r1
 8008760:	4611      	mov	r1, r2
 8008762:	2200      	movs	r2, #0
 8008764:	602a      	str	r2, [r5, #0]
 8008766:	461a      	mov	r2, r3
 8008768:	f7f9 f8c1 	bl	80018ee <_write>
 800876c:	1c43      	adds	r3, r0, #1
 800876e:	d102      	bne.n	8008776 <_write_r+0x1e>
 8008770:	682b      	ldr	r3, [r5, #0]
 8008772:	b103      	cbz	r3, 8008776 <_write_r+0x1e>
 8008774:	6023      	str	r3, [r4, #0]
 8008776:	bd38      	pop	{r3, r4, r5, pc}
 8008778:	200004e4 	.word	0x200004e4

0800877c <__errno>:
 800877c:	4b01      	ldr	r3, [pc, #4]	; (8008784 <__errno+0x8>)
 800877e:	6818      	ldr	r0, [r3, #0]
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	2000006c 	.word	0x2000006c

08008788 <__libc_init_array>:
 8008788:	b570      	push	{r4, r5, r6, lr}
 800878a:	4d0d      	ldr	r5, [pc, #52]	; (80087c0 <__libc_init_array+0x38>)
 800878c:	4c0d      	ldr	r4, [pc, #52]	; (80087c4 <__libc_init_array+0x3c>)
 800878e:	1b64      	subs	r4, r4, r5
 8008790:	10a4      	asrs	r4, r4, #2
 8008792:	2600      	movs	r6, #0
 8008794:	42a6      	cmp	r6, r4
 8008796:	d109      	bne.n	80087ac <__libc_init_array+0x24>
 8008798:	4d0b      	ldr	r5, [pc, #44]	; (80087c8 <__libc_init_array+0x40>)
 800879a:	4c0c      	ldr	r4, [pc, #48]	; (80087cc <__libc_init_array+0x44>)
 800879c:	f002 f894 	bl	800a8c8 <_init>
 80087a0:	1b64      	subs	r4, r4, r5
 80087a2:	10a4      	asrs	r4, r4, #2
 80087a4:	2600      	movs	r6, #0
 80087a6:	42a6      	cmp	r6, r4
 80087a8:	d105      	bne.n	80087b6 <__libc_init_array+0x2e>
 80087aa:	bd70      	pop	{r4, r5, r6, pc}
 80087ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80087b0:	4798      	blx	r3
 80087b2:	3601      	adds	r6, #1
 80087b4:	e7ee      	b.n	8008794 <__libc_init_array+0xc>
 80087b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ba:	4798      	blx	r3
 80087bc:	3601      	adds	r6, #1
 80087be:	e7f2      	b.n	80087a6 <__libc_init_array+0x1e>
 80087c0:	0800acd4 	.word	0x0800acd4
 80087c4:	0800acd4 	.word	0x0800acd4
 80087c8:	0800acd4 	.word	0x0800acd4
 80087cc:	0800acd8 	.word	0x0800acd8

080087d0 <__retarget_lock_init_recursive>:
 80087d0:	4770      	bx	lr

080087d2 <__retarget_lock_acquire_recursive>:
 80087d2:	4770      	bx	lr

080087d4 <__retarget_lock_release_recursive>:
 80087d4:	4770      	bx	lr

080087d6 <quorem>:
 80087d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087da:	6903      	ldr	r3, [r0, #16]
 80087dc:	690c      	ldr	r4, [r1, #16]
 80087de:	42a3      	cmp	r3, r4
 80087e0:	4607      	mov	r7, r0
 80087e2:	db7e      	blt.n	80088e2 <quorem+0x10c>
 80087e4:	3c01      	subs	r4, #1
 80087e6:	f101 0814 	add.w	r8, r1, #20
 80087ea:	f100 0514 	add.w	r5, r0, #20
 80087ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087f2:	9301      	str	r3, [sp, #4]
 80087f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80087f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087fc:	3301      	adds	r3, #1
 80087fe:	429a      	cmp	r2, r3
 8008800:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008804:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008808:	fbb2 f6f3 	udiv	r6, r2, r3
 800880c:	d331      	bcc.n	8008872 <quorem+0x9c>
 800880e:	f04f 0e00 	mov.w	lr, #0
 8008812:	4640      	mov	r0, r8
 8008814:	46ac      	mov	ip, r5
 8008816:	46f2      	mov	sl, lr
 8008818:	f850 2b04 	ldr.w	r2, [r0], #4
 800881c:	b293      	uxth	r3, r2
 800881e:	fb06 e303 	mla	r3, r6, r3, lr
 8008822:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008826:	0c1a      	lsrs	r2, r3, #16
 8008828:	b29b      	uxth	r3, r3
 800882a:	ebaa 0303 	sub.w	r3, sl, r3
 800882e:	f8dc a000 	ldr.w	sl, [ip]
 8008832:	fa13 f38a 	uxtah	r3, r3, sl
 8008836:	fb06 220e 	mla	r2, r6, lr, r2
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	9b00      	ldr	r3, [sp, #0]
 800883e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008842:	b292      	uxth	r2, r2
 8008844:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008848:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800884c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008850:	4581      	cmp	r9, r0
 8008852:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008856:	f84c 3b04 	str.w	r3, [ip], #4
 800885a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800885e:	d2db      	bcs.n	8008818 <quorem+0x42>
 8008860:	f855 300b 	ldr.w	r3, [r5, fp]
 8008864:	b92b      	cbnz	r3, 8008872 <quorem+0x9c>
 8008866:	9b01      	ldr	r3, [sp, #4]
 8008868:	3b04      	subs	r3, #4
 800886a:	429d      	cmp	r5, r3
 800886c:	461a      	mov	r2, r3
 800886e:	d32c      	bcc.n	80088ca <quorem+0xf4>
 8008870:	613c      	str	r4, [r7, #16]
 8008872:	4638      	mov	r0, r7
 8008874:	f001 f9a6 	bl	8009bc4 <__mcmp>
 8008878:	2800      	cmp	r0, #0
 800887a:	db22      	blt.n	80088c2 <quorem+0xec>
 800887c:	3601      	adds	r6, #1
 800887e:	4629      	mov	r1, r5
 8008880:	2000      	movs	r0, #0
 8008882:	f858 2b04 	ldr.w	r2, [r8], #4
 8008886:	f8d1 c000 	ldr.w	ip, [r1]
 800888a:	b293      	uxth	r3, r2
 800888c:	1ac3      	subs	r3, r0, r3
 800888e:	0c12      	lsrs	r2, r2, #16
 8008890:	fa13 f38c 	uxtah	r3, r3, ip
 8008894:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008898:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800889c:	b29b      	uxth	r3, r3
 800889e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088a2:	45c1      	cmp	r9, r8
 80088a4:	f841 3b04 	str.w	r3, [r1], #4
 80088a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80088ac:	d2e9      	bcs.n	8008882 <quorem+0xac>
 80088ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088b6:	b922      	cbnz	r2, 80088c2 <quorem+0xec>
 80088b8:	3b04      	subs	r3, #4
 80088ba:	429d      	cmp	r5, r3
 80088bc:	461a      	mov	r2, r3
 80088be:	d30a      	bcc.n	80088d6 <quorem+0x100>
 80088c0:	613c      	str	r4, [r7, #16]
 80088c2:	4630      	mov	r0, r6
 80088c4:	b003      	add	sp, #12
 80088c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ca:	6812      	ldr	r2, [r2, #0]
 80088cc:	3b04      	subs	r3, #4
 80088ce:	2a00      	cmp	r2, #0
 80088d0:	d1ce      	bne.n	8008870 <quorem+0x9a>
 80088d2:	3c01      	subs	r4, #1
 80088d4:	e7c9      	b.n	800886a <quorem+0x94>
 80088d6:	6812      	ldr	r2, [r2, #0]
 80088d8:	3b04      	subs	r3, #4
 80088da:	2a00      	cmp	r2, #0
 80088dc:	d1f0      	bne.n	80088c0 <quorem+0xea>
 80088de:	3c01      	subs	r4, #1
 80088e0:	e7eb      	b.n	80088ba <quorem+0xe4>
 80088e2:	2000      	movs	r0, #0
 80088e4:	e7ee      	b.n	80088c4 <quorem+0xee>
	...

080088e8 <_dtoa_r>:
 80088e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ec:	ed2d 8b04 	vpush	{d8-d9}
 80088f0:	69c5      	ldr	r5, [r0, #28]
 80088f2:	b093      	sub	sp, #76	; 0x4c
 80088f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80088f8:	ec57 6b10 	vmov	r6, r7, d0
 80088fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008900:	9107      	str	r1, [sp, #28]
 8008902:	4604      	mov	r4, r0
 8008904:	920a      	str	r2, [sp, #40]	; 0x28
 8008906:	930d      	str	r3, [sp, #52]	; 0x34
 8008908:	b975      	cbnz	r5, 8008928 <_dtoa_r+0x40>
 800890a:	2010      	movs	r0, #16
 800890c:	f000 fe2a 	bl	8009564 <malloc>
 8008910:	4602      	mov	r2, r0
 8008912:	61e0      	str	r0, [r4, #28]
 8008914:	b920      	cbnz	r0, 8008920 <_dtoa_r+0x38>
 8008916:	4bae      	ldr	r3, [pc, #696]	; (8008bd0 <_dtoa_r+0x2e8>)
 8008918:	21ef      	movs	r1, #239	; 0xef
 800891a:	48ae      	ldr	r0, [pc, #696]	; (8008bd4 <_dtoa_r+0x2ec>)
 800891c:	f001 fc90 	bl	800a240 <__assert_func>
 8008920:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008924:	6005      	str	r5, [r0, #0]
 8008926:	60c5      	str	r5, [r0, #12]
 8008928:	69e3      	ldr	r3, [r4, #28]
 800892a:	6819      	ldr	r1, [r3, #0]
 800892c:	b151      	cbz	r1, 8008944 <_dtoa_r+0x5c>
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	604a      	str	r2, [r1, #4]
 8008932:	2301      	movs	r3, #1
 8008934:	4093      	lsls	r3, r2
 8008936:	608b      	str	r3, [r1, #8]
 8008938:	4620      	mov	r0, r4
 800893a:	f000 ff07 	bl	800974c <_Bfree>
 800893e:	69e3      	ldr	r3, [r4, #28]
 8008940:	2200      	movs	r2, #0
 8008942:	601a      	str	r2, [r3, #0]
 8008944:	1e3b      	subs	r3, r7, #0
 8008946:	bfbb      	ittet	lt
 8008948:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800894c:	9303      	strlt	r3, [sp, #12]
 800894e:	2300      	movge	r3, #0
 8008950:	2201      	movlt	r2, #1
 8008952:	bfac      	ite	ge
 8008954:	f8c8 3000 	strge.w	r3, [r8]
 8008958:	f8c8 2000 	strlt.w	r2, [r8]
 800895c:	4b9e      	ldr	r3, [pc, #632]	; (8008bd8 <_dtoa_r+0x2f0>)
 800895e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008962:	ea33 0308 	bics.w	r3, r3, r8
 8008966:	d11b      	bne.n	80089a0 <_dtoa_r+0xb8>
 8008968:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800896a:	f242 730f 	movw	r3, #9999	; 0x270f
 800896e:	6013      	str	r3, [r2, #0]
 8008970:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008974:	4333      	orrs	r3, r6
 8008976:	f000 8593 	beq.w	80094a0 <_dtoa_r+0xbb8>
 800897a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800897c:	b963      	cbnz	r3, 8008998 <_dtoa_r+0xb0>
 800897e:	4b97      	ldr	r3, [pc, #604]	; (8008bdc <_dtoa_r+0x2f4>)
 8008980:	e027      	b.n	80089d2 <_dtoa_r+0xea>
 8008982:	4b97      	ldr	r3, [pc, #604]	; (8008be0 <_dtoa_r+0x2f8>)
 8008984:	9300      	str	r3, [sp, #0]
 8008986:	3308      	adds	r3, #8
 8008988:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800898a:	6013      	str	r3, [r2, #0]
 800898c:	9800      	ldr	r0, [sp, #0]
 800898e:	b013      	add	sp, #76	; 0x4c
 8008990:	ecbd 8b04 	vpop	{d8-d9}
 8008994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008998:	4b90      	ldr	r3, [pc, #576]	; (8008bdc <_dtoa_r+0x2f4>)
 800899a:	9300      	str	r3, [sp, #0]
 800899c:	3303      	adds	r3, #3
 800899e:	e7f3      	b.n	8008988 <_dtoa_r+0xa0>
 80089a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80089a4:	2200      	movs	r2, #0
 80089a6:	ec51 0b17 	vmov	r0, r1, d7
 80089aa:	eeb0 8a47 	vmov.f32	s16, s14
 80089ae:	eef0 8a67 	vmov.f32	s17, s15
 80089b2:	2300      	movs	r3, #0
 80089b4:	f7f8 f890 	bl	8000ad8 <__aeabi_dcmpeq>
 80089b8:	4681      	mov	r9, r0
 80089ba:	b160      	cbz	r0, 80089d6 <_dtoa_r+0xee>
 80089bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089be:	2301      	movs	r3, #1
 80089c0:	6013      	str	r3, [r2, #0]
 80089c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f000 8568 	beq.w	800949a <_dtoa_r+0xbb2>
 80089ca:	4b86      	ldr	r3, [pc, #536]	; (8008be4 <_dtoa_r+0x2fc>)
 80089cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80089ce:	6013      	str	r3, [r2, #0]
 80089d0:	3b01      	subs	r3, #1
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	e7da      	b.n	800898c <_dtoa_r+0xa4>
 80089d6:	aa10      	add	r2, sp, #64	; 0x40
 80089d8:	a911      	add	r1, sp, #68	; 0x44
 80089da:	4620      	mov	r0, r4
 80089dc:	eeb0 0a48 	vmov.f32	s0, s16
 80089e0:	eef0 0a68 	vmov.f32	s1, s17
 80089e4:	f001 f994 	bl	8009d10 <__d2b>
 80089e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80089ec:	4682      	mov	sl, r0
 80089ee:	2d00      	cmp	r5, #0
 80089f0:	d07f      	beq.n	8008af2 <_dtoa_r+0x20a>
 80089f2:	ee18 3a90 	vmov	r3, s17
 80089f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80089fe:	ec51 0b18 	vmov	r0, r1, d8
 8008a02:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008a06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a0a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008a0e:	4619      	mov	r1, r3
 8008a10:	2200      	movs	r2, #0
 8008a12:	4b75      	ldr	r3, [pc, #468]	; (8008be8 <_dtoa_r+0x300>)
 8008a14:	f7f7 fc40 	bl	8000298 <__aeabi_dsub>
 8008a18:	a367      	add	r3, pc, #412	; (adr r3, 8008bb8 <_dtoa_r+0x2d0>)
 8008a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1e:	f7f7 fdf3 	bl	8000608 <__aeabi_dmul>
 8008a22:	a367      	add	r3, pc, #412	; (adr r3, 8008bc0 <_dtoa_r+0x2d8>)
 8008a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a28:	f7f7 fc38 	bl	800029c <__adddf3>
 8008a2c:	4606      	mov	r6, r0
 8008a2e:	4628      	mov	r0, r5
 8008a30:	460f      	mov	r7, r1
 8008a32:	f7f7 fd7f 	bl	8000534 <__aeabi_i2d>
 8008a36:	a364      	add	r3, pc, #400	; (adr r3, 8008bc8 <_dtoa_r+0x2e0>)
 8008a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3c:	f7f7 fde4 	bl	8000608 <__aeabi_dmul>
 8008a40:	4602      	mov	r2, r0
 8008a42:	460b      	mov	r3, r1
 8008a44:	4630      	mov	r0, r6
 8008a46:	4639      	mov	r1, r7
 8008a48:	f7f7 fc28 	bl	800029c <__adddf3>
 8008a4c:	4606      	mov	r6, r0
 8008a4e:	460f      	mov	r7, r1
 8008a50:	f7f8 f88a 	bl	8000b68 <__aeabi_d2iz>
 8008a54:	2200      	movs	r2, #0
 8008a56:	4683      	mov	fp, r0
 8008a58:	2300      	movs	r3, #0
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	4639      	mov	r1, r7
 8008a5e:	f7f8 f845 	bl	8000aec <__aeabi_dcmplt>
 8008a62:	b148      	cbz	r0, 8008a78 <_dtoa_r+0x190>
 8008a64:	4658      	mov	r0, fp
 8008a66:	f7f7 fd65 	bl	8000534 <__aeabi_i2d>
 8008a6a:	4632      	mov	r2, r6
 8008a6c:	463b      	mov	r3, r7
 8008a6e:	f7f8 f833 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a72:	b908      	cbnz	r0, 8008a78 <_dtoa_r+0x190>
 8008a74:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008a78:	f1bb 0f16 	cmp.w	fp, #22
 8008a7c:	d857      	bhi.n	8008b2e <_dtoa_r+0x246>
 8008a7e:	4b5b      	ldr	r3, [pc, #364]	; (8008bec <_dtoa_r+0x304>)
 8008a80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a88:	ec51 0b18 	vmov	r0, r1, d8
 8008a8c:	f7f8 f82e 	bl	8000aec <__aeabi_dcmplt>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d04e      	beq.n	8008b32 <_dtoa_r+0x24a>
 8008a94:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008a98:	2300      	movs	r3, #0
 8008a9a:	930c      	str	r3, [sp, #48]	; 0x30
 8008a9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a9e:	1b5b      	subs	r3, r3, r5
 8008aa0:	1e5a      	subs	r2, r3, #1
 8008aa2:	bf45      	ittet	mi
 8008aa4:	f1c3 0301 	rsbmi	r3, r3, #1
 8008aa8:	9305      	strmi	r3, [sp, #20]
 8008aaa:	2300      	movpl	r3, #0
 8008aac:	2300      	movmi	r3, #0
 8008aae:	9206      	str	r2, [sp, #24]
 8008ab0:	bf54      	ite	pl
 8008ab2:	9305      	strpl	r3, [sp, #20]
 8008ab4:	9306      	strmi	r3, [sp, #24]
 8008ab6:	f1bb 0f00 	cmp.w	fp, #0
 8008aba:	db3c      	blt.n	8008b36 <_dtoa_r+0x24e>
 8008abc:	9b06      	ldr	r3, [sp, #24]
 8008abe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008ac2:	445b      	add	r3, fp
 8008ac4:	9306      	str	r3, [sp, #24]
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	9308      	str	r3, [sp, #32]
 8008aca:	9b07      	ldr	r3, [sp, #28]
 8008acc:	2b09      	cmp	r3, #9
 8008ace:	d868      	bhi.n	8008ba2 <_dtoa_r+0x2ba>
 8008ad0:	2b05      	cmp	r3, #5
 8008ad2:	bfc4      	itt	gt
 8008ad4:	3b04      	subgt	r3, #4
 8008ad6:	9307      	strgt	r3, [sp, #28]
 8008ad8:	9b07      	ldr	r3, [sp, #28]
 8008ada:	f1a3 0302 	sub.w	r3, r3, #2
 8008ade:	bfcc      	ite	gt
 8008ae0:	2500      	movgt	r5, #0
 8008ae2:	2501      	movle	r5, #1
 8008ae4:	2b03      	cmp	r3, #3
 8008ae6:	f200 8085 	bhi.w	8008bf4 <_dtoa_r+0x30c>
 8008aea:	e8df f003 	tbb	[pc, r3]
 8008aee:	3b2e      	.short	0x3b2e
 8008af0:	5839      	.short	0x5839
 8008af2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008af6:	441d      	add	r5, r3
 8008af8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008afc:	2b20      	cmp	r3, #32
 8008afe:	bfc1      	itttt	gt
 8008b00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b04:	fa08 f803 	lslgt.w	r8, r8, r3
 8008b08:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008b0c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008b10:	bfd6      	itet	le
 8008b12:	f1c3 0320 	rsble	r3, r3, #32
 8008b16:	ea48 0003 	orrgt.w	r0, r8, r3
 8008b1a:	fa06 f003 	lslle.w	r0, r6, r3
 8008b1e:	f7f7 fcf9 	bl	8000514 <__aeabi_ui2d>
 8008b22:	2201      	movs	r2, #1
 8008b24:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008b28:	3d01      	subs	r5, #1
 8008b2a:	920e      	str	r2, [sp, #56]	; 0x38
 8008b2c:	e76f      	b.n	8008a0e <_dtoa_r+0x126>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e7b3      	b.n	8008a9a <_dtoa_r+0x1b2>
 8008b32:	900c      	str	r0, [sp, #48]	; 0x30
 8008b34:	e7b2      	b.n	8008a9c <_dtoa_r+0x1b4>
 8008b36:	9b05      	ldr	r3, [sp, #20]
 8008b38:	eba3 030b 	sub.w	r3, r3, fp
 8008b3c:	9305      	str	r3, [sp, #20]
 8008b3e:	f1cb 0300 	rsb	r3, fp, #0
 8008b42:	9308      	str	r3, [sp, #32]
 8008b44:	2300      	movs	r3, #0
 8008b46:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b48:	e7bf      	b.n	8008aca <_dtoa_r+0x1e2>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	dc52      	bgt.n	8008bfa <_dtoa_r+0x312>
 8008b54:	2301      	movs	r3, #1
 8008b56:	9301      	str	r3, [sp, #4]
 8008b58:	9304      	str	r3, [sp, #16]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	920a      	str	r2, [sp, #40]	; 0x28
 8008b5e:	e00b      	b.n	8008b78 <_dtoa_r+0x290>
 8008b60:	2301      	movs	r3, #1
 8008b62:	e7f3      	b.n	8008b4c <_dtoa_r+0x264>
 8008b64:	2300      	movs	r3, #0
 8008b66:	9309      	str	r3, [sp, #36]	; 0x24
 8008b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b6a:	445b      	add	r3, fp
 8008b6c:	9301      	str	r3, [sp, #4]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	9304      	str	r3, [sp, #16]
 8008b74:	bfb8      	it	lt
 8008b76:	2301      	movlt	r3, #1
 8008b78:	69e0      	ldr	r0, [r4, #28]
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	2204      	movs	r2, #4
 8008b7e:	f102 0614 	add.w	r6, r2, #20
 8008b82:	429e      	cmp	r6, r3
 8008b84:	d93d      	bls.n	8008c02 <_dtoa_r+0x31a>
 8008b86:	6041      	str	r1, [r0, #4]
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f000 fd9f 	bl	80096cc <_Balloc>
 8008b8e:	9000      	str	r0, [sp, #0]
 8008b90:	2800      	cmp	r0, #0
 8008b92:	d139      	bne.n	8008c08 <_dtoa_r+0x320>
 8008b94:	4b16      	ldr	r3, [pc, #88]	; (8008bf0 <_dtoa_r+0x308>)
 8008b96:	4602      	mov	r2, r0
 8008b98:	f240 11af 	movw	r1, #431	; 0x1af
 8008b9c:	e6bd      	b.n	800891a <_dtoa_r+0x32>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e7e1      	b.n	8008b66 <_dtoa_r+0x27e>
 8008ba2:	2501      	movs	r5, #1
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	9307      	str	r3, [sp, #28]
 8008ba8:	9509      	str	r5, [sp, #36]	; 0x24
 8008baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bae:	9301      	str	r3, [sp, #4]
 8008bb0:	9304      	str	r3, [sp, #16]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	2312      	movs	r3, #18
 8008bb6:	e7d1      	b.n	8008b5c <_dtoa_r+0x274>
 8008bb8:	636f4361 	.word	0x636f4361
 8008bbc:	3fd287a7 	.word	0x3fd287a7
 8008bc0:	8b60c8b3 	.word	0x8b60c8b3
 8008bc4:	3fc68a28 	.word	0x3fc68a28
 8008bc8:	509f79fb 	.word	0x509f79fb
 8008bcc:	3fd34413 	.word	0x3fd34413
 8008bd0:	0800a999 	.word	0x0800a999
 8008bd4:	0800a9b0 	.word	0x0800a9b0
 8008bd8:	7ff00000 	.word	0x7ff00000
 8008bdc:	0800a995 	.word	0x0800a995
 8008be0:	0800a98c 	.word	0x0800a98c
 8008be4:	0800a969 	.word	0x0800a969
 8008be8:	3ff80000 	.word	0x3ff80000
 8008bec:	0800aaa0 	.word	0x0800aaa0
 8008bf0:	0800aa08 	.word	0x0800aa08
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8008bf8:	e7d7      	b.n	8008baa <_dtoa_r+0x2c2>
 8008bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bfc:	9301      	str	r3, [sp, #4]
 8008bfe:	9304      	str	r3, [sp, #16]
 8008c00:	e7ba      	b.n	8008b78 <_dtoa_r+0x290>
 8008c02:	3101      	adds	r1, #1
 8008c04:	0052      	lsls	r2, r2, #1
 8008c06:	e7ba      	b.n	8008b7e <_dtoa_r+0x296>
 8008c08:	69e3      	ldr	r3, [r4, #28]
 8008c0a:	9a00      	ldr	r2, [sp, #0]
 8008c0c:	601a      	str	r2, [r3, #0]
 8008c0e:	9b04      	ldr	r3, [sp, #16]
 8008c10:	2b0e      	cmp	r3, #14
 8008c12:	f200 80a8 	bhi.w	8008d66 <_dtoa_r+0x47e>
 8008c16:	2d00      	cmp	r5, #0
 8008c18:	f000 80a5 	beq.w	8008d66 <_dtoa_r+0x47e>
 8008c1c:	f1bb 0f00 	cmp.w	fp, #0
 8008c20:	dd38      	ble.n	8008c94 <_dtoa_r+0x3ac>
 8008c22:	4bc0      	ldr	r3, [pc, #768]	; (8008f24 <_dtoa_r+0x63c>)
 8008c24:	f00b 020f 	and.w	r2, fp, #15
 8008c28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c2c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008c30:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008c34:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008c38:	d019      	beq.n	8008c6e <_dtoa_r+0x386>
 8008c3a:	4bbb      	ldr	r3, [pc, #748]	; (8008f28 <_dtoa_r+0x640>)
 8008c3c:	ec51 0b18 	vmov	r0, r1, d8
 8008c40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c44:	f7f7 fe0a 	bl	800085c <__aeabi_ddiv>
 8008c48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c4c:	f008 080f 	and.w	r8, r8, #15
 8008c50:	2503      	movs	r5, #3
 8008c52:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008f28 <_dtoa_r+0x640>
 8008c56:	f1b8 0f00 	cmp.w	r8, #0
 8008c5a:	d10a      	bne.n	8008c72 <_dtoa_r+0x38a>
 8008c5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c60:	4632      	mov	r2, r6
 8008c62:	463b      	mov	r3, r7
 8008c64:	f7f7 fdfa 	bl	800085c <__aeabi_ddiv>
 8008c68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c6c:	e02b      	b.n	8008cc6 <_dtoa_r+0x3de>
 8008c6e:	2502      	movs	r5, #2
 8008c70:	e7ef      	b.n	8008c52 <_dtoa_r+0x36a>
 8008c72:	f018 0f01 	tst.w	r8, #1
 8008c76:	d008      	beq.n	8008c8a <_dtoa_r+0x3a2>
 8008c78:	4630      	mov	r0, r6
 8008c7a:	4639      	mov	r1, r7
 8008c7c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008c80:	f7f7 fcc2 	bl	8000608 <__aeabi_dmul>
 8008c84:	3501      	adds	r5, #1
 8008c86:	4606      	mov	r6, r0
 8008c88:	460f      	mov	r7, r1
 8008c8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008c8e:	f109 0908 	add.w	r9, r9, #8
 8008c92:	e7e0      	b.n	8008c56 <_dtoa_r+0x36e>
 8008c94:	f000 809f 	beq.w	8008dd6 <_dtoa_r+0x4ee>
 8008c98:	f1cb 0600 	rsb	r6, fp, #0
 8008c9c:	4ba1      	ldr	r3, [pc, #644]	; (8008f24 <_dtoa_r+0x63c>)
 8008c9e:	4fa2      	ldr	r7, [pc, #648]	; (8008f28 <_dtoa_r+0x640>)
 8008ca0:	f006 020f 	and.w	r2, r6, #15
 8008ca4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	ec51 0b18 	vmov	r0, r1, d8
 8008cb0:	f7f7 fcaa 	bl	8000608 <__aeabi_dmul>
 8008cb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cb8:	1136      	asrs	r6, r6, #4
 8008cba:	2300      	movs	r3, #0
 8008cbc:	2502      	movs	r5, #2
 8008cbe:	2e00      	cmp	r6, #0
 8008cc0:	d17e      	bne.n	8008dc0 <_dtoa_r+0x4d8>
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1d0      	bne.n	8008c68 <_dtoa_r+0x380>
 8008cc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cc8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f000 8084 	beq.w	8008dda <_dtoa_r+0x4f2>
 8008cd2:	4b96      	ldr	r3, [pc, #600]	; (8008f2c <_dtoa_r+0x644>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	4640      	mov	r0, r8
 8008cd8:	4649      	mov	r1, r9
 8008cda:	f7f7 ff07 	bl	8000aec <__aeabi_dcmplt>
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d07b      	beq.n	8008dda <_dtoa_r+0x4f2>
 8008ce2:	9b04      	ldr	r3, [sp, #16]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d078      	beq.n	8008dda <_dtoa_r+0x4f2>
 8008ce8:	9b01      	ldr	r3, [sp, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	dd39      	ble.n	8008d62 <_dtoa_r+0x47a>
 8008cee:	4b90      	ldr	r3, [pc, #576]	; (8008f30 <_dtoa_r+0x648>)
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	4640      	mov	r0, r8
 8008cf4:	4649      	mov	r1, r9
 8008cf6:	f7f7 fc87 	bl	8000608 <__aeabi_dmul>
 8008cfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cfe:	9e01      	ldr	r6, [sp, #4]
 8008d00:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8008d04:	3501      	adds	r5, #1
 8008d06:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	f7f7 fc12 	bl	8000534 <__aeabi_i2d>
 8008d10:	4642      	mov	r2, r8
 8008d12:	464b      	mov	r3, r9
 8008d14:	f7f7 fc78 	bl	8000608 <__aeabi_dmul>
 8008d18:	4b86      	ldr	r3, [pc, #536]	; (8008f34 <_dtoa_r+0x64c>)
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f7f7 fabe 	bl	800029c <__adddf3>
 8008d20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008d24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d28:	9303      	str	r3, [sp, #12]
 8008d2a:	2e00      	cmp	r6, #0
 8008d2c:	d158      	bne.n	8008de0 <_dtoa_r+0x4f8>
 8008d2e:	4b82      	ldr	r3, [pc, #520]	; (8008f38 <_dtoa_r+0x650>)
 8008d30:	2200      	movs	r2, #0
 8008d32:	4640      	mov	r0, r8
 8008d34:	4649      	mov	r1, r9
 8008d36:	f7f7 faaf 	bl	8000298 <__aeabi_dsub>
 8008d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d3e:	4680      	mov	r8, r0
 8008d40:	4689      	mov	r9, r1
 8008d42:	f7f7 fef1 	bl	8000b28 <__aeabi_dcmpgt>
 8008d46:	2800      	cmp	r0, #0
 8008d48:	f040 8296 	bne.w	8009278 <_dtoa_r+0x990>
 8008d4c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008d50:	4640      	mov	r0, r8
 8008d52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d56:	4649      	mov	r1, r9
 8008d58:	f7f7 fec8 	bl	8000aec <__aeabi_dcmplt>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	f040 8289 	bne.w	8009274 <_dtoa_r+0x98c>
 8008d62:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008d66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f2c0 814e 	blt.w	800900a <_dtoa_r+0x722>
 8008d6e:	f1bb 0f0e 	cmp.w	fp, #14
 8008d72:	f300 814a 	bgt.w	800900a <_dtoa_r+0x722>
 8008d76:	4b6b      	ldr	r3, [pc, #428]	; (8008f24 <_dtoa_r+0x63c>)
 8008d78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008d7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f280 80dc 	bge.w	8008f40 <_dtoa_r+0x658>
 8008d88:	9b04      	ldr	r3, [sp, #16]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f300 80d8 	bgt.w	8008f40 <_dtoa_r+0x658>
 8008d90:	f040 826f 	bne.w	8009272 <_dtoa_r+0x98a>
 8008d94:	4b68      	ldr	r3, [pc, #416]	; (8008f38 <_dtoa_r+0x650>)
 8008d96:	2200      	movs	r2, #0
 8008d98:	4640      	mov	r0, r8
 8008d9a:	4649      	mov	r1, r9
 8008d9c:	f7f7 fc34 	bl	8000608 <__aeabi_dmul>
 8008da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008da4:	f7f7 feb6 	bl	8000b14 <__aeabi_dcmpge>
 8008da8:	9e04      	ldr	r6, [sp, #16]
 8008daa:	4637      	mov	r7, r6
 8008dac:	2800      	cmp	r0, #0
 8008dae:	f040 8245 	bne.w	800923c <_dtoa_r+0x954>
 8008db2:	9d00      	ldr	r5, [sp, #0]
 8008db4:	2331      	movs	r3, #49	; 0x31
 8008db6:	f805 3b01 	strb.w	r3, [r5], #1
 8008dba:	f10b 0b01 	add.w	fp, fp, #1
 8008dbe:	e241      	b.n	8009244 <_dtoa_r+0x95c>
 8008dc0:	07f2      	lsls	r2, r6, #31
 8008dc2:	d505      	bpl.n	8008dd0 <_dtoa_r+0x4e8>
 8008dc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dc8:	f7f7 fc1e 	bl	8000608 <__aeabi_dmul>
 8008dcc:	3501      	adds	r5, #1
 8008dce:	2301      	movs	r3, #1
 8008dd0:	1076      	asrs	r6, r6, #1
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	e773      	b.n	8008cbe <_dtoa_r+0x3d6>
 8008dd6:	2502      	movs	r5, #2
 8008dd8:	e775      	b.n	8008cc6 <_dtoa_r+0x3de>
 8008dda:	9e04      	ldr	r6, [sp, #16]
 8008ddc:	465f      	mov	r7, fp
 8008dde:	e792      	b.n	8008d06 <_dtoa_r+0x41e>
 8008de0:	9900      	ldr	r1, [sp, #0]
 8008de2:	4b50      	ldr	r3, [pc, #320]	; (8008f24 <_dtoa_r+0x63c>)
 8008de4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008de8:	4431      	add	r1, r6
 8008dea:	9102      	str	r1, [sp, #8]
 8008dec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dee:	eeb0 9a47 	vmov.f32	s18, s14
 8008df2:	eef0 9a67 	vmov.f32	s19, s15
 8008df6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008dfa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008dfe:	2900      	cmp	r1, #0
 8008e00:	d044      	beq.n	8008e8c <_dtoa_r+0x5a4>
 8008e02:	494e      	ldr	r1, [pc, #312]	; (8008f3c <_dtoa_r+0x654>)
 8008e04:	2000      	movs	r0, #0
 8008e06:	f7f7 fd29 	bl	800085c <__aeabi_ddiv>
 8008e0a:	ec53 2b19 	vmov	r2, r3, d9
 8008e0e:	f7f7 fa43 	bl	8000298 <__aeabi_dsub>
 8008e12:	9d00      	ldr	r5, [sp, #0]
 8008e14:	ec41 0b19 	vmov	d9, r0, r1
 8008e18:	4649      	mov	r1, r9
 8008e1a:	4640      	mov	r0, r8
 8008e1c:	f7f7 fea4 	bl	8000b68 <__aeabi_d2iz>
 8008e20:	4606      	mov	r6, r0
 8008e22:	f7f7 fb87 	bl	8000534 <__aeabi_i2d>
 8008e26:	4602      	mov	r2, r0
 8008e28:	460b      	mov	r3, r1
 8008e2a:	4640      	mov	r0, r8
 8008e2c:	4649      	mov	r1, r9
 8008e2e:	f7f7 fa33 	bl	8000298 <__aeabi_dsub>
 8008e32:	3630      	adds	r6, #48	; 0x30
 8008e34:	f805 6b01 	strb.w	r6, [r5], #1
 8008e38:	ec53 2b19 	vmov	r2, r3, d9
 8008e3c:	4680      	mov	r8, r0
 8008e3e:	4689      	mov	r9, r1
 8008e40:	f7f7 fe54 	bl	8000aec <__aeabi_dcmplt>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d164      	bne.n	8008f12 <_dtoa_r+0x62a>
 8008e48:	4642      	mov	r2, r8
 8008e4a:	464b      	mov	r3, r9
 8008e4c:	4937      	ldr	r1, [pc, #220]	; (8008f2c <_dtoa_r+0x644>)
 8008e4e:	2000      	movs	r0, #0
 8008e50:	f7f7 fa22 	bl	8000298 <__aeabi_dsub>
 8008e54:	ec53 2b19 	vmov	r2, r3, d9
 8008e58:	f7f7 fe48 	bl	8000aec <__aeabi_dcmplt>
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	f040 80b6 	bne.w	8008fce <_dtoa_r+0x6e6>
 8008e62:	9b02      	ldr	r3, [sp, #8]
 8008e64:	429d      	cmp	r5, r3
 8008e66:	f43f af7c 	beq.w	8008d62 <_dtoa_r+0x47a>
 8008e6a:	4b31      	ldr	r3, [pc, #196]	; (8008f30 <_dtoa_r+0x648>)
 8008e6c:	ec51 0b19 	vmov	r0, r1, d9
 8008e70:	2200      	movs	r2, #0
 8008e72:	f7f7 fbc9 	bl	8000608 <__aeabi_dmul>
 8008e76:	4b2e      	ldr	r3, [pc, #184]	; (8008f30 <_dtoa_r+0x648>)
 8008e78:	ec41 0b19 	vmov	d9, r0, r1
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	4640      	mov	r0, r8
 8008e80:	4649      	mov	r1, r9
 8008e82:	f7f7 fbc1 	bl	8000608 <__aeabi_dmul>
 8008e86:	4680      	mov	r8, r0
 8008e88:	4689      	mov	r9, r1
 8008e8a:	e7c5      	b.n	8008e18 <_dtoa_r+0x530>
 8008e8c:	ec51 0b17 	vmov	r0, r1, d7
 8008e90:	f7f7 fbba 	bl	8000608 <__aeabi_dmul>
 8008e94:	9b02      	ldr	r3, [sp, #8]
 8008e96:	9d00      	ldr	r5, [sp, #0]
 8008e98:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e9a:	ec41 0b19 	vmov	d9, r0, r1
 8008e9e:	4649      	mov	r1, r9
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	f7f7 fe61 	bl	8000b68 <__aeabi_d2iz>
 8008ea6:	4606      	mov	r6, r0
 8008ea8:	f7f7 fb44 	bl	8000534 <__aeabi_i2d>
 8008eac:	3630      	adds	r6, #48	; 0x30
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4640      	mov	r0, r8
 8008eb4:	4649      	mov	r1, r9
 8008eb6:	f7f7 f9ef 	bl	8000298 <__aeabi_dsub>
 8008eba:	f805 6b01 	strb.w	r6, [r5], #1
 8008ebe:	9b02      	ldr	r3, [sp, #8]
 8008ec0:	429d      	cmp	r5, r3
 8008ec2:	4680      	mov	r8, r0
 8008ec4:	4689      	mov	r9, r1
 8008ec6:	f04f 0200 	mov.w	r2, #0
 8008eca:	d124      	bne.n	8008f16 <_dtoa_r+0x62e>
 8008ecc:	4b1b      	ldr	r3, [pc, #108]	; (8008f3c <_dtoa_r+0x654>)
 8008ece:	ec51 0b19 	vmov	r0, r1, d9
 8008ed2:	f7f7 f9e3 	bl	800029c <__adddf3>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	460b      	mov	r3, r1
 8008eda:	4640      	mov	r0, r8
 8008edc:	4649      	mov	r1, r9
 8008ede:	f7f7 fe23 	bl	8000b28 <__aeabi_dcmpgt>
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d173      	bne.n	8008fce <_dtoa_r+0x6e6>
 8008ee6:	ec53 2b19 	vmov	r2, r3, d9
 8008eea:	4914      	ldr	r1, [pc, #80]	; (8008f3c <_dtoa_r+0x654>)
 8008eec:	2000      	movs	r0, #0
 8008eee:	f7f7 f9d3 	bl	8000298 <__aeabi_dsub>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	4640      	mov	r0, r8
 8008ef8:	4649      	mov	r1, r9
 8008efa:	f7f7 fdf7 	bl	8000aec <__aeabi_dcmplt>
 8008efe:	2800      	cmp	r0, #0
 8008f00:	f43f af2f 	beq.w	8008d62 <_dtoa_r+0x47a>
 8008f04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008f06:	1e6b      	subs	r3, r5, #1
 8008f08:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f0e:	2b30      	cmp	r3, #48	; 0x30
 8008f10:	d0f8      	beq.n	8008f04 <_dtoa_r+0x61c>
 8008f12:	46bb      	mov	fp, r7
 8008f14:	e04a      	b.n	8008fac <_dtoa_r+0x6c4>
 8008f16:	4b06      	ldr	r3, [pc, #24]	; (8008f30 <_dtoa_r+0x648>)
 8008f18:	f7f7 fb76 	bl	8000608 <__aeabi_dmul>
 8008f1c:	4680      	mov	r8, r0
 8008f1e:	4689      	mov	r9, r1
 8008f20:	e7bd      	b.n	8008e9e <_dtoa_r+0x5b6>
 8008f22:	bf00      	nop
 8008f24:	0800aaa0 	.word	0x0800aaa0
 8008f28:	0800aa78 	.word	0x0800aa78
 8008f2c:	3ff00000 	.word	0x3ff00000
 8008f30:	40240000 	.word	0x40240000
 8008f34:	401c0000 	.word	0x401c0000
 8008f38:	40140000 	.word	0x40140000
 8008f3c:	3fe00000 	.word	0x3fe00000
 8008f40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f44:	9d00      	ldr	r5, [sp, #0]
 8008f46:	4642      	mov	r2, r8
 8008f48:	464b      	mov	r3, r9
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	4639      	mov	r1, r7
 8008f4e:	f7f7 fc85 	bl	800085c <__aeabi_ddiv>
 8008f52:	f7f7 fe09 	bl	8000b68 <__aeabi_d2iz>
 8008f56:	9001      	str	r0, [sp, #4]
 8008f58:	f7f7 faec 	bl	8000534 <__aeabi_i2d>
 8008f5c:	4642      	mov	r2, r8
 8008f5e:	464b      	mov	r3, r9
 8008f60:	f7f7 fb52 	bl	8000608 <__aeabi_dmul>
 8008f64:	4602      	mov	r2, r0
 8008f66:	460b      	mov	r3, r1
 8008f68:	4630      	mov	r0, r6
 8008f6a:	4639      	mov	r1, r7
 8008f6c:	f7f7 f994 	bl	8000298 <__aeabi_dsub>
 8008f70:	9e01      	ldr	r6, [sp, #4]
 8008f72:	9f04      	ldr	r7, [sp, #16]
 8008f74:	3630      	adds	r6, #48	; 0x30
 8008f76:	f805 6b01 	strb.w	r6, [r5], #1
 8008f7a:	9e00      	ldr	r6, [sp, #0]
 8008f7c:	1bae      	subs	r6, r5, r6
 8008f7e:	42b7      	cmp	r7, r6
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	d134      	bne.n	8008ff0 <_dtoa_r+0x708>
 8008f86:	f7f7 f989 	bl	800029c <__adddf3>
 8008f8a:	4642      	mov	r2, r8
 8008f8c:	464b      	mov	r3, r9
 8008f8e:	4606      	mov	r6, r0
 8008f90:	460f      	mov	r7, r1
 8008f92:	f7f7 fdc9 	bl	8000b28 <__aeabi_dcmpgt>
 8008f96:	b9c8      	cbnz	r0, 8008fcc <_dtoa_r+0x6e4>
 8008f98:	4642      	mov	r2, r8
 8008f9a:	464b      	mov	r3, r9
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	4639      	mov	r1, r7
 8008fa0:	f7f7 fd9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fa4:	b110      	cbz	r0, 8008fac <_dtoa_r+0x6c4>
 8008fa6:	9b01      	ldr	r3, [sp, #4]
 8008fa8:	07db      	lsls	r3, r3, #31
 8008faa:	d40f      	bmi.n	8008fcc <_dtoa_r+0x6e4>
 8008fac:	4651      	mov	r1, sl
 8008fae:	4620      	mov	r0, r4
 8008fb0:	f000 fbcc 	bl	800974c <_Bfree>
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fb8:	702b      	strb	r3, [r5, #0]
 8008fba:	f10b 0301 	add.w	r3, fp, #1
 8008fbe:	6013      	str	r3, [r2, #0]
 8008fc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f43f ace2 	beq.w	800898c <_dtoa_r+0xa4>
 8008fc8:	601d      	str	r5, [r3, #0]
 8008fca:	e4df      	b.n	800898c <_dtoa_r+0xa4>
 8008fcc:	465f      	mov	r7, fp
 8008fce:	462b      	mov	r3, r5
 8008fd0:	461d      	mov	r5, r3
 8008fd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fd6:	2a39      	cmp	r2, #57	; 0x39
 8008fd8:	d106      	bne.n	8008fe8 <_dtoa_r+0x700>
 8008fda:	9a00      	ldr	r2, [sp, #0]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d1f7      	bne.n	8008fd0 <_dtoa_r+0x6e8>
 8008fe0:	9900      	ldr	r1, [sp, #0]
 8008fe2:	2230      	movs	r2, #48	; 0x30
 8008fe4:	3701      	adds	r7, #1
 8008fe6:	700a      	strb	r2, [r1, #0]
 8008fe8:	781a      	ldrb	r2, [r3, #0]
 8008fea:	3201      	adds	r2, #1
 8008fec:	701a      	strb	r2, [r3, #0]
 8008fee:	e790      	b.n	8008f12 <_dtoa_r+0x62a>
 8008ff0:	4ba3      	ldr	r3, [pc, #652]	; (8009280 <_dtoa_r+0x998>)
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f7f7 fb08 	bl	8000608 <__aeabi_dmul>
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	4606      	mov	r6, r0
 8008ffe:	460f      	mov	r7, r1
 8009000:	f7f7 fd6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009004:	2800      	cmp	r0, #0
 8009006:	d09e      	beq.n	8008f46 <_dtoa_r+0x65e>
 8009008:	e7d0      	b.n	8008fac <_dtoa_r+0x6c4>
 800900a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800900c:	2a00      	cmp	r2, #0
 800900e:	f000 80ca 	beq.w	80091a6 <_dtoa_r+0x8be>
 8009012:	9a07      	ldr	r2, [sp, #28]
 8009014:	2a01      	cmp	r2, #1
 8009016:	f300 80ad 	bgt.w	8009174 <_dtoa_r+0x88c>
 800901a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800901c:	2a00      	cmp	r2, #0
 800901e:	f000 80a5 	beq.w	800916c <_dtoa_r+0x884>
 8009022:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009026:	9e08      	ldr	r6, [sp, #32]
 8009028:	9d05      	ldr	r5, [sp, #20]
 800902a:	9a05      	ldr	r2, [sp, #20]
 800902c:	441a      	add	r2, r3
 800902e:	9205      	str	r2, [sp, #20]
 8009030:	9a06      	ldr	r2, [sp, #24]
 8009032:	2101      	movs	r1, #1
 8009034:	441a      	add	r2, r3
 8009036:	4620      	mov	r0, r4
 8009038:	9206      	str	r2, [sp, #24]
 800903a:	f000 fc3d 	bl	80098b8 <__i2b>
 800903e:	4607      	mov	r7, r0
 8009040:	b165      	cbz	r5, 800905c <_dtoa_r+0x774>
 8009042:	9b06      	ldr	r3, [sp, #24]
 8009044:	2b00      	cmp	r3, #0
 8009046:	dd09      	ble.n	800905c <_dtoa_r+0x774>
 8009048:	42ab      	cmp	r3, r5
 800904a:	9a05      	ldr	r2, [sp, #20]
 800904c:	bfa8      	it	ge
 800904e:	462b      	movge	r3, r5
 8009050:	1ad2      	subs	r2, r2, r3
 8009052:	9205      	str	r2, [sp, #20]
 8009054:	9a06      	ldr	r2, [sp, #24]
 8009056:	1aed      	subs	r5, r5, r3
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	9306      	str	r3, [sp, #24]
 800905c:	9b08      	ldr	r3, [sp, #32]
 800905e:	b1f3      	cbz	r3, 800909e <_dtoa_r+0x7b6>
 8009060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009062:	2b00      	cmp	r3, #0
 8009064:	f000 80a3 	beq.w	80091ae <_dtoa_r+0x8c6>
 8009068:	2e00      	cmp	r6, #0
 800906a:	dd10      	ble.n	800908e <_dtoa_r+0x7a6>
 800906c:	4639      	mov	r1, r7
 800906e:	4632      	mov	r2, r6
 8009070:	4620      	mov	r0, r4
 8009072:	f000 fce1 	bl	8009a38 <__pow5mult>
 8009076:	4652      	mov	r2, sl
 8009078:	4601      	mov	r1, r0
 800907a:	4607      	mov	r7, r0
 800907c:	4620      	mov	r0, r4
 800907e:	f000 fc31 	bl	80098e4 <__multiply>
 8009082:	4651      	mov	r1, sl
 8009084:	4680      	mov	r8, r0
 8009086:	4620      	mov	r0, r4
 8009088:	f000 fb60 	bl	800974c <_Bfree>
 800908c:	46c2      	mov	sl, r8
 800908e:	9b08      	ldr	r3, [sp, #32]
 8009090:	1b9a      	subs	r2, r3, r6
 8009092:	d004      	beq.n	800909e <_dtoa_r+0x7b6>
 8009094:	4651      	mov	r1, sl
 8009096:	4620      	mov	r0, r4
 8009098:	f000 fcce 	bl	8009a38 <__pow5mult>
 800909c:	4682      	mov	sl, r0
 800909e:	2101      	movs	r1, #1
 80090a0:	4620      	mov	r0, r4
 80090a2:	f000 fc09 	bl	80098b8 <__i2b>
 80090a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	4606      	mov	r6, r0
 80090ac:	f340 8081 	ble.w	80091b2 <_dtoa_r+0x8ca>
 80090b0:	461a      	mov	r2, r3
 80090b2:	4601      	mov	r1, r0
 80090b4:	4620      	mov	r0, r4
 80090b6:	f000 fcbf 	bl	8009a38 <__pow5mult>
 80090ba:	9b07      	ldr	r3, [sp, #28]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	4606      	mov	r6, r0
 80090c0:	dd7a      	ble.n	80091b8 <_dtoa_r+0x8d0>
 80090c2:	f04f 0800 	mov.w	r8, #0
 80090c6:	6933      	ldr	r3, [r6, #16]
 80090c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80090cc:	6918      	ldr	r0, [r3, #16]
 80090ce:	f000 fba5 	bl	800981c <__hi0bits>
 80090d2:	f1c0 0020 	rsb	r0, r0, #32
 80090d6:	9b06      	ldr	r3, [sp, #24]
 80090d8:	4418      	add	r0, r3
 80090da:	f010 001f 	ands.w	r0, r0, #31
 80090de:	f000 8094 	beq.w	800920a <_dtoa_r+0x922>
 80090e2:	f1c0 0320 	rsb	r3, r0, #32
 80090e6:	2b04      	cmp	r3, #4
 80090e8:	f340 8085 	ble.w	80091f6 <_dtoa_r+0x90e>
 80090ec:	9b05      	ldr	r3, [sp, #20]
 80090ee:	f1c0 001c 	rsb	r0, r0, #28
 80090f2:	4403      	add	r3, r0
 80090f4:	9305      	str	r3, [sp, #20]
 80090f6:	9b06      	ldr	r3, [sp, #24]
 80090f8:	4403      	add	r3, r0
 80090fa:	4405      	add	r5, r0
 80090fc:	9306      	str	r3, [sp, #24]
 80090fe:	9b05      	ldr	r3, [sp, #20]
 8009100:	2b00      	cmp	r3, #0
 8009102:	dd05      	ble.n	8009110 <_dtoa_r+0x828>
 8009104:	4651      	mov	r1, sl
 8009106:	461a      	mov	r2, r3
 8009108:	4620      	mov	r0, r4
 800910a:	f000 fcef 	bl	8009aec <__lshift>
 800910e:	4682      	mov	sl, r0
 8009110:	9b06      	ldr	r3, [sp, #24]
 8009112:	2b00      	cmp	r3, #0
 8009114:	dd05      	ble.n	8009122 <_dtoa_r+0x83a>
 8009116:	4631      	mov	r1, r6
 8009118:	461a      	mov	r2, r3
 800911a:	4620      	mov	r0, r4
 800911c:	f000 fce6 	bl	8009aec <__lshift>
 8009120:	4606      	mov	r6, r0
 8009122:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009124:	2b00      	cmp	r3, #0
 8009126:	d072      	beq.n	800920e <_dtoa_r+0x926>
 8009128:	4631      	mov	r1, r6
 800912a:	4650      	mov	r0, sl
 800912c:	f000 fd4a 	bl	8009bc4 <__mcmp>
 8009130:	2800      	cmp	r0, #0
 8009132:	da6c      	bge.n	800920e <_dtoa_r+0x926>
 8009134:	2300      	movs	r3, #0
 8009136:	4651      	mov	r1, sl
 8009138:	220a      	movs	r2, #10
 800913a:	4620      	mov	r0, r4
 800913c:	f000 fb28 	bl	8009790 <__multadd>
 8009140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009142:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009146:	4682      	mov	sl, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	f000 81b0 	beq.w	80094ae <_dtoa_r+0xbc6>
 800914e:	2300      	movs	r3, #0
 8009150:	4639      	mov	r1, r7
 8009152:	220a      	movs	r2, #10
 8009154:	4620      	mov	r0, r4
 8009156:	f000 fb1b 	bl	8009790 <__multadd>
 800915a:	9b01      	ldr	r3, [sp, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	4607      	mov	r7, r0
 8009160:	f300 8096 	bgt.w	8009290 <_dtoa_r+0x9a8>
 8009164:	9b07      	ldr	r3, [sp, #28]
 8009166:	2b02      	cmp	r3, #2
 8009168:	dc59      	bgt.n	800921e <_dtoa_r+0x936>
 800916a:	e091      	b.n	8009290 <_dtoa_r+0x9a8>
 800916c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800916e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009172:	e758      	b.n	8009026 <_dtoa_r+0x73e>
 8009174:	9b04      	ldr	r3, [sp, #16]
 8009176:	1e5e      	subs	r6, r3, #1
 8009178:	9b08      	ldr	r3, [sp, #32]
 800917a:	42b3      	cmp	r3, r6
 800917c:	bfbf      	itttt	lt
 800917e:	9b08      	ldrlt	r3, [sp, #32]
 8009180:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009182:	9608      	strlt	r6, [sp, #32]
 8009184:	1af3      	sublt	r3, r6, r3
 8009186:	bfb4      	ite	lt
 8009188:	18d2      	addlt	r2, r2, r3
 800918a:	1b9e      	subge	r6, r3, r6
 800918c:	9b04      	ldr	r3, [sp, #16]
 800918e:	bfbc      	itt	lt
 8009190:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009192:	2600      	movlt	r6, #0
 8009194:	2b00      	cmp	r3, #0
 8009196:	bfb7      	itett	lt
 8009198:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800919c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80091a0:	1a9d      	sublt	r5, r3, r2
 80091a2:	2300      	movlt	r3, #0
 80091a4:	e741      	b.n	800902a <_dtoa_r+0x742>
 80091a6:	9e08      	ldr	r6, [sp, #32]
 80091a8:	9d05      	ldr	r5, [sp, #20]
 80091aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80091ac:	e748      	b.n	8009040 <_dtoa_r+0x758>
 80091ae:	9a08      	ldr	r2, [sp, #32]
 80091b0:	e770      	b.n	8009094 <_dtoa_r+0x7ac>
 80091b2:	9b07      	ldr	r3, [sp, #28]
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	dc19      	bgt.n	80091ec <_dtoa_r+0x904>
 80091b8:	9b02      	ldr	r3, [sp, #8]
 80091ba:	b9bb      	cbnz	r3, 80091ec <_dtoa_r+0x904>
 80091bc:	9b03      	ldr	r3, [sp, #12]
 80091be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091c2:	b99b      	cbnz	r3, 80091ec <_dtoa_r+0x904>
 80091c4:	9b03      	ldr	r3, [sp, #12]
 80091c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091ca:	0d1b      	lsrs	r3, r3, #20
 80091cc:	051b      	lsls	r3, r3, #20
 80091ce:	b183      	cbz	r3, 80091f2 <_dtoa_r+0x90a>
 80091d0:	9b05      	ldr	r3, [sp, #20]
 80091d2:	3301      	adds	r3, #1
 80091d4:	9305      	str	r3, [sp, #20]
 80091d6:	9b06      	ldr	r3, [sp, #24]
 80091d8:	3301      	adds	r3, #1
 80091da:	9306      	str	r3, [sp, #24]
 80091dc:	f04f 0801 	mov.w	r8, #1
 80091e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f47f af6f 	bne.w	80090c6 <_dtoa_r+0x7de>
 80091e8:	2001      	movs	r0, #1
 80091ea:	e774      	b.n	80090d6 <_dtoa_r+0x7ee>
 80091ec:	f04f 0800 	mov.w	r8, #0
 80091f0:	e7f6      	b.n	80091e0 <_dtoa_r+0x8f8>
 80091f2:	4698      	mov	r8, r3
 80091f4:	e7f4      	b.n	80091e0 <_dtoa_r+0x8f8>
 80091f6:	d082      	beq.n	80090fe <_dtoa_r+0x816>
 80091f8:	9a05      	ldr	r2, [sp, #20]
 80091fa:	331c      	adds	r3, #28
 80091fc:	441a      	add	r2, r3
 80091fe:	9205      	str	r2, [sp, #20]
 8009200:	9a06      	ldr	r2, [sp, #24]
 8009202:	441a      	add	r2, r3
 8009204:	441d      	add	r5, r3
 8009206:	9206      	str	r2, [sp, #24]
 8009208:	e779      	b.n	80090fe <_dtoa_r+0x816>
 800920a:	4603      	mov	r3, r0
 800920c:	e7f4      	b.n	80091f8 <_dtoa_r+0x910>
 800920e:	9b04      	ldr	r3, [sp, #16]
 8009210:	2b00      	cmp	r3, #0
 8009212:	dc37      	bgt.n	8009284 <_dtoa_r+0x99c>
 8009214:	9b07      	ldr	r3, [sp, #28]
 8009216:	2b02      	cmp	r3, #2
 8009218:	dd34      	ble.n	8009284 <_dtoa_r+0x99c>
 800921a:	9b04      	ldr	r3, [sp, #16]
 800921c:	9301      	str	r3, [sp, #4]
 800921e:	9b01      	ldr	r3, [sp, #4]
 8009220:	b963      	cbnz	r3, 800923c <_dtoa_r+0x954>
 8009222:	4631      	mov	r1, r6
 8009224:	2205      	movs	r2, #5
 8009226:	4620      	mov	r0, r4
 8009228:	f000 fab2 	bl	8009790 <__multadd>
 800922c:	4601      	mov	r1, r0
 800922e:	4606      	mov	r6, r0
 8009230:	4650      	mov	r0, sl
 8009232:	f000 fcc7 	bl	8009bc4 <__mcmp>
 8009236:	2800      	cmp	r0, #0
 8009238:	f73f adbb 	bgt.w	8008db2 <_dtoa_r+0x4ca>
 800923c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800923e:	9d00      	ldr	r5, [sp, #0]
 8009240:	ea6f 0b03 	mvn.w	fp, r3
 8009244:	f04f 0800 	mov.w	r8, #0
 8009248:	4631      	mov	r1, r6
 800924a:	4620      	mov	r0, r4
 800924c:	f000 fa7e 	bl	800974c <_Bfree>
 8009250:	2f00      	cmp	r7, #0
 8009252:	f43f aeab 	beq.w	8008fac <_dtoa_r+0x6c4>
 8009256:	f1b8 0f00 	cmp.w	r8, #0
 800925a:	d005      	beq.n	8009268 <_dtoa_r+0x980>
 800925c:	45b8      	cmp	r8, r7
 800925e:	d003      	beq.n	8009268 <_dtoa_r+0x980>
 8009260:	4641      	mov	r1, r8
 8009262:	4620      	mov	r0, r4
 8009264:	f000 fa72 	bl	800974c <_Bfree>
 8009268:	4639      	mov	r1, r7
 800926a:	4620      	mov	r0, r4
 800926c:	f000 fa6e 	bl	800974c <_Bfree>
 8009270:	e69c      	b.n	8008fac <_dtoa_r+0x6c4>
 8009272:	2600      	movs	r6, #0
 8009274:	4637      	mov	r7, r6
 8009276:	e7e1      	b.n	800923c <_dtoa_r+0x954>
 8009278:	46bb      	mov	fp, r7
 800927a:	4637      	mov	r7, r6
 800927c:	e599      	b.n	8008db2 <_dtoa_r+0x4ca>
 800927e:	bf00      	nop
 8009280:	40240000 	.word	0x40240000
 8009284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009286:	2b00      	cmp	r3, #0
 8009288:	f000 80c8 	beq.w	800941c <_dtoa_r+0xb34>
 800928c:	9b04      	ldr	r3, [sp, #16]
 800928e:	9301      	str	r3, [sp, #4]
 8009290:	2d00      	cmp	r5, #0
 8009292:	dd05      	ble.n	80092a0 <_dtoa_r+0x9b8>
 8009294:	4639      	mov	r1, r7
 8009296:	462a      	mov	r2, r5
 8009298:	4620      	mov	r0, r4
 800929a:	f000 fc27 	bl	8009aec <__lshift>
 800929e:	4607      	mov	r7, r0
 80092a0:	f1b8 0f00 	cmp.w	r8, #0
 80092a4:	d05b      	beq.n	800935e <_dtoa_r+0xa76>
 80092a6:	6879      	ldr	r1, [r7, #4]
 80092a8:	4620      	mov	r0, r4
 80092aa:	f000 fa0f 	bl	80096cc <_Balloc>
 80092ae:	4605      	mov	r5, r0
 80092b0:	b928      	cbnz	r0, 80092be <_dtoa_r+0x9d6>
 80092b2:	4b83      	ldr	r3, [pc, #524]	; (80094c0 <_dtoa_r+0xbd8>)
 80092b4:	4602      	mov	r2, r0
 80092b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80092ba:	f7ff bb2e 	b.w	800891a <_dtoa_r+0x32>
 80092be:	693a      	ldr	r2, [r7, #16]
 80092c0:	3202      	adds	r2, #2
 80092c2:	0092      	lsls	r2, r2, #2
 80092c4:	f107 010c 	add.w	r1, r7, #12
 80092c8:	300c      	adds	r0, #12
 80092ca:	f000 ffab 	bl	800a224 <memcpy>
 80092ce:	2201      	movs	r2, #1
 80092d0:	4629      	mov	r1, r5
 80092d2:	4620      	mov	r0, r4
 80092d4:	f000 fc0a 	bl	8009aec <__lshift>
 80092d8:	9b00      	ldr	r3, [sp, #0]
 80092da:	3301      	adds	r3, #1
 80092dc:	9304      	str	r3, [sp, #16]
 80092de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092e2:	4413      	add	r3, r2
 80092e4:	9308      	str	r3, [sp, #32]
 80092e6:	9b02      	ldr	r3, [sp, #8]
 80092e8:	f003 0301 	and.w	r3, r3, #1
 80092ec:	46b8      	mov	r8, r7
 80092ee:	9306      	str	r3, [sp, #24]
 80092f0:	4607      	mov	r7, r0
 80092f2:	9b04      	ldr	r3, [sp, #16]
 80092f4:	4631      	mov	r1, r6
 80092f6:	3b01      	subs	r3, #1
 80092f8:	4650      	mov	r0, sl
 80092fa:	9301      	str	r3, [sp, #4]
 80092fc:	f7ff fa6b 	bl	80087d6 <quorem>
 8009300:	4641      	mov	r1, r8
 8009302:	9002      	str	r0, [sp, #8]
 8009304:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009308:	4650      	mov	r0, sl
 800930a:	f000 fc5b 	bl	8009bc4 <__mcmp>
 800930e:	463a      	mov	r2, r7
 8009310:	9005      	str	r0, [sp, #20]
 8009312:	4631      	mov	r1, r6
 8009314:	4620      	mov	r0, r4
 8009316:	f000 fc71 	bl	8009bfc <__mdiff>
 800931a:	68c2      	ldr	r2, [r0, #12]
 800931c:	4605      	mov	r5, r0
 800931e:	bb02      	cbnz	r2, 8009362 <_dtoa_r+0xa7a>
 8009320:	4601      	mov	r1, r0
 8009322:	4650      	mov	r0, sl
 8009324:	f000 fc4e 	bl	8009bc4 <__mcmp>
 8009328:	4602      	mov	r2, r0
 800932a:	4629      	mov	r1, r5
 800932c:	4620      	mov	r0, r4
 800932e:	9209      	str	r2, [sp, #36]	; 0x24
 8009330:	f000 fa0c 	bl	800974c <_Bfree>
 8009334:	9b07      	ldr	r3, [sp, #28]
 8009336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009338:	9d04      	ldr	r5, [sp, #16]
 800933a:	ea43 0102 	orr.w	r1, r3, r2
 800933e:	9b06      	ldr	r3, [sp, #24]
 8009340:	4319      	orrs	r1, r3
 8009342:	d110      	bne.n	8009366 <_dtoa_r+0xa7e>
 8009344:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009348:	d029      	beq.n	800939e <_dtoa_r+0xab6>
 800934a:	9b05      	ldr	r3, [sp, #20]
 800934c:	2b00      	cmp	r3, #0
 800934e:	dd02      	ble.n	8009356 <_dtoa_r+0xa6e>
 8009350:	9b02      	ldr	r3, [sp, #8]
 8009352:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009356:	9b01      	ldr	r3, [sp, #4]
 8009358:	f883 9000 	strb.w	r9, [r3]
 800935c:	e774      	b.n	8009248 <_dtoa_r+0x960>
 800935e:	4638      	mov	r0, r7
 8009360:	e7ba      	b.n	80092d8 <_dtoa_r+0x9f0>
 8009362:	2201      	movs	r2, #1
 8009364:	e7e1      	b.n	800932a <_dtoa_r+0xa42>
 8009366:	9b05      	ldr	r3, [sp, #20]
 8009368:	2b00      	cmp	r3, #0
 800936a:	db04      	blt.n	8009376 <_dtoa_r+0xa8e>
 800936c:	9907      	ldr	r1, [sp, #28]
 800936e:	430b      	orrs	r3, r1
 8009370:	9906      	ldr	r1, [sp, #24]
 8009372:	430b      	orrs	r3, r1
 8009374:	d120      	bne.n	80093b8 <_dtoa_r+0xad0>
 8009376:	2a00      	cmp	r2, #0
 8009378:	dded      	ble.n	8009356 <_dtoa_r+0xa6e>
 800937a:	4651      	mov	r1, sl
 800937c:	2201      	movs	r2, #1
 800937e:	4620      	mov	r0, r4
 8009380:	f000 fbb4 	bl	8009aec <__lshift>
 8009384:	4631      	mov	r1, r6
 8009386:	4682      	mov	sl, r0
 8009388:	f000 fc1c 	bl	8009bc4 <__mcmp>
 800938c:	2800      	cmp	r0, #0
 800938e:	dc03      	bgt.n	8009398 <_dtoa_r+0xab0>
 8009390:	d1e1      	bne.n	8009356 <_dtoa_r+0xa6e>
 8009392:	f019 0f01 	tst.w	r9, #1
 8009396:	d0de      	beq.n	8009356 <_dtoa_r+0xa6e>
 8009398:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800939c:	d1d8      	bne.n	8009350 <_dtoa_r+0xa68>
 800939e:	9a01      	ldr	r2, [sp, #4]
 80093a0:	2339      	movs	r3, #57	; 0x39
 80093a2:	7013      	strb	r3, [r2, #0]
 80093a4:	462b      	mov	r3, r5
 80093a6:	461d      	mov	r5, r3
 80093a8:	3b01      	subs	r3, #1
 80093aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80093ae:	2a39      	cmp	r2, #57	; 0x39
 80093b0:	d06c      	beq.n	800948c <_dtoa_r+0xba4>
 80093b2:	3201      	adds	r2, #1
 80093b4:	701a      	strb	r2, [r3, #0]
 80093b6:	e747      	b.n	8009248 <_dtoa_r+0x960>
 80093b8:	2a00      	cmp	r2, #0
 80093ba:	dd07      	ble.n	80093cc <_dtoa_r+0xae4>
 80093bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80093c0:	d0ed      	beq.n	800939e <_dtoa_r+0xab6>
 80093c2:	9a01      	ldr	r2, [sp, #4]
 80093c4:	f109 0301 	add.w	r3, r9, #1
 80093c8:	7013      	strb	r3, [r2, #0]
 80093ca:	e73d      	b.n	8009248 <_dtoa_r+0x960>
 80093cc:	9b04      	ldr	r3, [sp, #16]
 80093ce:	9a08      	ldr	r2, [sp, #32]
 80093d0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d043      	beq.n	8009460 <_dtoa_r+0xb78>
 80093d8:	4651      	mov	r1, sl
 80093da:	2300      	movs	r3, #0
 80093dc:	220a      	movs	r2, #10
 80093de:	4620      	mov	r0, r4
 80093e0:	f000 f9d6 	bl	8009790 <__multadd>
 80093e4:	45b8      	cmp	r8, r7
 80093e6:	4682      	mov	sl, r0
 80093e8:	f04f 0300 	mov.w	r3, #0
 80093ec:	f04f 020a 	mov.w	r2, #10
 80093f0:	4641      	mov	r1, r8
 80093f2:	4620      	mov	r0, r4
 80093f4:	d107      	bne.n	8009406 <_dtoa_r+0xb1e>
 80093f6:	f000 f9cb 	bl	8009790 <__multadd>
 80093fa:	4680      	mov	r8, r0
 80093fc:	4607      	mov	r7, r0
 80093fe:	9b04      	ldr	r3, [sp, #16]
 8009400:	3301      	adds	r3, #1
 8009402:	9304      	str	r3, [sp, #16]
 8009404:	e775      	b.n	80092f2 <_dtoa_r+0xa0a>
 8009406:	f000 f9c3 	bl	8009790 <__multadd>
 800940a:	4639      	mov	r1, r7
 800940c:	4680      	mov	r8, r0
 800940e:	2300      	movs	r3, #0
 8009410:	220a      	movs	r2, #10
 8009412:	4620      	mov	r0, r4
 8009414:	f000 f9bc 	bl	8009790 <__multadd>
 8009418:	4607      	mov	r7, r0
 800941a:	e7f0      	b.n	80093fe <_dtoa_r+0xb16>
 800941c:	9b04      	ldr	r3, [sp, #16]
 800941e:	9301      	str	r3, [sp, #4]
 8009420:	9d00      	ldr	r5, [sp, #0]
 8009422:	4631      	mov	r1, r6
 8009424:	4650      	mov	r0, sl
 8009426:	f7ff f9d6 	bl	80087d6 <quorem>
 800942a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800942e:	9b00      	ldr	r3, [sp, #0]
 8009430:	f805 9b01 	strb.w	r9, [r5], #1
 8009434:	1aea      	subs	r2, r5, r3
 8009436:	9b01      	ldr	r3, [sp, #4]
 8009438:	4293      	cmp	r3, r2
 800943a:	dd07      	ble.n	800944c <_dtoa_r+0xb64>
 800943c:	4651      	mov	r1, sl
 800943e:	2300      	movs	r3, #0
 8009440:	220a      	movs	r2, #10
 8009442:	4620      	mov	r0, r4
 8009444:	f000 f9a4 	bl	8009790 <__multadd>
 8009448:	4682      	mov	sl, r0
 800944a:	e7ea      	b.n	8009422 <_dtoa_r+0xb3a>
 800944c:	9b01      	ldr	r3, [sp, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	bfc8      	it	gt
 8009452:	461d      	movgt	r5, r3
 8009454:	9b00      	ldr	r3, [sp, #0]
 8009456:	bfd8      	it	le
 8009458:	2501      	movle	r5, #1
 800945a:	441d      	add	r5, r3
 800945c:	f04f 0800 	mov.w	r8, #0
 8009460:	4651      	mov	r1, sl
 8009462:	2201      	movs	r2, #1
 8009464:	4620      	mov	r0, r4
 8009466:	f000 fb41 	bl	8009aec <__lshift>
 800946a:	4631      	mov	r1, r6
 800946c:	4682      	mov	sl, r0
 800946e:	f000 fba9 	bl	8009bc4 <__mcmp>
 8009472:	2800      	cmp	r0, #0
 8009474:	dc96      	bgt.n	80093a4 <_dtoa_r+0xabc>
 8009476:	d102      	bne.n	800947e <_dtoa_r+0xb96>
 8009478:	f019 0f01 	tst.w	r9, #1
 800947c:	d192      	bne.n	80093a4 <_dtoa_r+0xabc>
 800947e:	462b      	mov	r3, r5
 8009480:	461d      	mov	r5, r3
 8009482:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009486:	2a30      	cmp	r2, #48	; 0x30
 8009488:	d0fa      	beq.n	8009480 <_dtoa_r+0xb98>
 800948a:	e6dd      	b.n	8009248 <_dtoa_r+0x960>
 800948c:	9a00      	ldr	r2, [sp, #0]
 800948e:	429a      	cmp	r2, r3
 8009490:	d189      	bne.n	80093a6 <_dtoa_r+0xabe>
 8009492:	f10b 0b01 	add.w	fp, fp, #1
 8009496:	2331      	movs	r3, #49	; 0x31
 8009498:	e796      	b.n	80093c8 <_dtoa_r+0xae0>
 800949a:	4b0a      	ldr	r3, [pc, #40]	; (80094c4 <_dtoa_r+0xbdc>)
 800949c:	f7ff ba99 	b.w	80089d2 <_dtoa_r+0xea>
 80094a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f47f aa6d 	bne.w	8008982 <_dtoa_r+0x9a>
 80094a8:	4b07      	ldr	r3, [pc, #28]	; (80094c8 <_dtoa_r+0xbe0>)
 80094aa:	f7ff ba92 	b.w	80089d2 <_dtoa_r+0xea>
 80094ae:	9b01      	ldr	r3, [sp, #4]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	dcb5      	bgt.n	8009420 <_dtoa_r+0xb38>
 80094b4:	9b07      	ldr	r3, [sp, #28]
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	f73f aeb1 	bgt.w	800921e <_dtoa_r+0x936>
 80094bc:	e7b0      	b.n	8009420 <_dtoa_r+0xb38>
 80094be:	bf00      	nop
 80094c0:	0800aa08 	.word	0x0800aa08
 80094c4:	0800a968 	.word	0x0800a968
 80094c8:	0800a98c 	.word	0x0800a98c

080094cc <_free_r>:
 80094cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094ce:	2900      	cmp	r1, #0
 80094d0:	d044      	beq.n	800955c <_free_r+0x90>
 80094d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094d6:	9001      	str	r0, [sp, #4]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f1a1 0404 	sub.w	r4, r1, #4
 80094de:	bfb8      	it	lt
 80094e0:	18e4      	addlt	r4, r4, r3
 80094e2:	f000 f8e7 	bl	80096b4 <__malloc_lock>
 80094e6:	4a1e      	ldr	r2, [pc, #120]	; (8009560 <_free_r+0x94>)
 80094e8:	9801      	ldr	r0, [sp, #4]
 80094ea:	6813      	ldr	r3, [r2, #0]
 80094ec:	b933      	cbnz	r3, 80094fc <_free_r+0x30>
 80094ee:	6063      	str	r3, [r4, #4]
 80094f0:	6014      	str	r4, [r2, #0]
 80094f2:	b003      	add	sp, #12
 80094f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094f8:	f000 b8e2 	b.w	80096c0 <__malloc_unlock>
 80094fc:	42a3      	cmp	r3, r4
 80094fe:	d908      	bls.n	8009512 <_free_r+0x46>
 8009500:	6825      	ldr	r5, [r4, #0]
 8009502:	1961      	adds	r1, r4, r5
 8009504:	428b      	cmp	r3, r1
 8009506:	bf01      	itttt	eq
 8009508:	6819      	ldreq	r1, [r3, #0]
 800950a:	685b      	ldreq	r3, [r3, #4]
 800950c:	1949      	addeq	r1, r1, r5
 800950e:	6021      	streq	r1, [r4, #0]
 8009510:	e7ed      	b.n	80094ee <_free_r+0x22>
 8009512:	461a      	mov	r2, r3
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	b10b      	cbz	r3, 800951c <_free_r+0x50>
 8009518:	42a3      	cmp	r3, r4
 800951a:	d9fa      	bls.n	8009512 <_free_r+0x46>
 800951c:	6811      	ldr	r1, [r2, #0]
 800951e:	1855      	adds	r5, r2, r1
 8009520:	42a5      	cmp	r5, r4
 8009522:	d10b      	bne.n	800953c <_free_r+0x70>
 8009524:	6824      	ldr	r4, [r4, #0]
 8009526:	4421      	add	r1, r4
 8009528:	1854      	adds	r4, r2, r1
 800952a:	42a3      	cmp	r3, r4
 800952c:	6011      	str	r1, [r2, #0]
 800952e:	d1e0      	bne.n	80094f2 <_free_r+0x26>
 8009530:	681c      	ldr	r4, [r3, #0]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	6053      	str	r3, [r2, #4]
 8009536:	440c      	add	r4, r1
 8009538:	6014      	str	r4, [r2, #0]
 800953a:	e7da      	b.n	80094f2 <_free_r+0x26>
 800953c:	d902      	bls.n	8009544 <_free_r+0x78>
 800953e:	230c      	movs	r3, #12
 8009540:	6003      	str	r3, [r0, #0]
 8009542:	e7d6      	b.n	80094f2 <_free_r+0x26>
 8009544:	6825      	ldr	r5, [r4, #0]
 8009546:	1961      	adds	r1, r4, r5
 8009548:	428b      	cmp	r3, r1
 800954a:	bf04      	itt	eq
 800954c:	6819      	ldreq	r1, [r3, #0]
 800954e:	685b      	ldreq	r3, [r3, #4]
 8009550:	6063      	str	r3, [r4, #4]
 8009552:	bf04      	itt	eq
 8009554:	1949      	addeq	r1, r1, r5
 8009556:	6021      	streq	r1, [r4, #0]
 8009558:	6054      	str	r4, [r2, #4]
 800955a:	e7ca      	b.n	80094f2 <_free_r+0x26>
 800955c:	b003      	add	sp, #12
 800955e:	bd30      	pop	{r4, r5, pc}
 8009560:	200004ec 	.word	0x200004ec

08009564 <malloc>:
 8009564:	4b02      	ldr	r3, [pc, #8]	; (8009570 <malloc+0xc>)
 8009566:	4601      	mov	r1, r0
 8009568:	6818      	ldr	r0, [r3, #0]
 800956a:	f000 b823 	b.w	80095b4 <_malloc_r>
 800956e:	bf00      	nop
 8009570:	2000006c 	.word	0x2000006c

08009574 <sbrk_aligned>:
 8009574:	b570      	push	{r4, r5, r6, lr}
 8009576:	4e0e      	ldr	r6, [pc, #56]	; (80095b0 <sbrk_aligned+0x3c>)
 8009578:	460c      	mov	r4, r1
 800957a:	6831      	ldr	r1, [r6, #0]
 800957c:	4605      	mov	r5, r0
 800957e:	b911      	cbnz	r1, 8009586 <sbrk_aligned+0x12>
 8009580:	f000 fe40 	bl	800a204 <_sbrk_r>
 8009584:	6030      	str	r0, [r6, #0]
 8009586:	4621      	mov	r1, r4
 8009588:	4628      	mov	r0, r5
 800958a:	f000 fe3b 	bl	800a204 <_sbrk_r>
 800958e:	1c43      	adds	r3, r0, #1
 8009590:	d00a      	beq.n	80095a8 <sbrk_aligned+0x34>
 8009592:	1cc4      	adds	r4, r0, #3
 8009594:	f024 0403 	bic.w	r4, r4, #3
 8009598:	42a0      	cmp	r0, r4
 800959a:	d007      	beq.n	80095ac <sbrk_aligned+0x38>
 800959c:	1a21      	subs	r1, r4, r0
 800959e:	4628      	mov	r0, r5
 80095a0:	f000 fe30 	bl	800a204 <_sbrk_r>
 80095a4:	3001      	adds	r0, #1
 80095a6:	d101      	bne.n	80095ac <sbrk_aligned+0x38>
 80095a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80095ac:	4620      	mov	r0, r4
 80095ae:	bd70      	pop	{r4, r5, r6, pc}
 80095b0:	200004f0 	.word	0x200004f0

080095b4 <_malloc_r>:
 80095b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095b8:	1ccd      	adds	r5, r1, #3
 80095ba:	f025 0503 	bic.w	r5, r5, #3
 80095be:	3508      	adds	r5, #8
 80095c0:	2d0c      	cmp	r5, #12
 80095c2:	bf38      	it	cc
 80095c4:	250c      	movcc	r5, #12
 80095c6:	2d00      	cmp	r5, #0
 80095c8:	4607      	mov	r7, r0
 80095ca:	db01      	blt.n	80095d0 <_malloc_r+0x1c>
 80095cc:	42a9      	cmp	r1, r5
 80095ce:	d905      	bls.n	80095dc <_malloc_r+0x28>
 80095d0:	230c      	movs	r3, #12
 80095d2:	603b      	str	r3, [r7, #0]
 80095d4:	2600      	movs	r6, #0
 80095d6:	4630      	mov	r0, r6
 80095d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80096b0 <_malloc_r+0xfc>
 80095e0:	f000 f868 	bl	80096b4 <__malloc_lock>
 80095e4:	f8d8 3000 	ldr.w	r3, [r8]
 80095e8:	461c      	mov	r4, r3
 80095ea:	bb5c      	cbnz	r4, 8009644 <_malloc_r+0x90>
 80095ec:	4629      	mov	r1, r5
 80095ee:	4638      	mov	r0, r7
 80095f0:	f7ff ffc0 	bl	8009574 <sbrk_aligned>
 80095f4:	1c43      	adds	r3, r0, #1
 80095f6:	4604      	mov	r4, r0
 80095f8:	d155      	bne.n	80096a6 <_malloc_r+0xf2>
 80095fa:	f8d8 4000 	ldr.w	r4, [r8]
 80095fe:	4626      	mov	r6, r4
 8009600:	2e00      	cmp	r6, #0
 8009602:	d145      	bne.n	8009690 <_malloc_r+0xdc>
 8009604:	2c00      	cmp	r4, #0
 8009606:	d048      	beq.n	800969a <_malloc_r+0xe6>
 8009608:	6823      	ldr	r3, [r4, #0]
 800960a:	4631      	mov	r1, r6
 800960c:	4638      	mov	r0, r7
 800960e:	eb04 0903 	add.w	r9, r4, r3
 8009612:	f000 fdf7 	bl	800a204 <_sbrk_r>
 8009616:	4581      	cmp	r9, r0
 8009618:	d13f      	bne.n	800969a <_malloc_r+0xe6>
 800961a:	6821      	ldr	r1, [r4, #0]
 800961c:	1a6d      	subs	r5, r5, r1
 800961e:	4629      	mov	r1, r5
 8009620:	4638      	mov	r0, r7
 8009622:	f7ff ffa7 	bl	8009574 <sbrk_aligned>
 8009626:	3001      	adds	r0, #1
 8009628:	d037      	beq.n	800969a <_malloc_r+0xe6>
 800962a:	6823      	ldr	r3, [r4, #0]
 800962c:	442b      	add	r3, r5
 800962e:	6023      	str	r3, [r4, #0]
 8009630:	f8d8 3000 	ldr.w	r3, [r8]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d038      	beq.n	80096aa <_malloc_r+0xf6>
 8009638:	685a      	ldr	r2, [r3, #4]
 800963a:	42a2      	cmp	r2, r4
 800963c:	d12b      	bne.n	8009696 <_malloc_r+0xe2>
 800963e:	2200      	movs	r2, #0
 8009640:	605a      	str	r2, [r3, #4]
 8009642:	e00f      	b.n	8009664 <_malloc_r+0xb0>
 8009644:	6822      	ldr	r2, [r4, #0]
 8009646:	1b52      	subs	r2, r2, r5
 8009648:	d41f      	bmi.n	800968a <_malloc_r+0xd6>
 800964a:	2a0b      	cmp	r2, #11
 800964c:	d917      	bls.n	800967e <_malloc_r+0xca>
 800964e:	1961      	adds	r1, r4, r5
 8009650:	42a3      	cmp	r3, r4
 8009652:	6025      	str	r5, [r4, #0]
 8009654:	bf18      	it	ne
 8009656:	6059      	strne	r1, [r3, #4]
 8009658:	6863      	ldr	r3, [r4, #4]
 800965a:	bf08      	it	eq
 800965c:	f8c8 1000 	streq.w	r1, [r8]
 8009660:	5162      	str	r2, [r4, r5]
 8009662:	604b      	str	r3, [r1, #4]
 8009664:	4638      	mov	r0, r7
 8009666:	f104 060b 	add.w	r6, r4, #11
 800966a:	f000 f829 	bl	80096c0 <__malloc_unlock>
 800966e:	f026 0607 	bic.w	r6, r6, #7
 8009672:	1d23      	adds	r3, r4, #4
 8009674:	1af2      	subs	r2, r6, r3
 8009676:	d0ae      	beq.n	80095d6 <_malloc_r+0x22>
 8009678:	1b9b      	subs	r3, r3, r6
 800967a:	50a3      	str	r3, [r4, r2]
 800967c:	e7ab      	b.n	80095d6 <_malloc_r+0x22>
 800967e:	42a3      	cmp	r3, r4
 8009680:	6862      	ldr	r2, [r4, #4]
 8009682:	d1dd      	bne.n	8009640 <_malloc_r+0x8c>
 8009684:	f8c8 2000 	str.w	r2, [r8]
 8009688:	e7ec      	b.n	8009664 <_malloc_r+0xb0>
 800968a:	4623      	mov	r3, r4
 800968c:	6864      	ldr	r4, [r4, #4]
 800968e:	e7ac      	b.n	80095ea <_malloc_r+0x36>
 8009690:	4634      	mov	r4, r6
 8009692:	6876      	ldr	r6, [r6, #4]
 8009694:	e7b4      	b.n	8009600 <_malloc_r+0x4c>
 8009696:	4613      	mov	r3, r2
 8009698:	e7cc      	b.n	8009634 <_malloc_r+0x80>
 800969a:	230c      	movs	r3, #12
 800969c:	603b      	str	r3, [r7, #0]
 800969e:	4638      	mov	r0, r7
 80096a0:	f000 f80e 	bl	80096c0 <__malloc_unlock>
 80096a4:	e797      	b.n	80095d6 <_malloc_r+0x22>
 80096a6:	6025      	str	r5, [r4, #0]
 80096a8:	e7dc      	b.n	8009664 <_malloc_r+0xb0>
 80096aa:	605b      	str	r3, [r3, #4]
 80096ac:	deff      	udf	#255	; 0xff
 80096ae:	bf00      	nop
 80096b0:	200004ec 	.word	0x200004ec

080096b4 <__malloc_lock>:
 80096b4:	4801      	ldr	r0, [pc, #4]	; (80096bc <__malloc_lock+0x8>)
 80096b6:	f7ff b88c 	b.w	80087d2 <__retarget_lock_acquire_recursive>
 80096ba:	bf00      	nop
 80096bc:	200004e8 	.word	0x200004e8

080096c0 <__malloc_unlock>:
 80096c0:	4801      	ldr	r0, [pc, #4]	; (80096c8 <__malloc_unlock+0x8>)
 80096c2:	f7ff b887 	b.w	80087d4 <__retarget_lock_release_recursive>
 80096c6:	bf00      	nop
 80096c8:	200004e8 	.word	0x200004e8

080096cc <_Balloc>:
 80096cc:	b570      	push	{r4, r5, r6, lr}
 80096ce:	69c6      	ldr	r6, [r0, #28]
 80096d0:	4604      	mov	r4, r0
 80096d2:	460d      	mov	r5, r1
 80096d4:	b976      	cbnz	r6, 80096f4 <_Balloc+0x28>
 80096d6:	2010      	movs	r0, #16
 80096d8:	f7ff ff44 	bl	8009564 <malloc>
 80096dc:	4602      	mov	r2, r0
 80096de:	61e0      	str	r0, [r4, #28]
 80096e0:	b920      	cbnz	r0, 80096ec <_Balloc+0x20>
 80096e2:	4b18      	ldr	r3, [pc, #96]	; (8009744 <_Balloc+0x78>)
 80096e4:	4818      	ldr	r0, [pc, #96]	; (8009748 <_Balloc+0x7c>)
 80096e6:	216b      	movs	r1, #107	; 0x6b
 80096e8:	f000 fdaa 	bl	800a240 <__assert_func>
 80096ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096f0:	6006      	str	r6, [r0, #0]
 80096f2:	60c6      	str	r6, [r0, #12]
 80096f4:	69e6      	ldr	r6, [r4, #28]
 80096f6:	68f3      	ldr	r3, [r6, #12]
 80096f8:	b183      	cbz	r3, 800971c <_Balloc+0x50>
 80096fa:	69e3      	ldr	r3, [r4, #28]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009702:	b9b8      	cbnz	r0, 8009734 <_Balloc+0x68>
 8009704:	2101      	movs	r1, #1
 8009706:	fa01 f605 	lsl.w	r6, r1, r5
 800970a:	1d72      	adds	r2, r6, #5
 800970c:	0092      	lsls	r2, r2, #2
 800970e:	4620      	mov	r0, r4
 8009710:	f000 fdb4 	bl	800a27c <_calloc_r>
 8009714:	b160      	cbz	r0, 8009730 <_Balloc+0x64>
 8009716:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800971a:	e00e      	b.n	800973a <_Balloc+0x6e>
 800971c:	2221      	movs	r2, #33	; 0x21
 800971e:	2104      	movs	r1, #4
 8009720:	4620      	mov	r0, r4
 8009722:	f000 fdab 	bl	800a27c <_calloc_r>
 8009726:	69e3      	ldr	r3, [r4, #28]
 8009728:	60f0      	str	r0, [r6, #12]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1e4      	bne.n	80096fa <_Balloc+0x2e>
 8009730:	2000      	movs	r0, #0
 8009732:	bd70      	pop	{r4, r5, r6, pc}
 8009734:	6802      	ldr	r2, [r0, #0]
 8009736:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800973a:	2300      	movs	r3, #0
 800973c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009740:	e7f7      	b.n	8009732 <_Balloc+0x66>
 8009742:	bf00      	nop
 8009744:	0800a999 	.word	0x0800a999
 8009748:	0800aa19 	.word	0x0800aa19

0800974c <_Bfree>:
 800974c:	b570      	push	{r4, r5, r6, lr}
 800974e:	69c6      	ldr	r6, [r0, #28]
 8009750:	4605      	mov	r5, r0
 8009752:	460c      	mov	r4, r1
 8009754:	b976      	cbnz	r6, 8009774 <_Bfree+0x28>
 8009756:	2010      	movs	r0, #16
 8009758:	f7ff ff04 	bl	8009564 <malloc>
 800975c:	4602      	mov	r2, r0
 800975e:	61e8      	str	r0, [r5, #28]
 8009760:	b920      	cbnz	r0, 800976c <_Bfree+0x20>
 8009762:	4b09      	ldr	r3, [pc, #36]	; (8009788 <_Bfree+0x3c>)
 8009764:	4809      	ldr	r0, [pc, #36]	; (800978c <_Bfree+0x40>)
 8009766:	218f      	movs	r1, #143	; 0x8f
 8009768:	f000 fd6a 	bl	800a240 <__assert_func>
 800976c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009770:	6006      	str	r6, [r0, #0]
 8009772:	60c6      	str	r6, [r0, #12]
 8009774:	b13c      	cbz	r4, 8009786 <_Bfree+0x3a>
 8009776:	69eb      	ldr	r3, [r5, #28]
 8009778:	6862      	ldr	r2, [r4, #4]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009780:	6021      	str	r1, [r4, #0]
 8009782:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009786:	bd70      	pop	{r4, r5, r6, pc}
 8009788:	0800a999 	.word	0x0800a999
 800978c:	0800aa19 	.word	0x0800aa19

08009790 <__multadd>:
 8009790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009794:	690d      	ldr	r5, [r1, #16]
 8009796:	4607      	mov	r7, r0
 8009798:	460c      	mov	r4, r1
 800979a:	461e      	mov	r6, r3
 800979c:	f101 0c14 	add.w	ip, r1, #20
 80097a0:	2000      	movs	r0, #0
 80097a2:	f8dc 3000 	ldr.w	r3, [ip]
 80097a6:	b299      	uxth	r1, r3
 80097a8:	fb02 6101 	mla	r1, r2, r1, r6
 80097ac:	0c1e      	lsrs	r6, r3, #16
 80097ae:	0c0b      	lsrs	r3, r1, #16
 80097b0:	fb02 3306 	mla	r3, r2, r6, r3
 80097b4:	b289      	uxth	r1, r1
 80097b6:	3001      	adds	r0, #1
 80097b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80097bc:	4285      	cmp	r5, r0
 80097be:	f84c 1b04 	str.w	r1, [ip], #4
 80097c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80097c6:	dcec      	bgt.n	80097a2 <__multadd+0x12>
 80097c8:	b30e      	cbz	r6, 800980e <__multadd+0x7e>
 80097ca:	68a3      	ldr	r3, [r4, #8]
 80097cc:	42ab      	cmp	r3, r5
 80097ce:	dc19      	bgt.n	8009804 <__multadd+0x74>
 80097d0:	6861      	ldr	r1, [r4, #4]
 80097d2:	4638      	mov	r0, r7
 80097d4:	3101      	adds	r1, #1
 80097d6:	f7ff ff79 	bl	80096cc <_Balloc>
 80097da:	4680      	mov	r8, r0
 80097dc:	b928      	cbnz	r0, 80097ea <__multadd+0x5a>
 80097de:	4602      	mov	r2, r0
 80097e0:	4b0c      	ldr	r3, [pc, #48]	; (8009814 <__multadd+0x84>)
 80097e2:	480d      	ldr	r0, [pc, #52]	; (8009818 <__multadd+0x88>)
 80097e4:	21ba      	movs	r1, #186	; 0xba
 80097e6:	f000 fd2b 	bl	800a240 <__assert_func>
 80097ea:	6922      	ldr	r2, [r4, #16]
 80097ec:	3202      	adds	r2, #2
 80097ee:	f104 010c 	add.w	r1, r4, #12
 80097f2:	0092      	lsls	r2, r2, #2
 80097f4:	300c      	adds	r0, #12
 80097f6:	f000 fd15 	bl	800a224 <memcpy>
 80097fa:	4621      	mov	r1, r4
 80097fc:	4638      	mov	r0, r7
 80097fe:	f7ff ffa5 	bl	800974c <_Bfree>
 8009802:	4644      	mov	r4, r8
 8009804:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009808:	3501      	adds	r5, #1
 800980a:	615e      	str	r6, [r3, #20]
 800980c:	6125      	str	r5, [r4, #16]
 800980e:	4620      	mov	r0, r4
 8009810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009814:	0800aa08 	.word	0x0800aa08
 8009818:	0800aa19 	.word	0x0800aa19

0800981c <__hi0bits>:
 800981c:	0c03      	lsrs	r3, r0, #16
 800981e:	041b      	lsls	r3, r3, #16
 8009820:	b9d3      	cbnz	r3, 8009858 <__hi0bits+0x3c>
 8009822:	0400      	lsls	r0, r0, #16
 8009824:	2310      	movs	r3, #16
 8009826:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800982a:	bf04      	itt	eq
 800982c:	0200      	lsleq	r0, r0, #8
 800982e:	3308      	addeq	r3, #8
 8009830:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009834:	bf04      	itt	eq
 8009836:	0100      	lsleq	r0, r0, #4
 8009838:	3304      	addeq	r3, #4
 800983a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800983e:	bf04      	itt	eq
 8009840:	0080      	lsleq	r0, r0, #2
 8009842:	3302      	addeq	r3, #2
 8009844:	2800      	cmp	r0, #0
 8009846:	db05      	blt.n	8009854 <__hi0bits+0x38>
 8009848:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800984c:	f103 0301 	add.w	r3, r3, #1
 8009850:	bf08      	it	eq
 8009852:	2320      	moveq	r3, #32
 8009854:	4618      	mov	r0, r3
 8009856:	4770      	bx	lr
 8009858:	2300      	movs	r3, #0
 800985a:	e7e4      	b.n	8009826 <__hi0bits+0xa>

0800985c <__lo0bits>:
 800985c:	6803      	ldr	r3, [r0, #0]
 800985e:	f013 0207 	ands.w	r2, r3, #7
 8009862:	d00c      	beq.n	800987e <__lo0bits+0x22>
 8009864:	07d9      	lsls	r1, r3, #31
 8009866:	d422      	bmi.n	80098ae <__lo0bits+0x52>
 8009868:	079a      	lsls	r2, r3, #30
 800986a:	bf49      	itett	mi
 800986c:	085b      	lsrmi	r3, r3, #1
 800986e:	089b      	lsrpl	r3, r3, #2
 8009870:	6003      	strmi	r3, [r0, #0]
 8009872:	2201      	movmi	r2, #1
 8009874:	bf5c      	itt	pl
 8009876:	6003      	strpl	r3, [r0, #0]
 8009878:	2202      	movpl	r2, #2
 800987a:	4610      	mov	r0, r2
 800987c:	4770      	bx	lr
 800987e:	b299      	uxth	r1, r3
 8009880:	b909      	cbnz	r1, 8009886 <__lo0bits+0x2a>
 8009882:	0c1b      	lsrs	r3, r3, #16
 8009884:	2210      	movs	r2, #16
 8009886:	b2d9      	uxtb	r1, r3
 8009888:	b909      	cbnz	r1, 800988e <__lo0bits+0x32>
 800988a:	3208      	adds	r2, #8
 800988c:	0a1b      	lsrs	r3, r3, #8
 800988e:	0719      	lsls	r1, r3, #28
 8009890:	bf04      	itt	eq
 8009892:	091b      	lsreq	r3, r3, #4
 8009894:	3204      	addeq	r2, #4
 8009896:	0799      	lsls	r1, r3, #30
 8009898:	bf04      	itt	eq
 800989a:	089b      	lsreq	r3, r3, #2
 800989c:	3202      	addeq	r2, #2
 800989e:	07d9      	lsls	r1, r3, #31
 80098a0:	d403      	bmi.n	80098aa <__lo0bits+0x4e>
 80098a2:	085b      	lsrs	r3, r3, #1
 80098a4:	f102 0201 	add.w	r2, r2, #1
 80098a8:	d003      	beq.n	80098b2 <__lo0bits+0x56>
 80098aa:	6003      	str	r3, [r0, #0]
 80098ac:	e7e5      	b.n	800987a <__lo0bits+0x1e>
 80098ae:	2200      	movs	r2, #0
 80098b0:	e7e3      	b.n	800987a <__lo0bits+0x1e>
 80098b2:	2220      	movs	r2, #32
 80098b4:	e7e1      	b.n	800987a <__lo0bits+0x1e>
	...

080098b8 <__i2b>:
 80098b8:	b510      	push	{r4, lr}
 80098ba:	460c      	mov	r4, r1
 80098bc:	2101      	movs	r1, #1
 80098be:	f7ff ff05 	bl	80096cc <_Balloc>
 80098c2:	4602      	mov	r2, r0
 80098c4:	b928      	cbnz	r0, 80098d2 <__i2b+0x1a>
 80098c6:	4b05      	ldr	r3, [pc, #20]	; (80098dc <__i2b+0x24>)
 80098c8:	4805      	ldr	r0, [pc, #20]	; (80098e0 <__i2b+0x28>)
 80098ca:	f240 1145 	movw	r1, #325	; 0x145
 80098ce:	f000 fcb7 	bl	800a240 <__assert_func>
 80098d2:	2301      	movs	r3, #1
 80098d4:	6144      	str	r4, [r0, #20]
 80098d6:	6103      	str	r3, [r0, #16]
 80098d8:	bd10      	pop	{r4, pc}
 80098da:	bf00      	nop
 80098dc:	0800aa08 	.word	0x0800aa08
 80098e0:	0800aa19 	.word	0x0800aa19

080098e4 <__multiply>:
 80098e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e8:	4691      	mov	r9, r2
 80098ea:	690a      	ldr	r2, [r1, #16]
 80098ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	bfb8      	it	lt
 80098f4:	460b      	movlt	r3, r1
 80098f6:	460c      	mov	r4, r1
 80098f8:	bfbc      	itt	lt
 80098fa:	464c      	movlt	r4, r9
 80098fc:	4699      	movlt	r9, r3
 80098fe:	6927      	ldr	r7, [r4, #16]
 8009900:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009904:	68a3      	ldr	r3, [r4, #8]
 8009906:	6861      	ldr	r1, [r4, #4]
 8009908:	eb07 060a 	add.w	r6, r7, sl
 800990c:	42b3      	cmp	r3, r6
 800990e:	b085      	sub	sp, #20
 8009910:	bfb8      	it	lt
 8009912:	3101      	addlt	r1, #1
 8009914:	f7ff feda 	bl	80096cc <_Balloc>
 8009918:	b930      	cbnz	r0, 8009928 <__multiply+0x44>
 800991a:	4602      	mov	r2, r0
 800991c:	4b44      	ldr	r3, [pc, #272]	; (8009a30 <__multiply+0x14c>)
 800991e:	4845      	ldr	r0, [pc, #276]	; (8009a34 <__multiply+0x150>)
 8009920:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009924:	f000 fc8c 	bl	800a240 <__assert_func>
 8009928:	f100 0514 	add.w	r5, r0, #20
 800992c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009930:	462b      	mov	r3, r5
 8009932:	2200      	movs	r2, #0
 8009934:	4543      	cmp	r3, r8
 8009936:	d321      	bcc.n	800997c <__multiply+0x98>
 8009938:	f104 0314 	add.w	r3, r4, #20
 800993c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009940:	f109 0314 	add.w	r3, r9, #20
 8009944:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009948:	9202      	str	r2, [sp, #8]
 800994a:	1b3a      	subs	r2, r7, r4
 800994c:	3a15      	subs	r2, #21
 800994e:	f022 0203 	bic.w	r2, r2, #3
 8009952:	3204      	adds	r2, #4
 8009954:	f104 0115 	add.w	r1, r4, #21
 8009958:	428f      	cmp	r7, r1
 800995a:	bf38      	it	cc
 800995c:	2204      	movcc	r2, #4
 800995e:	9201      	str	r2, [sp, #4]
 8009960:	9a02      	ldr	r2, [sp, #8]
 8009962:	9303      	str	r3, [sp, #12]
 8009964:	429a      	cmp	r2, r3
 8009966:	d80c      	bhi.n	8009982 <__multiply+0x9e>
 8009968:	2e00      	cmp	r6, #0
 800996a:	dd03      	ble.n	8009974 <__multiply+0x90>
 800996c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009970:	2b00      	cmp	r3, #0
 8009972:	d05b      	beq.n	8009a2c <__multiply+0x148>
 8009974:	6106      	str	r6, [r0, #16]
 8009976:	b005      	add	sp, #20
 8009978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800997c:	f843 2b04 	str.w	r2, [r3], #4
 8009980:	e7d8      	b.n	8009934 <__multiply+0x50>
 8009982:	f8b3 a000 	ldrh.w	sl, [r3]
 8009986:	f1ba 0f00 	cmp.w	sl, #0
 800998a:	d024      	beq.n	80099d6 <__multiply+0xf2>
 800998c:	f104 0e14 	add.w	lr, r4, #20
 8009990:	46a9      	mov	r9, r5
 8009992:	f04f 0c00 	mov.w	ip, #0
 8009996:	f85e 2b04 	ldr.w	r2, [lr], #4
 800999a:	f8d9 1000 	ldr.w	r1, [r9]
 800999e:	fa1f fb82 	uxth.w	fp, r2
 80099a2:	b289      	uxth	r1, r1
 80099a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80099a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80099ac:	f8d9 2000 	ldr.w	r2, [r9]
 80099b0:	4461      	add	r1, ip
 80099b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80099b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80099ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80099be:	b289      	uxth	r1, r1
 80099c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80099c4:	4577      	cmp	r7, lr
 80099c6:	f849 1b04 	str.w	r1, [r9], #4
 80099ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80099ce:	d8e2      	bhi.n	8009996 <__multiply+0xb2>
 80099d0:	9a01      	ldr	r2, [sp, #4]
 80099d2:	f845 c002 	str.w	ip, [r5, r2]
 80099d6:	9a03      	ldr	r2, [sp, #12]
 80099d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80099dc:	3304      	adds	r3, #4
 80099de:	f1b9 0f00 	cmp.w	r9, #0
 80099e2:	d021      	beq.n	8009a28 <__multiply+0x144>
 80099e4:	6829      	ldr	r1, [r5, #0]
 80099e6:	f104 0c14 	add.w	ip, r4, #20
 80099ea:	46ae      	mov	lr, r5
 80099ec:	f04f 0a00 	mov.w	sl, #0
 80099f0:	f8bc b000 	ldrh.w	fp, [ip]
 80099f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80099f8:	fb09 220b 	mla	r2, r9, fp, r2
 80099fc:	4452      	add	r2, sl
 80099fe:	b289      	uxth	r1, r1
 8009a00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009a04:	f84e 1b04 	str.w	r1, [lr], #4
 8009a08:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009a0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a10:	f8be 1000 	ldrh.w	r1, [lr]
 8009a14:	fb09 110a 	mla	r1, r9, sl, r1
 8009a18:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009a1c:	4567      	cmp	r7, ip
 8009a1e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a22:	d8e5      	bhi.n	80099f0 <__multiply+0x10c>
 8009a24:	9a01      	ldr	r2, [sp, #4]
 8009a26:	50a9      	str	r1, [r5, r2]
 8009a28:	3504      	adds	r5, #4
 8009a2a:	e799      	b.n	8009960 <__multiply+0x7c>
 8009a2c:	3e01      	subs	r6, #1
 8009a2e:	e79b      	b.n	8009968 <__multiply+0x84>
 8009a30:	0800aa08 	.word	0x0800aa08
 8009a34:	0800aa19 	.word	0x0800aa19

08009a38 <__pow5mult>:
 8009a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a3c:	4615      	mov	r5, r2
 8009a3e:	f012 0203 	ands.w	r2, r2, #3
 8009a42:	4606      	mov	r6, r0
 8009a44:	460f      	mov	r7, r1
 8009a46:	d007      	beq.n	8009a58 <__pow5mult+0x20>
 8009a48:	4c25      	ldr	r4, [pc, #148]	; (8009ae0 <__pow5mult+0xa8>)
 8009a4a:	3a01      	subs	r2, #1
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a52:	f7ff fe9d 	bl	8009790 <__multadd>
 8009a56:	4607      	mov	r7, r0
 8009a58:	10ad      	asrs	r5, r5, #2
 8009a5a:	d03d      	beq.n	8009ad8 <__pow5mult+0xa0>
 8009a5c:	69f4      	ldr	r4, [r6, #28]
 8009a5e:	b97c      	cbnz	r4, 8009a80 <__pow5mult+0x48>
 8009a60:	2010      	movs	r0, #16
 8009a62:	f7ff fd7f 	bl	8009564 <malloc>
 8009a66:	4602      	mov	r2, r0
 8009a68:	61f0      	str	r0, [r6, #28]
 8009a6a:	b928      	cbnz	r0, 8009a78 <__pow5mult+0x40>
 8009a6c:	4b1d      	ldr	r3, [pc, #116]	; (8009ae4 <__pow5mult+0xac>)
 8009a6e:	481e      	ldr	r0, [pc, #120]	; (8009ae8 <__pow5mult+0xb0>)
 8009a70:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009a74:	f000 fbe4 	bl	800a240 <__assert_func>
 8009a78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a7c:	6004      	str	r4, [r0, #0]
 8009a7e:	60c4      	str	r4, [r0, #12]
 8009a80:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009a84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a88:	b94c      	cbnz	r4, 8009a9e <__pow5mult+0x66>
 8009a8a:	f240 2171 	movw	r1, #625	; 0x271
 8009a8e:	4630      	mov	r0, r6
 8009a90:	f7ff ff12 	bl	80098b8 <__i2b>
 8009a94:	2300      	movs	r3, #0
 8009a96:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	6003      	str	r3, [r0, #0]
 8009a9e:	f04f 0900 	mov.w	r9, #0
 8009aa2:	07eb      	lsls	r3, r5, #31
 8009aa4:	d50a      	bpl.n	8009abc <__pow5mult+0x84>
 8009aa6:	4639      	mov	r1, r7
 8009aa8:	4622      	mov	r2, r4
 8009aaa:	4630      	mov	r0, r6
 8009aac:	f7ff ff1a 	bl	80098e4 <__multiply>
 8009ab0:	4639      	mov	r1, r7
 8009ab2:	4680      	mov	r8, r0
 8009ab4:	4630      	mov	r0, r6
 8009ab6:	f7ff fe49 	bl	800974c <_Bfree>
 8009aba:	4647      	mov	r7, r8
 8009abc:	106d      	asrs	r5, r5, #1
 8009abe:	d00b      	beq.n	8009ad8 <__pow5mult+0xa0>
 8009ac0:	6820      	ldr	r0, [r4, #0]
 8009ac2:	b938      	cbnz	r0, 8009ad4 <__pow5mult+0x9c>
 8009ac4:	4622      	mov	r2, r4
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	4630      	mov	r0, r6
 8009aca:	f7ff ff0b 	bl	80098e4 <__multiply>
 8009ace:	6020      	str	r0, [r4, #0]
 8009ad0:	f8c0 9000 	str.w	r9, [r0]
 8009ad4:	4604      	mov	r4, r0
 8009ad6:	e7e4      	b.n	8009aa2 <__pow5mult+0x6a>
 8009ad8:	4638      	mov	r0, r7
 8009ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ade:	bf00      	nop
 8009ae0:	0800ab68 	.word	0x0800ab68
 8009ae4:	0800a999 	.word	0x0800a999
 8009ae8:	0800aa19 	.word	0x0800aa19

08009aec <__lshift>:
 8009aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009af0:	460c      	mov	r4, r1
 8009af2:	6849      	ldr	r1, [r1, #4]
 8009af4:	6923      	ldr	r3, [r4, #16]
 8009af6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009afa:	68a3      	ldr	r3, [r4, #8]
 8009afc:	4607      	mov	r7, r0
 8009afe:	4691      	mov	r9, r2
 8009b00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b04:	f108 0601 	add.w	r6, r8, #1
 8009b08:	42b3      	cmp	r3, r6
 8009b0a:	db0b      	blt.n	8009b24 <__lshift+0x38>
 8009b0c:	4638      	mov	r0, r7
 8009b0e:	f7ff fddd 	bl	80096cc <_Balloc>
 8009b12:	4605      	mov	r5, r0
 8009b14:	b948      	cbnz	r0, 8009b2a <__lshift+0x3e>
 8009b16:	4602      	mov	r2, r0
 8009b18:	4b28      	ldr	r3, [pc, #160]	; (8009bbc <__lshift+0xd0>)
 8009b1a:	4829      	ldr	r0, [pc, #164]	; (8009bc0 <__lshift+0xd4>)
 8009b1c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009b20:	f000 fb8e 	bl	800a240 <__assert_func>
 8009b24:	3101      	adds	r1, #1
 8009b26:	005b      	lsls	r3, r3, #1
 8009b28:	e7ee      	b.n	8009b08 <__lshift+0x1c>
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	f100 0114 	add.w	r1, r0, #20
 8009b30:	f100 0210 	add.w	r2, r0, #16
 8009b34:	4618      	mov	r0, r3
 8009b36:	4553      	cmp	r3, sl
 8009b38:	db33      	blt.n	8009ba2 <__lshift+0xb6>
 8009b3a:	6920      	ldr	r0, [r4, #16]
 8009b3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b40:	f104 0314 	add.w	r3, r4, #20
 8009b44:	f019 091f 	ands.w	r9, r9, #31
 8009b48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b50:	d02b      	beq.n	8009baa <__lshift+0xbe>
 8009b52:	f1c9 0e20 	rsb	lr, r9, #32
 8009b56:	468a      	mov	sl, r1
 8009b58:	2200      	movs	r2, #0
 8009b5a:	6818      	ldr	r0, [r3, #0]
 8009b5c:	fa00 f009 	lsl.w	r0, r0, r9
 8009b60:	4310      	orrs	r0, r2
 8009b62:	f84a 0b04 	str.w	r0, [sl], #4
 8009b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b6a:	459c      	cmp	ip, r3
 8009b6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b70:	d8f3      	bhi.n	8009b5a <__lshift+0x6e>
 8009b72:	ebac 0304 	sub.w	r3, ip, r4
 8009b76:	3b15      	subs	r3, #21
 8009b78:	f023 0303 	bic.w	r3, r3, #3
 8009b7c:	3304      	adds	r3, #4
 8009b7e:	f104 0015 	add.w	r0, r4, #21
 8009b82:	4584      	cmp	ip, r0
 8009b84:	bf38      	it	cc
 8009b86:	2304      	movcc	r3, #4
 8009b88:	50ca      	str	r2, [r1, r3]
 8009b8a:	b10a      	cbz	r2, 8009b90 <__lshift+0xa4>
 8009b8c:	f108 0602 	add.w	r6, r8, #2
 8009b90:	3e01      	subs	r6, #1
 8009b92:	4638      	mov	r0, r7
 8009b94:	612e      	str	r6, [r5, #16]
 8009b96:	4621      	mov	r1, r4
 8009b98:	f7ff fdd8 	bl	800974c <_Bfree>
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ba2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	e7c5      	b.n	8009b36 <__lshift+0x4a>
 8009baa:	3904      	subs	r1, #4
 8009bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009bb4:	459c      	cmp	ip, r3
 8009bb6:	d8f9      	bhi.n	8009bac <__lshift+0xc0>
 8009bb8:	e7ea      	b.n	8009b90 <__lshift+0xa4>
 8009bba:	bf00      	nop
 8009bbc:	0800aa08 	.word	0x0800aa08
 8009bc0:	0800aa19 	.word	0x0800aa19

08009bc4 <__mcmp>:
 8009bc4:	b530      	push	{r4, r5, lr}
 8009bc6:	6902      	ldr	r2, [r0, #16]
 8009bc8:	690c      	ldr	r4, [r1, #16]
 8009bca:	1b12      	subs	r2, r2, r4
 8009bcc:	d10e      	bne.n	8009bec <__mcmp+0x28>
 8009bce:	f100 0314 	add.w	r3, r0, #20
 8009bd2:	3114      	adds	r1, #20
 8009bd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009bd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009bdc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009be0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009be4:	42a5      	cmp	r5, r4
 8009be6:	d003      	beq.n	8009bf0 <__mcmp+0x2c>
 8009be8:	d305      	bcc.n	8009bf6 <__mcmp+0x32>
 8009bea:	2201      	movs	r2, #1
 8009bec:	4610      	mov	r0, r2
 8009bee:	bd30      	pop	{r4, r5, pc}
 8009bf0:	4283      	cmp	r3, r0
 8009bf2:	d3f3      	bcc.n	8009bdc <__mcmp+0x18>
 8009bf4:	e7fa      	b.n	8009bec <__mcmp+0x28>
 8009bf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bfa:	e7f7      	b.n	8009bec <__mcmp+0x28>

08009bfc <__mdiff>:
 8009bfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c00:	460c      	mov	r4, r1
 8009c02:	4606      	mov	r6, r0
 8009c04:	4611      	mov	r1, r2
 8009c06:	4620      	mov	r0, r4
 8009c08:	4690      	mov	r8, r2
 8009c0a:	f7ff ffdb 	bl	8009bc4 <__mcmp>
 8009c0e:	1e05      	subs	r5, r0, #0
 8009c10:	d110      	bne.n	8009c34 <__mdiff+0x38>
 8009c12:	4629      	mov	r1, r5
 8009c14:	4630      	mov	r0, r6
 8009c16:	f7ff fd59 	bl	80096cc <_Balloc>
 8009c1a:	b930      	cbnz	r0, 8009c2a <__mdiff+0x2e>
 8009c1c:	4b3a      	ldr	r3, [pc, #232]	; (8009d08 <__mdiff+0x10c>)
 8009c1e:	4602      	mov	r2, r0
 8009c20:	f240 2137 	movw	r1, #567	; 0x237
 8009c24:	4839      	ldr	r0, [pc, #228]	; (8009d0c <__mdiff+0x110>)
 8009c26:	f000 fb0b 	bl	800a240 <__assert_func>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c34:	bfa4      	itt	ge
 8009c36:	4643      	movge	r3, r8
 8009c38:	46a0      	movge	r8, r4
 8009c3a:	4630      	mov	r0, r6
 8009c3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c40:	bfa6      	itte	ge
 8009c42:	461c      	movge	r4, r3
 8009c44:	2500      	movge	r5, #0
 8009c46:	2501      	movlt	r5, #1
 8009c48:	f7ff fd40 	bl	80096cc <_Balloc>
 8009c4c:	b920      	cbnz	r0, 8009c58 <__mdiff+0x5c>
 8009c4e:	4b2e      	ldr	r3, [pc, #184]	; (8009d08 <__mdiff+0x10c>)
 8009c50:	4602      	mov	r2, r0
 8009c52:	f240 2145 	movw	r1, #581	; 0x245
 8009c56:	e7e5      	b.n	8009c24 <__mdiff+0x28>
 8009c58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c5c:	6926      	ldr	r6, [r4, #16]
 8009c5e:	60c5      	str	r5, [r0, #12]
 8009c60:	f104 0914 	add.w	r9, r4, #20
 8009c64:	f108 0514 	add.w	r5, r8, #20
 8009c68:	f100 0e14 	add.w	lr, r0, #20
 8009c6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009c70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009c74:	f108 0210 	add.w	r2, r8, #16
 8009c78:	46f2      	mov	sl, lr
 8009c7a:	2100      	movs	r1, #0
 8009c7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c84:	fa11 f88b 	uxtah	r8, r1, fp
 8009c88:	b299      	uxth	r1, r3
 8009c8a:	0c1b      	lsrs	r3, r3, #16
 8009c8c:	eba8 0801 	sub.w	r8, r8, r1
 8009c90:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c94:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c98:	fa1f f888 	uxth.w	r8, r8
 8009c9c:	1419      	asrs	r1, r3, #16
 8009c9e:	454e      	cmp	r6, r9
 8009ca0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009ca4:	f84a 3b04 	str.w	r3, [sl], #4
 8009ca8:	d8e8      	bhi.n	8009c7c <__mdiff+0x80>
 8009caa:	1b33      	subs	r3, r6, r4
 8009cac:	3b15      	subs	r3, #21
 8009cae:	f023 0303 	bic.w	r3, r3, #3
 8009cb2:	3304      	adds	r3, #4
 8009cb4:	3415      	adds	r4, #21
 8009cb6:	42a6      	cmp	r6, r4
 8009cb8:	bf38      	it	cc
 8009cba:	2304      	movcc	r3, #4
 8009cbc:	441d      	add	r5, r3
 8009cbe:	4473      	add	r3, lr
 8009cc0:	469e      	mov	lr, r3
 8009cc2:	462e      	mov	r6, r5
 8009cc4:	4566      	cmp	r6, ip
 8009cc6:	d30e      	bcc.n	8009ce6 <__mdiff+0xea>
 8009cc8:	f10c 0203 	add.w	r2, ip, #3
 8009ccc:	1b52      	subs	r2, r2, r5
 8009cce:	f022 0203 	bic.w	r2, r2, #3
 8009cd2:	3d03      	subs	r5, #3
 8009cd4:	45ac      	cmp	ip, r5
 8009cd6:	bf38      	it	cc
 8009cd8:	2200      	movcc	r2, #0
 8009cda:	4413      	add	r3, r2
 8009cdc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009ce0:	b17a      	cbz	r2, 8009d02 <__mdiff+0x106>
 8009ce2:	6107      	str	r7, [r0, #16]
 8009ce4:	e7a4      	b.n	8009c30 <__mdiff+0x34>
 8009ce6:	f856 8b04 	ldr.w	r8, [r6], #4
 8009cea:	fa11 f288 	uxtah	r2, r1, r8
 8009cee:	1414      	asrs	r4, r2, #16
 8009cf0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009cf4:	b292      	uxth	r2, r2
 8009cf6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009cfa:	f84e 2b04 	str.w	r2, [lr], #4
 8009cfe:	1421      	asrs	r1, r4, #16
 8009d00:	e7e0      	b.n	8009cc4 <__mdiff+0xc8>
 8009d02:	3f01      	subs	r7, #1
 8009d04:	e7ea      	b.n	8009cdc <__mdiff+0xe0>
 8009d06:	bf00      	nop
 8009d08:	0800aa08 	.word	0x0800aa08
 8009d0c:	0800aa19 	.word	0x0800aa19

08009d10 <__d2b>:
 8009d10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d14:	460f      	mov	r7, r1
 8009d16:	2101      	movs	r1, #1
 8009d18:	ec59 8b10 	vmov	r8, r9, d0
 8009d1c:	4616      	mov	r6, r2
 8009d1e:	f7ff fcd5 	bl	80096cc <_Balloc>
 8009d22:	4604      	mov	r4, r0
 8009d24:	b930      	cbnz	r0, 8009d34 <__d2b+0x24>
 8009d26:	4602      	mov	r2, r0
 8009d28:	4b24      	ldr	r3, [pc, #144]	; (8009dbc <__d2b+0xac>)
 8009d2a:	4825      	ldr	r0, [pc, #148]	; (8009dc0 <__d2b+0xb0>)
 8009d2c:	f240 310f 	movw	r1, #783	; 0x30f
 8009d30:	f000 fa86 	bl	800a240 <__assert_func>
 8009d34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d3c:	bb2d      	cbnz	r5, 8009d8a <__d2b+0x7a>
 8009d3e:	9301      	str	r3, [sp, #4]
 8009d40:	f1b8 0300 	subs.w	r3, r8, #0
 8009d44:	d026      	beq.n	8009d94 <__d2b+0x84>
 8009d46:	4668      	mov	r0, sp
 8009d48:	9300      	str	r3, [sp, #0]
 8009d4a:	f7ff fd87 	bl	800985c <__lo0bits>
 8009d4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d52:	b1e8      	cbz	r0, 8009d90 <__d2b+0x80>
 8009d54:	f1c0 0320 	rsb	r3, r0, #32
 8009d58:	fa02 f303 	lsl.w	r3, r2, r3
 8009d5c:	430b      	orrs	r3, r1
 8009d5e:	40c2      	lsrs	r2, r0
 8009d60:	6163      	str	r3, [r4, #20]
 8009d62:	9201      	str	r2, [sp, #4]
 8009d64:	9b01      	ldr	r3, [sp, #4]
 8009d66:	61a3      	str	r3, [r4, #24]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	bf14      	ite	ne
 8009d6c:	2202      	movne	r2, #2
 8009d6e:	2201      	moveq	r2, #1
 8009d70:	6122      	str	r2, [r4, #16]
 8009d72:	b1bd      	cbz	r5, 8009da4 <__d2b+0x94>
 8009d74:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d78:	4405      	add	r5, r0
 8009d7a:	603d      	str	r5, [r7, #0]
 8009d7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d80:	6030      	str	r0, [r6, #0]
 8009d82:	4620      	mov	r0, r4
 8009d84:	b003      	add	sp, #12
 8009d86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d8e:	e7d6      	b.n	8009d3e <__d2b+0x2e>
 8009d90:	6161      	str	r1, [r4, #20]
 8009d92:	e7e7      	b.n	8009d64 <__d2b+0x54>
 8009d94:	a801      	add	r0, sp, #4
 8009d96:	f7ff fd61 	bl	800985c <__lo0bits>
 8009d9a:	9b01      	ldr	r3, [sp, #4]
 8009d9c:	6163      	str	r3, [r4, #20]
 8009d9e:	3020      	adds	r0, #32
 8009da0:	2201      	movs	r2, #1
 8009da2:	e7e5      	b.n	8009d70 <__d2b+0x60>
 8009da4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009da8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009dac:	6038      	str	r0, [r7, #0]
 8009dae:	6918      	ldr	r0, [r3, #16]
 8009db0:	f7ff fd34 	bl	800981c <__hi0bits>
 8009db4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009db8:	e7e2      	b.n	8009d80 <__d2b+0x70>
 8009dba:	bf00      	nop
 8009dbc:	0800aa08 	.word	0x0800aa08
 8009dc0:	0800aa19 	.word	0x0800aa19

08009dc4 <__ssputs_r>:
 8009dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dc8:	688e      	ldr	r6, [r1, #8]
 8009dca:	461f      	mov	r7, r3
 8009dcc:	42be      	cmp	r6, r7
 8009dce:	680b      	ldr	r3, [r1, #0]
 8009dd0:	4682      	mov	sl, r0
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	4690      	mov	r8, r2
 8009dd6:	d82c      	bhi.n	8009e32 <__ssputs_r+0x6e>
 8009dd8:	898a      	ldrh	r2, [r1, #12]
 8009dda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009dde:	d026      	beq.n	8009e2e <__ssputs_r+0x6a>
 8009de0:	6965      	ldr	r5, [r4, #20]
 8009de2:	6909      	ldr	r1, [r1, #16]
 8009de4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009de8:	eba3 0901 	sub.w	r9, r3, r1
 8009dec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009df0:	1c7b      	adds	r3, r7, #1
 8009df2:	444b      	add	r3, r9
 8009df4:	106d      	asrs	r5, r5, #1
 8009df6:	429d      	cmp	r5, r3
 8009df8:	bf38      	it	cc
 8009dfa:	461d      	movcc	r5, r3
 8009dfc:	0553      	lsls	r3, r2, #21
 8009dfe:	d527      	bpl.n	8009e50 <__ssputs_r+0x8c>
 8009e00:	4629      	mov	r1, r5
 8009e02:	f7ff fbd7 	bl	80095b4 <_malloc_r>
 8009e06:	4606      	mov	r6, r0
 8009e08:	b360      	cbz	r0, 8009e64 <__ssputs_r+0xa0>
 8009e0a:	6921      	ldr	r1, [r4, #16]
 8009e0c:	464a      	mov	r2, r9
 8009e0e:	f000 fa09 	bl	800a224 <memcpy>
 8009e12:	89a3      	ldrh	r3, [r4, #12]
 8009e14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e1c:	81a3      	strh	r3, [r4, #12]
 8009e1e:	6126      	str	r6, [r4, #16]
 8009e20:	6165      	str	r5, [r4, #20]
 8009e22:	444e      	add	r6, r9
 8009e24:	eba5 0509 	sub.w	r5, r5, r9
 8009e28:	6026      	str	r6, [r4, #0]
 8009e2a:	60a5      	str	r5, [r4, #8]
 8009e2c:	463e      	mov	r6, r7
 8009e2e:	42be      	cmp	r6, r7
 8009e30:	d900      	bls.n	8009e34 <__ssputs_r+0x70>
 8009e32:	463e      	mov	r6, r7
 8009e34:	6820      	ldr	r0, [r4, #0]
 8009e36:	4632      	mov	r2, r6
 8009e38:	4641      	mov	r1, r8
 8009e3a:	f000 f9c9 	bl	800a1d0 <memmove>
 8009e3e:	68a3      	ldr	r3, [r4, #8]
 8009e40:	1b9b      	subs	r3, r3, r6
 8009e42:	60a3      	str	r3, [r4, #8]
 8009e44:	6823      	ldr	r3, [r4, #0]
 8009e46:	4433      	add	r3, r6
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	2000      	movs	r0, #0
 8009e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e50:	462a      	mov	r2, r5
 8009e52:	f000 fa3b 	bl	800a2cc <_realloc_r>
 8009e56:	4606      	mov	r6, r0
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d1e0      	bne.n	8009e1e <__ssputs_r+0x5a>
 8009e5c:	6921      	ldr	r1, [r4, #16]
 8009e5e:	4650      	mov	r0, sl
 8009e60:	f7ff fb34 	bl	80094cc <_free_r>
 8009e64:	230c      	movs	r3, #12
 8009e66:	f8ca 3000 	str.w	r3, [sl]
 8009e6a:	89a3      	ldrh	r3, [r4, #12]
 8009e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e70:	81a3      	strh	r3, [r4, #12]
 8009e72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e76:	e7e9      	b.n	8009e4c <__ssputs_r+0x88>

08009e78 <_svfiprintf_r>:
 8009e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7c:	4698      	mov	r8, r3
 8009e7e:	898b      	ldrh	r3, [r1, #12]
 8009e80:	061b      	lsls	r3, r3, #24
 8009e82:	b09d      	sub	sp, #116	; 0x74
 8009e84:	4607      	mov	r7, r0
 8009e86:	460d      	mov	r5, r1
 8009e88:	4614      	mov	r4, r2
 8009e8a:	d50e      	bpl.n	8009eaa <_svfiprintf_r+0x32>
 8009e8c:	690b      	ldr	r3, [r1, #16]
 8009e8e:	b963      	cbnz	r3, 8009eaa <_svfiprintf_r+0x32>
 8009e90:	2140      	movs	r1, #64	; 0x40
 8009e92:	f7ff fb8f 	bl	80095b4 <_malloc_r>
 8009e96:	6028      	str	r0, [r5, #0]
 8009e98:	6128      	str	r0, [r5, #16]
 8009e9a:	b920      	cbnz	r0, 8009ea6 <_svfiprintf_r+0x2e>
 8009e9c:	230c      	movs	r3, #12
 8009e9e:	603b      	str	r3, [r7, #0]
 8009ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ea4:	e0d0      	b.n	800a048 <_svfiprintf_r+0x1d0>
 8009ea6:	2340      	movs	r3, #64	; 0x40
 8009ea8:	616b      	str	r3, [r5, #20]
 8009eaa:	2300      	movs	r3, #0
 8009eac:	9309      	str	r3, [sp, #36]	; 0x24
 8009eae:	2320      	movs	r3, #32
 8009eb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009eb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009eb8:	2330      	movs	r3, #48	; 0x30
 8009eba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a060 <_svfiprintf_r+0x1e8>
 8009ebe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ec2:	f04f 0901 	mov.w	r9, #1
 8009ec6:	4623      	mov	r3, r4
 8009ec8:	469a      	mov	sl, r3
 8009eca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ece:	b10a      	cbz	r2, 8009ed4 <_svfiprintf_r+0x5c>
 8009ed0:	2a25      	cmp	r2, #37	; 0x25
 8009ed2:	d1f9      	bne.n	8009ec8 <_svfiprintf_r+0x50>
 8009ed4:	ebba 0b04 	subs.w	fp, sl, r4
 8009ed8:	d00b      	beq.n	8009ef2 <_svfiprintf_r+0x7a>
 8009eda:	465b      	mov	r3, fp
 8009edc:	4622      	mov	r2, r4
 8009ede:	4629      	mov	r1, r5
 8009ee0:	4638      	mov	r0, r7
 8009ee2:	f7ff ff6f 	bl	8009dc4 <__ssputs_r>
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	f000 80a9 	beq.w	800a03e <_svfiprintf_r+0x1c6>
 8009eec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009eee:	445a      	add	r2, fp
 8009ef0:	9209      	str	r2, [sp, #36]	; 0x24
 8009ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	f000 80a1 	beq.w	800a03e <_svfiprintf_r+0x1c6>
 8009efc:	2300      	movs	r3, #0
 8009efe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f06:	f10a 0a01 	add.w	sl, sl, #1
 8009f0a:	9304      	str	r3, [sp, #16]
 8009f0c:	9307      	str	r3, [sp, #28]
 8009f0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f12:	931a      	str	r3, [sp, #104]	; 0x68
 8009f14:	4654      	mov	r4, sl
 8009f16:	2205      	movs	r2, #5
 8009f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f1c:	4850      	ldr	r0, [pc, #320]	; (800a060 <_svfiprintf_r+0x1e8>)
 8009f1e:	f7f6 f95f 	bl	80001e0 <memchr>
 8009f22:	9a04      	ldr	r2, [sp, #16]
 8009f24:	b9d8      	cbnz	r0, 8009f5e <_svfiprintf_r+0xe6>
 8009f26:	06d0      	lsls	r0, r2, #27
 8009f28:	bf44      	itt	mi
 8009f2a:	2320      	movmi	r3, #32
 8009f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f30:	0711      	lsls	r1, r2, #28
 8009f32:	bf44      	itt	mi
 8009f34:	232b      	movmi	r3, #43	; 0x2b
 8009f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8009f40:	d015      	beq.n	8009f6e <_svfiprintf_r+0xf6>
 8009f42:	9a07      	ldr	r2, [sp, #28]
 8009f44:	4654      	mov	r4, sl
 8009f46:	2000      	movs	r0, #0
 8009f48:	f04f 0c0a 	mov.w	ip, #10
 8009f4c:	4621      	mov	r1, r4
 8009f4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f52:	3b30      	subs	r3, #48	; 0x30
 8009f54:	2b09      	cmp	r3, #9
 8009f56:	d94d      	bls.n	8009ff4 <_svfiprintf_r+0x17c>
 8009f58:	b1b0      	cbz	r0, 8009f88 <_svfiprintf_r+0x110>
 8009f5a:	9207      	str	r2, [sp, #28]
 8009f5c:	e014      	b.n	8009f88 <_svfiprintf_r+0x110>
 8009f5e:	eba0 0308 	sub.w	r3, r0, r8
 8009f62:	fa09 f303 	lsl.w	r3, r9, r3
 8009f66:	4313      	orrs	r3, r2
 8009f68:	9304      	str	r3, [sp, #16]
 8009f6a:	46a2      	mov	sl, r4
 8009f6c:	e7d2      	b.n	8009f14 <_svfiprintf_r+0x9c>
 8009f6e:	9b03      	ldr	r3, [sp, #12]
 8009f70:	1d19      	adds	r1, r3, #4
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	9103      	str	r1, [sp, #12]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	bfbb      	ittet	lt
 8009f7a:	425b      	neglt	r3, r3
 8009f7c:	f042 0202 	orrlt.w	r2, r2, #2
 8009f80:	9307      	strge	r3, [sp, #28]
 8009f82:	9307      	strlt	r3, [sp, #28]
 8009f84:	bfb8      	it	lt
 8009f86:	9204      	strlt	r2, [sp, #16]
 8009f88:	7823      	ldrb	r3, [r4, #0]
 8009f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8009f8c:	d10c      	bne.n	8009fa8 <_svfiprintf_r+0x130>
 8009f8e:	7863      	ldrb	r3, [r4, #1]
 8009f90:	2b2a      	cmp	r3, #42	; 0x2a
 8009f92:	d134      	bne.n	8009ffe <_svfiprintf_r+0x186>
 8009f94:	9b03      	ldr	r3, [sp, #12]
 8009f96:	1d1a      	adds	r2, r3, #4
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	9203      	str	r2, [sp, #12]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	bfb8      	it	lt
 8009fa0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009fa4:	3402      	adds	r4, #2
 8009fa6:	9305      	str	r3, [sp, #20]
 8009fa8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a070 <_svfiprintf_r+0x1f8>
 8009fac:	7821      	ldrb	r1, [r4, #0]
 8009fae:	2203      	movs	r2, #3
 8009fb0:	4650      	mov	r0, sl
 8009fb2:	f7f6 f915 	bl	80001e0 <memchr>
 8009fb6:	b138      	cbz	r0, 8009fc8 <_svfiprintf_r+0x150>
 8009fb8:	9b04      	ldr	r3, [sp, #16]
 8009fba:	eba0 000a 	sub.w	r0, r0, sl
 8009fbe:	2240      	movs	r2, #64	; 0x40
 8009fc0:	4082      	lsls	r2, r0
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	3401      	adds	r4, #1
 8009fc6:	9304      	str	r3, [sp, #16]
 8009fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fcc:	4825      	ldr	r0, [pc, #148]	; (800a064 <_svfiprintf_r+0x1ec>)
 8009fce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fd2:	2206      	movs	r2, #6
 8009fd4:	f7f6 f904 	bl	80001e0 <memchr>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	d038      	beq.n	800a04e <_svfiprintf_r+0x1d6>
 8009fdc:	4b22      	ldr	r3, [pc, #136]	; (800a068 <_svfiprintf_r+0x1f0>)
 8009fde:	bb1b      	cbnz	r3, 800a028 <_svfiprintf_r+0x1b0>
 8009fe0:	9b03      	ldr	r3, [sp, #12]
 8009fe2:	3307      	adds	r3, #7
 8009fe4:	f023 0307 	bic.w	r3, r3, #7
 8009fe8:	3308      	adds	r3, #8
 8009fea:	9303      	str	r3, [sp, #12]
 8009fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fee:	4433      	add	r3, r6
 8009ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ff2:	e768      	b.n	8009ec6 <_svfiprintf_r+0x4e>
 8009ff4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ff8:	460c      	mov	r4, r1
 8009ffa:	2001      	movs	r0, #1
 8009ffc:	e7a6      	b.n	8009f4c <_svfiprintf_r+0xd4>
 8009ffe:	2300      	movs	r3, #0
 800a000:	3401      	adds	r4, #1
 800a002:	9305      	str	r3, [sp, #20]
 800a004:	4619      	mov	r1, r3
 800a006:	f04f 0c0a 	mov.w	ip, #10
 800a00a:	4620      	mov	r0, r4
 800a00c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a010:	3a30      	subs	r2, #48	; 0x30
 800a012:	2a09      	cmp	r2, #9
 800a014:	d903      	bls.n	800a01e <_svfiprintf_r+0x1a6>
 800a016:	2b00      	cmp	r3, #0
 800a018:	d0c6      	beq.n	8009fa8 <_svfiprintf_r+0x130>
 800a01a:	9105      	str	r1, [sp, #20]
 800a01c:	e7c4      	b.n	8009fa8 <_svfiprintf_r+0x130>
 800a01e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a022:	4604      	mov	r4, r0
 800a024:	2301      	movs	r3, #1
 800a026:	e7f0      	b.n	800a00a <_svfiprintf_r+0x192>
 800a028:	ab03      	add	r3, sp, #12
 800a02a:	9300      	str	r3, [sp, #0]
 800a02c:	462a      	mov	r2, r5
 800a02e:	4b0f      	ldr	r3, [pc, #60]	; (800a06c <_svfiprintf_r+0x1f4>)
 800a030:	a904      	add	r1, sp, #16
 800a032:	4638      	mov	r0, r7
 800a034:	f7fd fe64 	bl	8007d00 <_printf_float>
 800a038:	1c42      	adds	r2, r0, #1
 800a03a:	4606      	mov	r6, r0
 800a03c:	d1d6      	bne.n	8009fec <_svfiprintf_r+0x174>
 800a03e:	89ab      	ldrh	r3, [r5, #12]
 800a040:	065b      	lsls	r3, r3, #25
 800a042:	f53f af2d 	bmi.w	8009ea0 <_svfiprintf_r+0x28>
 800a046:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a048:	b01d      	add	sp, #116	; 0x74
 800a04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a04e:	ab03      	add	r3, sp, #12
 800a050:	9300      	str	r3, [sp, #0]
 800a052:	462a      	mov	r2, r5
 800a054:	4b05      	ldr	r3, [pc, #20]	; (800a06c <_svfiprintf_r+0x1f4>)
 800a056:	a904      	add	r1, sp, #16
 800a058:	4638      	mov	r0, r7
 800a05a:	f7fe f8f5 	bl	8008248 <_printf_i>
 800a05e:	e7eb      	b.n	800a038 <_svfiprintf_r+0x1c0>
 800a060:	0800ab74 	.word	0x0800ab74
 800a064:	0800ab7e 	.word	0x0800ab7e
 800a068:	08007d01 	.word	0x08007d01
 800a06c:	08009dc5 	.word	0x08009dc5
 800a070:	0800ab7a 	.word	0x0800ab7a

0800a074 <__sflush_r>:
 800a074:	898a      	ldrh	r2, [r1, #12]
 800a076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a07a:	4605      	mov	r5, r0
 800a07c:	0710      	lsls	r0, r2, #28
 800a07e:	460c      	mov	r4, r1
 800a080:	d458      	bmi.n	800a134 <__sflush_r+0xc0>
 800a082:	684b      	ldr	r3, [r1, #4]
 800a084:	2b00      	cmp	r3, #0
 800a086:	dc05      	bgt.n	800a094 <__sflush_r+0x20>
 800a088:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	dc02      	bgt.n	800a094 <__sflush_r+0x20>
 800a08e:	2000      	movs	r0, #0
 800a090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a094:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a096:	2e00      	cmp	r6, #0
 800a098:	d0f9      	beq.n	800a08e <__sflush_r+0x1a>
 800a09a:	2300      	movs	r3, #0
 800a09c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a0a0:	682f      	ldr	r7, [r5, #0]
 800a0a2:	6a21      	ldr	r1, [r4, #32]
 800a0a4:	602b      	str	r3, [r5, #0]
 800a0a6:	d032      	beq.n	800a10e <__sflush_r+0x9a>
 800a0a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a0aa:	89a3      	ldrh	r3, [r4, #12]
 800a0ac:	075a      	lsls	r2, r3, #29
 800a0ae:	d505      	bpl.n	800a0bc <__sflush_r+0x48>
 800a0b0:	6863      	ldr	r3, [r4, #4]
 800a0b2:	1ac0      	subs	r0, r0, r3
 800a0b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0b6:	b10b      	cbz	r3, 800a0bc <__sflush_r+0x48>
 800a0b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0ba:	1ac0      	subs	r0, r0, r3
 800a0bc:	2300      	movs	r3, #0
 800a0be:	4602      	mov	r2, r0
 800a0c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0c2:	6a21      	ldr	r1, [r4, #32]
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	47b0      	blx	r6
 800a0c8:	1c43      	adds	r3, r0, #1
 800a0ca:	89a3      	ldrh	r3, [r4, #12]
 800a0cc:	d106      	bne.n	800a0dc <__sflush_r+0x68>
 800a0ce:	6829      	ldr	r1, [r5, #0]
 800a0d0:	291d      	cmp	r1, #29
 800a0d2:	d82b      	bhi.n	800a12c <__sflush_r+0xb8>
 800a0d4:	4a29      	ldr	r2, [pc, #164]	; (800a17c <__sflush_r+0x108>)
 800a0d6:	410a      	asrs	r2, r1
 800a0d8:	07d6      	lsls	r6, r2, #31
 800a0da:	d427      	bmi.n	800a12c <__sflush_r+0xb8>
 800a0dc:	2200      	movs	r2, #0
 800a0de:	6062      	str	r2, [r4, #4]
 800a0e0:	04d9      	lsls	r1, r3, #19
 800a0e2:	6922      	ldr	r2, [r4, #16]
 800a0e4:	6022      	str	r2, [r4, #0]
 800a0e6:	d504      	bpl.n	800a0f2 <__sflush_r+0x7e>
 800a0e8:	1c42      	adds	r2, r0, #1
 800a0ea:	d101      	bne.n	800a0f0 <__sflush_r+0x7c>
 800a0ec:	682b      	ldr	r3, [r5, #0]
 800a0ee:	b903      	cbnz	r3, 800a0f2 <__sflush_r+0x7e>
 800a0f0:	6560      	str	r0, [r4, #84]	; 0x54
 800a0f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0f4:	602f      	str	r7, [r5, #0]
 800a0f6:	2900      	cmp	r1, #0
 800a0f8:	d0c9      	beq.n	800a08e <__sflush_r+0x1a>
 800a0fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0fe:	4299      	cmp	r1, r3
 800a100:	d002      	beq.n	800a108 <__sflush_r+0x94>
 800a102:	4628      	mov	r0, r5
 800a104:	f7ff f9e2 	bl	80094cc <_free_r>
 800a108:	2000      	movs	r0, #0
 800a10a:	6360      	str	r0, [r4, #52]	; 0x34
 800a10c:	e7c0      	b.n	800a090 <__sflush_r+0x1c>
 800a10e:	2301      	movs	r3, #1
 800a110:	4628      	mov	r0, r5
 800a112:	47b0      	blx	r6
 800a114:	1c41      	adds	r1, r0, #1
 800a116:	d1c8      	bne.n	800a0aa <__sflush_r+0x36>
 800a118:	682b      	ldr	r3, [r5, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d0c5      	beq.n	800a0aa <__sflush_r+0x36>
 800a11e:	2b1d      	cmp	r3, #29
 800a120:	d001      	beq.n	800a126 <__sflush_r+0xb2>
 800a122:	2b16      	cmp	r3, #22
 800a124:	d101      	bne.n	800a12a <__sflush_r+0xb6>
 800a126:	602f      	str	r7, [r5, #0]
 800a128:	e7b1      	b.n	800a08e <__sflush_r+0x1a>
 800a12a:	89a3      	ldrh	r3, [r4, #12]
 800a12c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a130:	81a3      	strh	r3, [r4, #12]
 800a132:	e7ad      	b.n	800a090 <__sflush_r+0x1c>
 800a134:	690f      	ldr	r7, [r1, #16]
 800a136:	2f00      	cmp	r7, #0
 800a138:	d0a9      	beq.n	800a08e <__sflush_r+0x1a>
 800a13a:	0793      	lsls	r3, r2, #30
 800a13c:	680e      	ldr	r6, [r1, #0]
 800a13e:	bf08      	it	eq
 800a140:	694b      	ldreq	r3, [r1, #20]
 800a142:	600f      	str	r7, [r1, #0]
 800a144:	bf18      	it	ne
 800a146:	2300      	movne	r3, #0
 800a148:	eba6 0807 	sub.w	r8, r6, r7
 800a14c:	608b      	str	r3, [r1, #8]
 800a14e:	f1b8 0f00 	cmp.w	r8, #0
 800a152:	dd9c      	ble.n	800a08e <__sflush_r+0x1a>
 800a154:	6a21      	ldr	r1, [r4, #32]
 800a156:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a158:	4643      	mov	r3, r8
 800a15a:	463a      	mov	r2, r7
 800a15c:	4628      	mov	r0, r5
 800a15e:	47b0      	blx	r6
 800a160:	2800      	cmp	r0, #0
 800a162:	dc06      	bgt.n	800a172 <__sflush_r+0xfe>
 800a164:	89a3      	ldrh	r3, [r4, #12]
 800a166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a16a:	81a3      	strh	r3, [r4, #12]
 800a16c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a170:	e78e      	b.n	800a090 <__sflush_r+0x1c>
 800a172:	4407      	add	r7, r0
 800a174:	eba8 0800 	sub.w	r8, r8, r0
 800a178:	e7e9      	b.n	800a14e <__sflush_r+0xda>
 800a17a:	bf00      	nop
 800a17c:	dfbffffe 	.word	0xdfbffffe

0800a180 <_fflush_r>:
 800a180:	b538      	push	{r3, r4, r5, lr}
 800a182:	690b      	ldr	r3, [r1, #16]
 800a184:	4605      	mov	r5, r0
 800a186:	460c      	mov	r4, r1
 800a188:	b913      	cbnz	r3, 800a190 <_fflush_r+0x10>
 800a18a:	2500      	movs	r5, #0
 800a18c:	4628      	mov	r0, r5
 800a18e:	bd38      	pop	{r3, r4, r5, pc}
 800a190:	b118      	cbz	r0, 800a19a <_fflush_r+0x1a>
 800a192:	6a03      	ldr	r3, [r0, #32]
 800a194:	b90b      	cbnz	r3, 800a19a <_fflush_r+0x1a>
 800a196:	f7fe fa05 	bl	80085a4 <__sinit>
 800a19a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d0f3      	beq.n	800a18a <_fflush_r+0xa>
 800a1a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1a4:	07d0      	lsls	r0, r2, #31
 800a1a6:	d404      	bmi.n	800a1b2 <_fflush_r+0x32>
 800a1a8:	0599      	lsls	r1, r3, #22
 800a1aa:	d402      	bmi.n	800a1b2 <_fflush_r+0x32>
 800a1ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1ae:	f7fe fb10 	bl	80087d2 <__retarget_lock_acquire_recursive>
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	f7ff ff5d 	bl	800a074 <__sflush_r>
 800a1ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1bc:	07da      	lsls	r2, r3, #31
 800a1be:	4605      	mov	r5, r0
 800a1c0:	d4e4      	bmi.n	800a18c <_fflush_r+0xc>
 800a1c2:	89a3      	ldrh	r3, [r4, #12]
 800a1c4:	059b      	lsls	r3, r3, #22
 800a1c6:	d4e1      	bmi.n	800a18c <_fflush_r+0xc>
 800a1c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1ca:	f7fe fb03 	bl	80087d4 <__retarget_lock_release_recursive>
 800a1ce:	e7dd      	b.n	800a18c <_fflush_r+0xc>

0800a1d0 <memmove>:
 800a1d0:	4288      	cmp	r0, r1
 800a1d2:	b510      	push	{r4, lr}
 800a1d4:	eb01 0402 	add.w	r4, r1, r2
 800a1d8:	d902      	bls.n	800a1e0 <memmove+0x10>
 800a1da:	4284      	cmp	r4, r0
 800a1dc:	4623      	mov	r3, r4
 800a1de:	d807      	bhi.n	800a1f0 <memmove+0x20>
 800a1e0:	1e43      	subs	r3, r0, #1
 800a1e2:	42a1      	cmp	r1, r4
 800a1e4:	d008      	beq.n	800a1f8 <memmove+0x28>
 800a1e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1ee:	e7f8      	b.n	800a1e2 <memmove+0x12>
 800a1f0:	4402      	add	r2, r0
 800a1f2:	4601      	mov	r1, r0
 800a1f4:	428a      	cmp	r2, r1
 800a1f6:	d100      	bne.n	800a1fa <memmove+0x2a>
 800a1f8:	bd10      	pop	{r4, pc}
 800a1fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a202:	e7f7      	b.n	800a1f4 <memmove+0x24>

0800a204 <_sbrk_r>:
 800a204:	b538      	push	{r3, r4, r5, lr}
 800a206:	4d06      	ldr	r5, [pc, #24]	; (800a220 <_sbrk_r+0x1c>)
 800a208:	2300      	movs	r3, #0
 800a20a:	4604      	mov	r4, r0
 800a20c:	4608      	mov	r0, r1
 800a20e:	602b      	str	r3, [r5, #0]
 800a210:	f7f7 fbbe 	bl	8001990 <_sbrk>
 800a214:	1c43      	adds	r3, r0, #1
 800a216:	d102      	bne.n	800a21e <_sbrk_r+0x1a>
 800a218:	682b      	ldr	r3, [r5, #0]
 800a21a:	b103      	cbz	r3, 800a21e <_sbrk_r+0x1a>
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	bd38      	pop	{r3, r4, r5, pc}
 800a220:	200004e4 	.word	0x200004e4

0800a224 <memcpy>:
 800a224:	440a      	add	r2, r1
 800a226:	4291      	cmp	r1, r2
 800a228:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a22c:	d100      	bne.n	800a230 <memcpy+0xc>
 800a22e:	4770      	bx	lr
 800a230:	b510      	push	{r4, lr}
 800a232:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a23a:	4291      	cmp	r1, r2
 800a23c:	d1f9      	bne.n	800a232 <memcpy+0xe>
 800a23e:	bd10      	pop	{r4, pc}

0800a240 <__assert_func>:
 800a240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a242:	4614      	mov	r4, r2
 800a244:	461a      	mov	r2, r3
 800a246:	4b09      	ldr	r3, [pc, #36]	; (800a26c <__assert_func+0x2c>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4605      	mov	r5, r0
 800a24c:	68d8      	ldr	r0, [r3, #12]
 800a24e:	b14c      	cbz	r4, 800a264 <__assert_func+0x24>
 800a250:	4b07      	ldr	r3, [pc, #28]	; (800a270 <__assert_func+0x30>)
 800a252:	9100      	str	r1, [sp, #0]
 800a254:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a258:	4906      	ldr	r1, [pc, #24]	; (800a274 <__assert_func+0x34>)
 800a25a:	462b      	mov	r3, r5
 800a25c:	f000 f872 	bl	800a344 <fiprintf>
 800a260:	f000 f882 	bl	800a368 <abort>
 800a264:	4b04      	ldr	r3, [pc, #16]	; (800a278 <__assert_func+0x38>)
 800a266:	461c      	mov	r4, r3
 800a268:	e7f3      	b.n	800a252 <__assert_func+0x12>
 800a26a:	bf00      	nop
 800a26c:	2000006c 	.word	0x2000006c
 800a270:	0800ab8f 	.word	0x0800ab8f
 800a274:	0800ab9c 	.word	0x0800ab9c
 800a278:	0800abca 	.word	0x0800abca

0800a27c <_calloc_r>:
 800a27c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a27e:	fba1 2402 	umull	r2, r4, r1, r2
 800a282:	b94c      	cbnz	r4, 800a298 <_calloc_r+0x1c>
 800a284:	4611      	mov	r1, r2
 800a286:	9201      	str	r2, [sp, #4]
 800a288:	f7ff f994 	bl	80095b4 <_malloc_r>
 800a28c:	9a01      	ldr	r2, [sp, #4]
 800a28e:	4605      	mov	r5, r0
 800a290:	b930      	cbnz	r0, 800a2a0 <_calloc_r+0x24>
 800a292:	4628      	mov	r0, r5
 800a294:	b003      	add	sp, #12
 800a296:	bd30      	pop	{r4, r5, pc}
 800a298:	220c      	movs	r2, #12
 800a29a:	6002      	str	r2, [r0, #0]
 800a29c:	2500      	movs	r5, #0
 800a29e:	e7f8      	b.n	800a292 <_calloc_r+0x16>
 800a2a0:	4621      	mov	r1, r4
 800a2a2:	f7fe fa18 	bl	80086d6 <memset>
 800a2a6:	e7f4      	b.n	800a292 <_calloc_r+0x16>

0800a2a8 <__ascii_mbtowc>:
 800a2a8:	b082      	sub	sp, #8
 800a2aa:	b901      	cbnz	r1, 800a2ae <__ascii_mbtowc+0x6>
 800a2ac:	a901      	add	r1, sp, #4
 800a2ae:	b142      	cbz	r2, 800a2c2 <__ascii_mbtowc+0x1a>
 800a2b0:	b14b      	cbz	r3, 800a2c6 <__ascii_mbtowc+0x1e>
 800a2b2:	7813      	ldrb	r3, [r2, #0]
 800a2b4:	600b      	str	r3, [r1, #0]
 800a2b6:	7812      	ldrb	r2, [r2, #0]
 800a2b8:	1e10      	subs	r0, r2, #0
 800a2ba:	bf18      	it	ne
 800a2bc:	2001      	movne	r0, #1
 800a2be:	b002      	add	sp, #8
 800a2c0:	4770      	bx	lr
 800a2c2:	4610      	mov	r0, r2
 800a2c4:	e7fb      	b.n	800a2be <__ascii_mbtowc+0x16>
 800a2c6:	f06f 0001 	mvn.w	r0, #1
 800a2ca:	e7f8      	b.n	800a2be <__ascii_mbtowc+0x16>

0800a2cc <_realloc_r>:
 800a2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d0:	4680      	mov	r8, r0
 800a2d2:	4614      	mov	r4, r2
 800a2d4:	460e      	mov	r6, r1
 800a2d6:	b921      	cbnz	r1, 800a2e2 <_realloc_r+0x16>
 800a2d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2dc:	4611      	mov	r1, r2
 800a2de:	f7ff b969 	b.w	80095b4 <_malloc_r>
 800a2e2:	b92a      	cbnz	r2, 800a2f0 <_realloc_r+0x24>
 800a2e4:	f7ff f8f2 	bl	80094cc <_free_r>
 800a2e8:	4625      	mov	r5, r4
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2f0:	f000 f841 	bl	800a376 <_malloc_usable_size_r>
 800a2f4:	4284      	cmp	r4, r0
 800a2f6:	4607      	mov	r7, r0
 800a2f8:	d802      	bhi.n	800a300 <_realloc_r+0x34>
 800a2fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2fe:	d812      	bhi.n	800a326 <_realloc_r+0x5a>
 800a300:	4621      	mov	r1, r4
 800a302:	4640      	mov	r0, r8
 800a304:	f7ff f956 	bl	80095b4 <_malloc_r>
 800a308:	4605      	mov	r5, r0
 800a30a:	2800      	cmp	r0, #0
 800a30c:	d0ed      	beq.n	800a2ea <_realloc_r+0x1e>
 800a30e:	42bc      	cmp	r4, r7
 800a310:	4622      	mov	r2, r4
 800a312:	4631      	mov	r1, r6
 800a314:	bf28      	it	cs
 800a316:	463a      	movcs	r2, r7
 800a318:	f7ff ff84 	bl	800a224 <memcpy>
 800a31c:	4631      	mov	r1, r6
 800a31e:	4640      	mov	r0, r8
 800a320:	f7ff f8d4 	bl	80094cc <_free_r>
 800a324:	e7e1      	b.n	800a2ea <_realloc_r+0x1e>
 800a326:	4635      	mov	r5, r6
 800a328:	e7df      	b.n	800a2ea <_realloc_r+0x1e>

0800a32a <__ascii_wctomb>:
 800a32a:	b149      	cbz	r1, 800a340 <__ascii_wctomb+0x16>
 800a32c:	2aff      	cmp	r2, #255	; 0xff
 800a32e:	bf85      	ittet	hi
 800a330:	238a      	movhi	r3, #138	; 0x8a
 800a332:	6003      	strhi	r3, [r0, #0]
 800a334:	700a      	strbls	r2, [r1, #0]
 800a336:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a33a:	bf98      	it	ls
 800a33c:	2001      	movls	r0, #1
 800a33e:	4770      	bx	lr
 800a340:	4608      	mov	r0, r1
 800a342:	4770      	bx	lr

0800a344 <fiprintf>:
 800a344:	b40e      	push	{r1, r2, r3}
 800a346:	b503      	push	{r0, r1, lr}
 800a348:	4601      	mov	r1, r0
 800a34a:	ab03      	add	r3, sp, #12
 800a34c:	4805      	ldr	r0, [pc, #20]	; (800a364 <fiprintf+0x20>)
 800a34e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a352:	6800      	ldr	r0, [r0, #0]
 800a354:	9301      	str	r3, [sp, #4]
 800a356:	f000 f83f 	bl	800a3d8 <_vfiprintf_r>
 800a35a:	b002      	add	sp, #8
 800a35c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a360:	b003      	add	sp, #12
 800a362:	4770      	bx	lr
 800a364:	2000006c 	.word	0x2000006c

0800a368 <abort>:
 800a368:	b508      	push	{r3, lr}
 800a36a:	2006      	movs	r0, #6
 800a36c:	f000 fa0c 	bl	800a788 <raise>
 800a370:	2001      	movs	r0, #1
 800a372:	f7f7 fa95 	bl	80018a0 <_exit>

0800a376 <_malloc_usable_size_r>:
 800a376:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a37a:	1f18      	subs	r0, r3, #4
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	bfbc      	itt	lt
 800a380:	580b      	ldrlt	r3, [r1, r0]
 800a382:	18c0      	addlt	r0, r0, r3
 800a384:	4770      	bx	lr

0800a386 <__sfputc_r>:
 800a386:	6893      	ldr	r3, [r2, #8]
 800a388:	3b01      	subs	r3, #1
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	b410      	push	{r4}
 800a38e:	6093      	str	r3, [r2, #8]
 800a390:	da08      	bge.n	800a3a4 <__sfputc_r+0x1e>
 800a392:	6994      	ldr	r4, [r2, #24]
 800a394:	42a3      	cmp	r3, r4
 800a396:	db01      	blt.n	800a39c <__sfputc_r+0x16>
 800a398:	290a      	cmp	r1, #10
 800a39a:	d103      	bne.n	800a3a4 <__sfputc_r+0x1e>
 800a39c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3a0:	f000 b934 	b.w	800a60c <__swbuf_r>
 800a3a4:	6813      	ldr	r3, [r2, #0]
 800a3a6:	1c58      	adds	r0, r3, #1
 800a3a8:	6010      	str	r0, [r2, #0]
 800a3aa:	7019      	strb	r1, [r3, #0]
 800a3ac:	4608      	mov	r0, r1
 800a3ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <__sfputs_r>:
 800a3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b6:	4606      	mov	r6, r0
 800a3b8:	460f      	mov	r7, r1
 800a3ba:	4614      	mov	r4, r2
 800a3bc:	18d5      	adds	r5, r2, r3
 800a3be:	42ac      	cmp	r4, r5
 800a3c0:	d101      	bne.n	800a3c6 <__sfputs_r+0x12>
 800a3c2:	2000      	movs	r0, #0
 800a3c4:	e007      	b.n	800a3d6 <__sfputs_r+0x22>
 800a3c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ca:	463a      	mov	r2, r7
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	f7ff ffda 	bl	800a386 <__sfputc_r>
 800a3d2:	1c43      	adds	r3, r0, #1
 800a3d4:	d1f3      	bne.n	800a3be <__sfputs_r+0xa>
 800a3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a3d8 <_vfiprintf_r>:
 800a3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3dc:	460d      	mov	r5, r1
 800a3de:	b09d      	sub	sp, #116	; 0x74
 800a3e0:	4614      	mov	r4, r2
 800a3e2:	4698      	mov	r8, r3
 800a3e4:	4606      	mov	r6, r0
 800a3e6:	b118      	cbz	r0, 800a3f0 <_vfiprintf_r+0x18>
 800a3e8:	6a03      	ldr	r3, [r0, #32]
 800a3ea:	b90b      	cbnz	r3, 800a3f0 <_vfiprintf_r+0x18>
 800a3ec:	f7fe f8da 	bl	80085a4 <__sinit>
 800a3f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3f2:	07d9      	lsls	r1, r3, #31
 800a3f4:	d405      	bmi.n	800a402 <_vfiprintf_r+0x2a>
 800a3f6:	89ab      	ldrh	r3, [r5, #12]
 800a3f8:	059a      	lsls	r2, r3, #22
 800a3fa:	d402      	bmi.n	800a402 <_vfiprintf_r+0x2a>
 800a3fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3fe:	f7fe f9e8 	bl	80087d2 <__retarget_lock_acquire_recursive>
 800a402:	89ab      	ldrh	r3, [r5, #12]
 800a404:	071b      	lsls	r3, r3, #28
 800a406:	d501      	bpl.n	800a40c <_vfiprintf_r+0x34>
 800a408:	692b      	ldr	r3, [r5, #16]
 800a40a:	b99b      	cbnz	r3, 800a434 <_vfiprintf_r+0x5c>
 800a40c:	4629      	mov	r1, r5
 800a40e:	4630      	mov	r0, r6
 800a410:	f000 f93a 	bl	800a688 <__swsetup_r>
 800a414:	b170      	cbz	r0, 800a434 <_vfiprintf_r+0x5c>
 800a416:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a418:	07dc      	lsls	r4, r3, #31
 800a41a:	d504      	bpl.n	800a426 <_vfiprintf_r+0x4e>
 800a41c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a420:	b01d      	add	sp, #116	; 0x74
 800a422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a426:	89ab      	ldrh	r3, [r5, #12]
 800a428:	0598      	lsls	r0, r3, #22
 800a42a:	d4f7      	bmi.n	800a41c <_vfiprintf_r+0x44>
 800a42c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a42e:	f7fe f9d1 	bl	80087d4 <__retarget_lock_release_recursive>
 800a432:	e7f3      	b.n	800a41c <_vfiprintf_r+0x44>
 800a434:	2300      	movs	r3, #0
 800a436:	9309      	str	r3, [sp, #36]	; 0x24
 800a438:	2320      	movs	r3, #32
 800a43a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a43e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a442:	2330      	movs	r3, #48	; 0x30
 800a444:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a5f8 <_vfiprintf_r+0x220>
 800a448:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a44c:	f04f 0901 	mov.w	r9, #1
 800a450:	4623      	mov	r3, r4
 800a452:	469a      	mov	sl, r3
 800a454:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a458:	b10a      	cbz	r2, 800a45e <_vfiprintf_r+0x86>
 800a45a:	2a25      	cmp	r2, #37	; 0x25
 800a45c:	d1f9      	bne.n	800a452 <_vfiprintf_r+0x7a>
 800a45e:	ebba 0b04 	subs.w	fp, sl, r4
 800a462:	d00b      	beq.n	800a47c <_vfiprintf_r+0xa4>
 800a464:	465b      	mov	r3, fp
 800a466:	4622      	mov	r2, r4
 800a468:	4629      	mov	r1, r5
 800a46a:	4630      	mov	r0, r6
 800a46c:	f7ff ffa2 	bl	800a3b4 <__sfputs_r>
 800a470:	3001      	adds	r0, #1
 800a472:	f000 80a9 	beq.w	800a5c8 <_vfiprintf_r+0x1f0>
 800a476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a478:	445a      	add	r2, fp
 800a47a:	9209      	str	r2, [sp, #36]	; 0x24
 800a47c:	f89a 3000 	ldrb.w	r3, [sl]
 800a480:	2b00      	cmp	r3, #0
 800a482:	f000 80a1 	beq.w	800a5c8 <_vfiprintf_r+0x1f0>
 800a486:	2300      	movs	r3, #0
 800a488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a48c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a490:	f10a 0a01 	add.w	sl, sl, #1
 800a494:	9304      	str	r3, [sp, #16]
 800a496:	9307      	str	r3, [sp, #28]
 800a498:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a49c:	931a      	str	r3, [sp, #104]	; 0x68
 800a49e:	4654      	mov	r4, sl
 800a4a0:	2205      	movs	r2, #5
 800a4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4a6:	4854      	ldr	r0, [pc, #336]	; (800a5f8 <_vfiprintf_r+0x220>)
 800a4a8:	f7f5 fe9a 	bl	80001e0 <memchr>
 800a4ac:	9a04      	ldr	r2, [sp, #16]
 800a4ae:	b9d8      	cbnz	r0, 800a4e8 <_vfiprintf_r+0x110>
 800a4b0:	06d1      	lsls	r1, r2, #27
 800a4b2:	bf44      	itt	mi
 800a4b4:	2320      	movmi	r3, #32
 800a4b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4ba:	0713      	lsls	r3, r2, #28
 800a4bc:	bf44      	itt	mi
 800a4be:	232b      	movmi	r3, #43	; 0x2b
 800a4c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a4c8:	2b2a      	cmp	r3, #42	; 0x2a
 800a4ca:	d015      	beq.n	800a4f8 <_vfiprintf_r+0x120>
 800a4cc:	9a07      	ldr	r2, [sp, #28]
 800a4ce:	4654      	mov	r4, sl
 800a4d0:	2000      	movs	r0, #0
 800a4d2:	f04f 0c0a 	mov.w	ip, #10
 800a4d6:	4621      	mov	r1, r4
 800a4d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4dc:	3b30      	subs	r3, #48	; 0x30
 800a4de:	2b09      	cmp	r3, #9
 800a4e0:	d94d      	bls.n	800a57e <_vfiprintf_r+0x1a6>
 800a4e2:	b1b0      	cbz	r0, 800a512 <_vfiprintf_r+0x13a>
 800a4e4:	9207      	str	r2, [sp, #28]
 800a4e6:	e014      	b.n	800a512 <_vfiprintf_r+0x13a>
 800a4e8:	eba0 0308 	sub.w	r3, r0, r8
 800a4ec:	fa09 f303 	lsl.w	r3, r9, r3
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	9304      	str	r3, [sp, #16]
 800a4f4:	46a2      	mov	sl, r4
 800a4f6:	e7d2      	b.n	800a49e <_vfiprintf_r+0xc6>
 800a4f8:	9b03      	ldr	r3, [sp, #12]
 800a4fa:	1d19      	adds	r1, r3, #4
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	9103      	str	r1, [sp, #12]
 800a500:	2b00      	cmp	r3, #0
 800a502:	bfbb      	ittet	lt
 800a504:	425b      	neglt	r3, r3
 800a506:	f042 0202 	orrlt.w	r2, r2, #2
 800a50a:	9307      	strge	r3, [sp, #28]
 800a50c:	9307      	strlt	r3, [sp, #28]
 800a50e:	bfb8      	it	lt
 800a510:	9204      	strlt	r2, [sp, #16]
 800a512:	7823      	ldrb	r3, [r4, #0]
 800a514:	2b2e      	cmp	r3, #46	; 0x2e
 800a516:	d10c      	bne.n	800a532 <_vfiprintf_r+0x15a>
 800a518:	7863      	ldrb	r3, [r4, #1]
 800a51a:	2b2a      	cmp	r3, #42	; 0x2a
 800a51c:	d134      	bne.n	800a588 <_vfiprintf_r+0x1b0>
 800a51e:	9b03      	ldr	r3, [sp, #12]
 800a520:	1d1a      	adds	r2, r3, #4
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	9203      	str	r2, [sp, #12]
 800a526:	2b00      	cmp	r3, #0
 800a528:	bfb8      	it	lt
 800a52a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a52e:	3402      	adds	r4, #2
 800a530:	9305      	str	r3, [sp, #20]
 800a532:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a608 <_vfiprintf_r+0x230>
 800a536:	7821      	ldrb	r1, [r4, #0]
 800a538:	2203      	movs	r2, #3
 800a53a:	4650      	mov	r0, sl
 800a53c:	f7f5 fe50 	bl	80001e0 <memchr>
 800a540:	b138      	cbz	r0, 800a552 <_vfiprintf_r+0x17a>
 800a542:	9b04      	ldr	r3, [sp, #16]
 800a544:	eba0 000a 	sub.w	r0, r0, sl
 800a548:	2240      	movs	r2, #64	; 0x40
 800a54a:	4082      	lsls	r2, r0
 800a54c:	4313      	orrs	r3, r2
 800a54e:	3401      	adds	r4, #1
 800a550:	9304      	str	r3, [sp, #16]
 800a552:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a556:	4829      	ldr	r0, [pc, #164]	; (800a5fc <_vfiprintf_r+0x224>)
 800a558:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a55c:	2206      	movs	r2, #6
 800a55e:	f7f5 fe3f 	bl	80001e0 <memchr>
 800a562:	2800      	cmp	r0, #0
 800a564:	d03f      	beq.n	800a5e6 <_vfiprintf_r+0x20e>
 800a566:	4b26      	ldr	r3, [pc, #152]	; (800a600 <_vfiprintf_r+0x228>)
 800a568:	bb1b      	cbnz	r3, 800a5b2 <_vfiprintf_r+0x1da>
 800a56a:	9b03      	ldr	r3, [sp, #12]
 800a56c:	3307      	adds	r3, #7
 800a56e:	f023 0307 	bic.w	r3, r3, #7
 800a572:	3308      	adds	r3, #8
 800a574:	9303      	str	r3, [sp, #12]
 800a576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a578:	443b      	add	r3, r7
 800a57a:	9309      	str	r3, [sp, #36]	; 0x24
 800a57c:	e768      	b.n	800a450 <_vfiprintf_r+0x78>
 800a57e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a582:	460c      	mov	r4, r1
 800a584:	2001      	movs	r0, #1
 800a586:	e7a6      	b.n	800a4d6 <_vfiprintf_r+0xfe>
 800a588:	2300      	movs	r3, #0
 800a58a:	3401      	adds	r4, #1
 800a58c:	9305      	str	r3, [sp, #20]
 800a58e:	4619      	mov	r1, r3
 800a590:	f04f 0c0a 	mov.w	ip, #10
 800a594:	4620      	mov	r0, r4
 800a596:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a59a:	3a30      	subs	r2, #48	; 0x30
 800a59c:	2a09      	cmp	r2, #9
 800a59e:	d903      	bls.n	800a5a8 <_vfiprintf_r+0x1d0>
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d0c6      	beq.n	800a532 <_vfiprintf_r+0x15a>
 800a5a4:	9105      	str	r1, [sp, #20]
 800a5a6:	e7c4      	b.n	800a532 <_vfiprintf_r+0x15a>
 800a5a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e7f0      	b.n	800a594 <_vfiprintf_r+0x1bc>
 800a5b2:	ab03      	add	r3, sp, #12
 800a5b4:	9300      	str	r3, [sp, #0]
 800a5b6:	462a      	mov	r2, r5
 800a5b8:	4b12      	ldr	r3, [pc, #72]	; (800a604 <_vfiprintf_r+0x22c>)
 800a5ba:	a904      	add	r1, sp, #16
 800a5bc:	4630      	mov	r0, r6
 800a5be:	f7fd fb9f 	bl	8007d00 <_printf_float>
 800a5c2:	4607      	mov	r7, r0
 800a5c4:	1c78      	adds	r0, r7, #1
 800a5c6:	d1d6      	bne.n	800a576 <_vfiprintf_r+0x19e>
 800a5c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5ca:	07d9      	lsls	r1, r3, #31
 800a5cc:	d405      	bmi.n	800a5da <_vfiprintf_r+0x202>
 800a5ce:	89ab      	ldrh	r3, [r5, #12]
 800a5d0:	059a      	lsls	r2, r3, #22
 800a5d2:	d402      	bmi.n	800a5da <_vfiprintf_r+0x202>
 800a5d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5d6:	f7fe f8fd 	bl	80087d4 <__retarget_lock_release_recursive>
 800a5da:	89ab      	ldrh	r3, [r5, #12]
 800a5dc:	065b      	lsls	r3, r3, #25
 800a5de:	f53f af1d 	bmi.w	800a41c <_vfiprintf_r+0x44>
 800a5e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5e4:	e71c      	b.n	800a420 <_vfiprintf_r+0x48>
 800a5e6:	ab03      	add	r3, sp, #12
 800a5e8:	9300      	str	r3, [sp, #0]
 800a5ea:	462a      	mov	r2, r5
 800a5ec:	4b05      	ldr	r3, [pc, #20]	; (800a604 <_vfiprintf_r+0x22c>)
 800a5ee:	a904      	add	r1, sp, #16
 800a5f0:	4630      	mov	r0, r6
 800a5f2:	f7fd fe29 	bl	8008248 <_printf_i>
 800a5f6:	e7e4      	b.n	800a5c2 <_vfiprintf_r+0x1ea>
 800a5f8:	0800ab74 	.word	0x0800ab74
 800a5fc:	0800ab7e 	.word	0x0800ab7e
 800a600:	08007d01 	.word	0x08007d01
 800a604:	0800a3b5 	.word	0x0800a3b5
 800a608:	0800ab7a 	.word	0x0800ab7a

0800a60c <__swbuf_r>:
 800a60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a60e:	460e      	mov	r6, r1
 800a610:	4614      	mov	r4, r2
 800a612:	4605      	mov	r5, r0
 800a614:	b118      	cbz	r0, 800a61e <__swbuf_r+0x12>
 800a616:	6a03      	ldr	r3, [r0, #32]
 800a618:	b90b      	cbnz	r3, 800a61e <__swbuf_r+0x12>
 800a61a:	f7fd ffc3 	bl	80085a4 <__sinit>
 800a61e:	69a3      	ldr	r3, [r4, #24]
 800a620:	60a3      	str	r3, [r4, #8]
 800a622:	89a3      	ldrh	r3, [r4, #12]
 800a624:	071a      	lsls	r2, r3, #28
 800a626:	d525      	bpl.n	800a674 <__swbuf_r+0x68>
 800a628:	6923      	ldr	r3, [r4, #16]
 800a62a:	b31b      	cbz	r3, 800a674 <__swbuf_r+0x68>
 800a62c:	6823      	ldr	r3, [r4, #0]
 800a62e:	6922      	ldr	r2, [r4, #16]
 800a630:	1a98      	subs	r0, r3, r2
 800a632:	6963      	ldr	r3, [r4, #20]
 800a634:	b2f6      	uxtb	r6, r6
 800a636:	4283      	cmp	r3, r0
 800a638:	4637      	mov	r7, r6
 800a63a:	dc04      	bgt.n	800a646 <__swbuf_r+0x3a>
 800a63c:	4621      	mov	r1, r4
 800a63e:	4628      	mov	r0, r5
 800a640:	f7ff fd9e 	bl	800a180 <_fflush_r>
 800a644:	b9e0      	cbnz	r0, 800a680 <__swbuf_r+0x74>
 800a646:	68a3      	ldr	r3, [r4, #8]
 800a648:	3b01      	subs	r3, #1
 800a64a:	60a3      	str	r3, [r4, #8]
 800a64c:	6823      	ldr	r3, [r4, #0]
 800a64e:	1c5a      	adds	r2, r3, #1
 800a650:	6022      	str	r2, [r4, #0]
 800a652:	701e      	strb	r6, [r3, #0]
 800a654:	6962      	ldr	r2, [r4, #20]
 800a656:	1c43      	adds	r3, r0, #1
 800a658:	429a      	cmp	r2, r3
 800a65a:	d004      	beq.n	800a666 <__swbuf_r+0x5a>
 800a65c:	89a3      	ldrh	r3, [r4, #12]
 800a65e:	07db      	lsls	r3, r3, #31
 800a660:	d506      	bpl.n	800a670 <__swbuf_r+0x64>
 800a662:	2e0a      	cmp	r6, #10
 800a664:	d104      	bne.n	800a670 <__swbuf_r+0x64>
 800a666:	4621      	mov	r1, r4
 800a668:	4628      	mov	r0, r5
 800a66a:	f7ff fd89 	bl	800a180 <_fflush_r>
 800a66e:	b938      	cbnz	r0, 800a680 <__swbuf_r+0x74>
 800a670:	4638      	mov	r0, r7
 800a672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a674:	4621      	mov	r1, r4
 800a676:	4628      	mov	r0, r5
 800a678:	f000 f806 	bl	800a688 <__swsetup_r>
 800a67c:	2800      	cmp	r0, #0
 800a67e:	d0d5      	beq.n	800a62c <__swbuf_r+0x20>
 800a680:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a684:	e7f4      	b.n	800a670 <__swbuf_r+0x64>
	...

0800a688 <__swsetup_r>:
 800a688:	b538      	push	{r3, r4, r5, lr}
 800a68a:	4b2a      	ldr	r3, [pc, #168]	; (800a734 <__swsetup_r+0xac>)
 800a68c:	4605      	mov	r5, r0
 800a68e:	6818      	ldr	r0, [r3, #0]
 800a690:	460c      	mov	r4, r1
 800a692:	b118      	cbz	r0, 800a69c <__swsetup_r+0x14>
 800a694:	6a03      	ldr	r3, [r0, #32]
 800a696:	b90b      	cbnz	r3, 800a69c <__swsetup_r+0x14>
 800a698:	f7fd ff84 	bl	80085a4 <__sinit>
 800a69c:	89a3      	ldrh	r3, [r4, #12]
 800a69e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6a2:	0718      	lsls	r0, r3, #28
 800a6a4:	d422      	bmi.n	800a6ec <__swsetup_r+0x64>
 800a6a6:	06d9      	lsls	r1, r3, #27
 800a6a8:	d407      	bmi.n	800a6ba <__swsetup_r+0x32>
 800a6aa:	2309      	movs	r3, #9
 800a6ac:	602b      	str	r3, [r5, #0]
 800a6ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6b2:	81a3      	strh	r3, [r4, #12]
 800a6b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6b8:	e034      	b.n	800a724 <__swsetup_r+0x9c>
 800a6ba:	0758      	lsls	r0, r3, #29
 800a6bc:	d512      	bpl.n	800a6e4 <__swsetup_r+0x5c>
 800a6be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6c0:	b141      	cbz	r1, 800a6d4 <__swsetup_r+0x4c>
 800a6c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6c6:	4299      	cmp	r1, r3
 800a6c8:	d002      	beq.n	800a6d0 <__swsetup_r+0x48>
 800a6ca:	4628      	mov	r0, r5
 800a6cc:	f7fe fefe 	bl	80094cc <_free_r>
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	6363      	str	r3, [r4, #52]	; 0x34
 800a6d4:	89a3      	ldrh	r3, [r4, #12]
 800a6d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6da:	81a3      	strh	r3, [r4, #12]
 800a6dc:	2300      	movs	r3, #0
 800a6de:	6063      	str	r3, [r4, #4]
 800a6e0:	6923      	ldr	r3, [r4, #16]
 800a6e2:	6023      	str	r3, [r4, #0]
 800a6e4:	89a3      	ldrh	r3, [r4, #12]
 800a6e6:	f043 0308 	orr.w	r3, r3, #8
 800a6ea:	81a3      	strh	r3, [r4, #12]
 800a6ec:	6923      	ldr	r3, [r4, #16]
 800a6ee:	b94b      	cbnz	r3, 800a704 <__swsetup_r+0x7c>
 800a6f0:	89a3      	ldrh	r3, [r4, #12]
 800a6f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6fa:	d003      	beq.n	800a704 <__swsetup_r+0x7c>
 800a6fc:	4621      	mov	r1, r4
 800a6fe:	4628      	mov	r0, r5
 800a700:	f000 f884 	bl	800a80c <__smakebuf_r>
 800a704:	89a0      	ldrh	r0, [r4, #12]
 800a706:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a70a:	f010 0301 	ands.w	r3, r0, #1
 800a70e:	d00a      	beq.n	800a726 <__swsetup_r+0x9e>
 800a710:	2300      	movs	r3, #0
 800a712:	60a3      	str	r3, [r4, #8]
 800a714:	6963      	ldr	r3, [r4, #20]
 800a716:	425b      	negs	r3, r3
 800a718:	61a3      	str	r3, [r4, #24]
 800a71a:	6923      	ldr	r3, [r4, #16]
 800a71c:	b943      	cbnz	r3, 800a730 <__swsetup_r+0xa8>
 800a71e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a722:	d1c4      	bne.n	800a6ae <__swsetup_r+0x26>
 800a724:	bd38      	pop	{r3, r4, r5, pc}
 800a726:	0781      	lsls	r1, r0, #30
 800a728:	bf58      	it	pl
 800a72a:	6963      	ldrpl	r3, [r4, #20]
 800a72c:	60a3      	str	r3, [r4, #8]
 800a72e:	e7f4      	b.n	800a71a <__swsetup_r+0x92>
 800a730:	2000      	movs	r0, #0
 800a732:	e7f7      	b.n	800a724 <__swsetup_r+0x9c>
 800a734:	2000006c 	.word	0x2000006c

0800a738 <_raise_r>:
 800a738:	291f      	cmp	r1, #31
 800a73a:	b538      	push	{r3, r4, r5, lr}
 800a73c:	4604      	mov	r4, r0
 800a73e:	460d      	mov	r5, r1
 800a740:	d904      	bls.n	800a74c <_raise_r+0x14>
 800a742:	2316      	movs	r3, #22
 800a744:	6003      	str	r3, [r0, #0]
 800a746:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a74a:	bd38      	pop	{r3, r4, r5, pc}
 800a74c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a74e:	b112      	cbz	r2, 800a756 <_raise_r+0x1e>
 800a750:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a754:	b94b      	cbnz	r3, 800a76a <_raise_r+0x32>
 800a756:	4620      	mov	r0, r4
 800a758:	f000 f830 	bl	800a7bc <_getpid_r>
 800a75c:	462a      	mov	r2, r5
 800a75e:	4601      	mov	r1, r0
 800a760:	4620      	mov	r0, r4
 800a762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a766:	f000 b817 	b.w	800a798 <_kill_r>
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d00a      	beq.n	800a784 <_raise_r+0x4c>
 800a76e:	1c59      	adds	r1, r3, #1
 800a770:	d103      	bne.n	800a77a <_raise_r+0x42>
 800a772:	2316      	movs	r3, #22
 800a774:	6003      	str	r3, [r0, #0]
 800a776:	2001      	movs	r0, #1
 800a778:	e7e7      	b.n	800a74a <_raise_r+0x12>
 800a77a:	2400      	movs	r4, #0
 800a77c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a780:	4628      	mov	r0, r5
 800a782:	4798      	blx	r3
 800a784:	2000      	movs	r0, #0
 800a786:	e7e0      	b.n	800a74a <_raise_r+0x12>

0800a788 <raise>:
 800a788:	4b02      	ldr	r3, [pc, #8]	; (800a794 <raise+0xc>)
 800a78a:	4601      	mov	r1, r0
 800a78c:	6818      	ldr	r0, [r3, #0]
 800a78e:	f7ff bfd3 	b.w	800a738 <_raise_r>
 800a792:	bf00      	nop
 800a794:	2000006c 	.word	0x2000006c

0800a798 <_kill_r>:
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	4d07      	ldr	r5, [pc, #28]	; (800a7b8 <_kill_r+0x20>)
 800a79c:	2300      	movs	r3, #0
 800a79e:	4604      	mov	r4, r0
 800a7a0:	4608      	mov	r0, r1
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	602b      	str	r3, [r5, #0]
 800a7a6:	f7f7 f86b 	bl	8001880 <_kill>
 800a7aa:	1c43      	adds	r3, r0, #1
 800a7ac:	d102      	bne.n	800a7b4 <_kill_r+0x1c>
 800a7ae:	682b      	ldr	r3, [r5, #0]
 800a7b0:	b103      	cbz	r3, 800a7b4 <_kill_r+0x1c>
 800a7b2:	6023      	str	r3, [r4, #0]
 800a7b4:	bd38      	pop	{r3, r4, r5, pc}
 800a7b6:	bf00      	nop
 800a7b8:	200004e4 	.word	0x200004e4

0800a7bc <_getpid_r>:
 800a7bc:	f7f7 b858 	b.w	8001870 <_getpid>

0800a7c0 <__swhatbuf_r>:
 800a7c0:	b570      	push	{r4, r5, r6, lr}
 800a7c2:	460c      	mov	r4, r1
 800a7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7c8:	2900      	cmp	r1, #0
 800a7ca:	b096      	sub	sp, #88	; 0x58
 800a7cc:	4615      	mov	r5, r2
 800a7ce:	461e      	mov	r6, r3
 800a7d0:	da0d      	bge.n	800a7ee <__swhatbuf_r+0x2e>
 800a7d2:	89a3      	ldrh	r3, [r4, #12]
 800a7d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a7d8:	f04f 0100 	mov.w	r1, #0
 800a7dc:	bf0c      	ite	eq
 800a7de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a7e2:	2340      	movne	r3, #64	; 0x40
 800a7e4:	2000      	movs	r0, #0
 800a7e6:	6031      	str	r1, [r6, #0]
 800a7e8:	602b      	str	r3, [r5, #0]
 800a7ea:	b016      	add	sp, #88	; 0x58
 800a7ec:	bd70      	pop	{r4, r5, r6, pc}
 800a7ee:	466a      	mov	r2, sp
 800a7f0:	f000 f848 	bl	800a884 <_fstat_r>
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	dbec      	blt.n	800a7d2 <__swhatbuf_r+0x12>
 800a7f8:	9901      	ldr	r1, [sp, #4]
 800a7fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a7fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a802:	4259      	negs	r1, r3
 800a804:	4159      	adcs	r1, r3
 800a806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a80a:	e7eb      	b.n	800a7e4 <__swhatbuf_r+0x24>

0800a80c <__smakebuf_r>:
 800a80c:	898b      	ldrh	r3, [r1, #12]
 800a80e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a810:	079d      	lsls	r5, r3, #30
 800a812:	4606      	mov	r6, r0
 800a814:	460c      	mov	r4, r1
 800a816:	d507      	bpl.n	800a828 <__smakebuf_r+0x1c>
 800a818:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a81c:	6023      	str	r3, [r4, #0]
 800a81e:	6123      	str	r3, [r4, #16]
 800a820:	2301      	movs	r3, #1
 800a822:	6163      	str	r3, [r4, #20]
 800a824:	b002      	add	sp, #8
 800a826:	bd70      	pop	{r4, r5, r6, pc}
 800a828:	ab01      	add	r3, sp, #4
 800a82a:	466a      	mov	r2, sp
 800a82c:	f7ff ffc8 	bl	800a7c0 <__swhatbuf_r>
 800a830:	9900      	ldr	r1, [sp, #0]
 800a832:	4605      	mov	r5, r0
 800a834:	4630      	mov	r0, r6
 800a836:	f7fe febd 	bl	80095b4 <_malloc_r>
 800a83a:	b948      	cbnz	r0, 800a850 <__smakebuf_r+0x44>
 800a83c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a840:	059a      	lsls	r2, r3, #22
 800a842:	d4ef      	bmi.n	800a824 <__smakebuf_r+0x18>
 800a844:	f023 0303 	bic.w	r3, r3, #3
 800a848:	f043 0302 	orr.w	r3, r3, #2
 800a84c:	81a3      	strh	r3, [r4, #12]
 800a84e:	e7e3      	b.n	800a818 <__smakebuf_r+0xc>
 800a850:	89a3      	ldrh	r3, [r4, #12]
 800a852:	6020      	str	r0, [r4, #0]
 800a854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a858:	81a3      	strh	r3, [r4, #12]
 800a85a:	9b00      	ldr	r3, [sp, #0]
 800a85c:	6163      	str	r3, [r4, #20]
 800a85e:	9b01      	ldr	r3, [sp, #4]
 800a860:	6120      	str	r0, [r4, #16]
 800a862:	b15b      	cbz	r3, 800a87c <__smakebuf_r+0x70>
 800a864:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a868:	4630      	mov	r0, r6
 800a86a:	f000 f81d 	bl	800a8a8 <_isatty_r>
 800a86e:	b128      	cbz	r0, 800a87c <__smakebuf_r+0x70>
 800a870:	89a3      	ldrh	r3, [r4, #12]
 800a872:	f023 0303 	bic.w	r3, r3, #3
 800a876:	f043 0301 	orr.w	r3, r3, #1
 800a87a:	81a3      	strh	r3, [r4, #12]
 800a87c:	89a3      	ldrh	r3, [r4, #12]
 800a87e:	431d      	orrs	r5, r3
 800a880:	81a5      	strh	r5, [r4, #12]
 800a882:	e7cf      	b.n	800a824 <__smakebuf_r+0x18>

0800a884 <_fstat_r>:
 800a884:	b538      	push	{r3, r4, r5, lr}
 800a886:	4d07      	ldr	r5, [pc, #28]	; (800a8a4 <_fstat_r+0x20>)
 800a888:	2300      	movs	r3, #0
 800a88a:	4604      	mov	r4, r0
 800a88c:	4608      	mov	r0, r1
 800a88e:	4611      	mov	r1, r2
 800a890:	602b      	str	r3, [r5, #0]
 800a892:	f7f7 f854 	bl	800193e <_fstat>
 800a896:	1c43      	adds	r3, r0, #1
 800a898:	d102      	bne.n	800a8a0 <_fstat_r+0x1c>
 800a89a:	682b      	ldr	r3, [r5, #0]
 800a89c:	b103      	cbz	r3, 800a8a0 <_fstat_r+0x1c>
 800a89e:	6023      	str	r3, [r4, #0]
 800a8a0:	bd38      	pop	{r3, r4, r5, pc}
 800a8a2:	bf00      	nop
 800a8a4:	200004e4 	.word	0x200004e4

0800a8a8 <_isatty_r>:
 800a8a8:	b538      	push	{r3, r4, r5, lr}
 800a8aa:	4d06      	ldr	r5, [pc, #24]	; (800a8c4 <_isatty_r+0x1c>)
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	4608      	mov	r0, r1
 800a8b2:	602b      	str	r3, [r5, #0]
 800a8b4:	f7f7 f853 	bl	800195e <_isatty>
 800a8b8:	1c43      	adds	r3, r0, #1
 800a8ba:	d102      	bne.n	800a8c2 <_isatty_r+0x1a>
 800a8bc:	682b      	ldr	r3, [r5, #0]
 800a8be:	b103      	cbz	r3, 800a8c2 <_isatty_r+0x1a>
 800a8c0:	6023      	str	r3, [r4, #0]
 800a8c2:	bd38      	pop	{r3, r4, r5, pc}
 800a8c4:	200004e4 	.word	0x200004e4

0800a8c8 <_init>:
 800a8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ca:	bf00      	nop
 800a8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ce:	bc08      	pop	{r3}
 800a8d0:	469e      	mov	lr, r3
 800a8d2:	4770      	bx	lr

0800a8d4 <_fini>:
 800a8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8d6:	bf00      	nop
 800a8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8da:	bc08      	pop	{r3}
 800a8dc:	469e      	mov	lr, r3
 800a8de:	4770      	bx	lr


HW 10b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08007070  08007070  00017070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800713c  0800713c  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  0800713c  0800713c  0001713c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007144  08007144  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007144  08007144  00017144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007148  08007148  00017148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  0800714c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000158  080072a4  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  080072a4  000205e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010fc5  00000000  00000000  000201cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023c9  00000000  00000000  00031190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001050  00000000  00000000  00033560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cd5  00000000  00000000  000345b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018201  00000000  00000000  00035285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012185  00000000  00000000  0004d486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b09f  00000000  00000000  0005f60b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a48  00000000  00000000  000fa6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000ff0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000158 	.word	0x20000158
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007058 	.word	0x08007058

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000015c 	.word	0x2000015c
 80001dc:	08007058 	.word	0x08007058

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <DWT_Delay_Init>:
#define LCD_BL_ON GPIOA,GPIO_PIN_4

//Microsecond delay functions. Credit:
//https://deepbluembedded.com/stm32-delay-microsecond-millisecond-utility-dwt-delay-timer-delay/

uint32_t DWT_Delay_Init(void) {
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
	/* Disable TRC */
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000590:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <DWT_Delay_Init+0x58>)
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	4a13      	ldr	r2, [pc, #76]	; (80005e4 <DWT_Delay_Init+0x58>)
 8000596:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800059a:	60d3      	str	r3, [r2, #12]
	/* Enable TRC */
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <DWT_Delay_Init+0x58>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	4a10      	ldr	r2, [pc, #64]	; (80005e4 <DWT_Delay_Init+0x58>)
 80005a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005a6:	60d3      	str	r3, [r2, #12]

	/* Disable clock cycle counter */
	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <DWT_Delay_Init+0x5c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a0e      	ldr	r2, [pc, #56]	; (80005e8 <DWT_Delay_Init+0x5c>)
 80005ae:	f023 0301 	bic.w	r3, r3, #1
 80005b2:	6013      	str	r3, [r2, #0]
	/* Enable  clock cycle counter */
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <DWT_Delay_Init+0x5c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a0b      	ldr	r2, [pc, #44]	; (80005e8 <DWT_Delay_Init+0x5c>)
 80005ba:	f043 0301 	orr.w	r3, r3, #1
 80005be:	6013      	str	r3, [r2, #0]

	/* Reset the clock cycle counter value */
	DWT->CYCCNT = 0;
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <DWT_Delay_Init+0x5c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 80005c6:	bf00      	nop
	__ASM volatile ("NOP");
 80005c8:	bf00      	nop
	__ASM volatile ("NOP");
 80005ca:	bf00      	nop

	/* Check if clock cycle counter has started */
	if (DWT->CYCCNT) {
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <DWT_Delay_Init+0x5c>)
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <DWT_Delay_Init+0x4c>
		return 0; /*clock cycle counter started*/
 80005d4:	2300      	movs	r3, #0
 80005d6:	e000      	b.n	80005da <DWT_Delay_Init+0x4e>
	} else {
		return 1; /*clock cycle counter not started*/
 80005d8:	2301      	movs	r3, #1
	}
}
 80005da:	4618      	mov	r0, r3
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	e000edf0 	.word	0xe000edf0
 80005e8:	e0001000 	.word	0xe0001000

080005ec <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t au32_microseconds) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	uint32_t au32_initial_ticks = DWT->CYCCNT;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <DWT_Delay_us+0x48>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	60fb      	str	r3, [r7, #12]
	uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80005fa:	f003 fae1 	bl	8003bc0 <HAL_RCC_GetHCLKFreq>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a0d      	ldr	r2, [pc, #52]	; (8000638 <DWT_Delay_us+0x4c>)
 8000602:	fba2 2303 	umull	r2, r3, r2, r3
 8000606:	0c9b      	lsrs	r3, r3, #18
 8000608:	60bb      	str	r3, [r7, #8]
	au32_microseconds *= au32_ticks;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	68ba      	ldr	r2, [r7, #8]
 800060e:	fb02 f303 	mul.w	r3, r2, r3
 8000612:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds - au32_ticks)
 8000614:	bf00      	nop
 8000616:	4b07      	ldr	r3, [pc, #28]	; (8000634 <DWT_Delay_us+0x48>)
 8000618:	685a      	ldr	r2, [r3, #4]
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	1ad2      	subs	r2, r2, r3
 800061e:	6879      	ldr	r1, [r7, #4]
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	1acb      	subs	r3, r1, r3
 8000624:	429a      	cmp	r2, r3
 8000626:	d3f6      	bcc.n	8000616 <DWT_Delay_us+0x2a>
		;
}
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	e0001000 	.word	0xe0001000
 8000638:	431bde83 	.word	0x431bde83

0800063c <lcd_enable>:

//  LCD code

void lcd_enable() {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
	//HAL_Delay(1);
	//DWT_Delay_us(50);
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_SET); //pulse needs to be some clock cycles long, we are not in hurry right now
 8000640:	2201      	movs	r2, #1
 8000642:	2102      	movs	r1, #2
 8000644:	4807      	ldr	r0, [pc, #28]	; (8000664 <lcd_enable+0x28>)
 8000646:	f002 fe3d 	bl	80032c4 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 800064a:	2032      	movs	r0, #50	; 0x32
 800064c:	f7ff ffce 	bl	80005ec <DWT_Delay_us>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	2102      	movs	r1, #2
 8000654:	4803      	ldr	r0, [pc, #12]	; (8000664 <lcd_enable+0x28>)
 8000656:	f002 fe35 	bl	80032c4 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 800065a:	2032      	movs	r0, #50	; 0x32
 800065c:	f7ff ffc6 	bl	80005ec <DWT_Delay_us>
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40020400 	.word	0x40020400

08000668 <lcd_write4>:

//  write a nibble (4 bits)
void lcd_write4(uint8_t word) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4, (word & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET); //we AND the word and the mask. If it's true, we write GPIO_PIN_SET, else _RESET
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	f003 0301 	and.w	r3, r3, #1
 8000678:	b2db      	uxtb	r3, r3
 800067a:	461a      	mov	r2, r3
 800067c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000680:	4816      	ldr	r0, [pc, #88]	; (80006dc <lcd_write4+0x74>)
 8000682:	f002 fe1f 	bl	80032c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5, (word & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	105b      	asrs	r3, r3, #1
 800068a:	b2db      	uxtb	r3, r3
 800068c:	f003 0301 	and.w	r3, r3, #1
 8000690:	b2db      	uxtb	r3, r3
 8000692:	461a      	mov	r2, r3
 8000694:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000698:	4810      	ldr	r0, [pc, #64]	; (80006dc <lcd_write4+0x74>)
 800069a:	f002 fe13 	bl	80032c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6, (word & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	109b      	asrs	r3, r3, #2
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	461a      	mov	r2, r3
 80006ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b0:	480a      	ldr	r0, [pc, #40]	; (80006dc <lcd_write4+0x74>)
 80006b2:	f002 fe07 	bl	80032c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7, (word & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	10db      	asrs	r3, r3, #3
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	f003 0301 	and.w	r3, r3, #1
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	461a      	mov	r2, r3
 80006c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <lcd_write4+0x74>)
 80006ca:	f002 fdfb 	bl	80032c4 <HAL_GPIO_WritePin>
	lcd_enable();  //pulse the E line
 80006ce:	f7ff ffb5 	bl	800063c <lcd_enable>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40020400 	.word	0x40020400

080006e0 <lcd_write>:

//  write a byte (8 bits)
void lcd_write(uint8_t word) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
	lcd_write4(word >> 4); //we first write the upper nibble
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	091b      	lsrs	r3, r3, #4
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ffb9 	bl	8000668 <lcd_write4>
	lcd_write4(word);    //and then the lower nibble
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ffb5 	bl	8000668 <lcd_write4>
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <lcd_command>:
#define DISPLAY_ON 0x04
#define LCD_SETDRAMADD 0x80
uint8_t _display_ctrl = 0;

//  send an instruction to the LCD
void lcd_command(uint8_t byte) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET); //write an instruction -> RS must be low
 8000712:	2200      	movs	r2, #0
 8000714:	2104      	movs	r1, #4
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <lcd_command+0x24>)
 8000718:	f002 fdd4 	bl	80032c4 <HAL_GPIO_WritePin>
	lcd_write(byte);
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ffde 	bl	80006e0 <lcd_write>
}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40020400 	.word	0x40020400

08000730 <lcd_data>:
	lcd_command(LCD_CLEAR_COMMAND);
	DWT_Delay_us(2000);
}

//  send data to the LCD
void lcd_data(uint8_t byte) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET); //write data, not instruction -> RS must be high
 800073a:	2201      	movs	r2, #1
 800073c:	2104      	movs	r1, #4
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <lcd_data+0x24>)
 8000740:	f002 fdc0 	bl	80032c4 <HAL_GPIO_WritePin>
	lcd_write(byte);
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ffca 	bl	80006e0 <lcd_write>
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40020400 	.word	0x40020400

08000758 <setCursor>:

//  set (x, y) position of the cursor
void setCursor(uint8_t col, uint8_t row) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	460a      	mov	r2, r1
 8000762:	71fb      	strb	r3, [r7, #7]
 8000764:	4613      	mov	r3, r2
 8000766:	71bb      	strb	r3, [r7, #6]
	if ((col + 1) * (row + 1) < 80) {
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	3301      	adds	r3, #1
 800076c:	79ba      	ldrb	r2, [r7, #6]
 800076e:	3201      	adds	r2, #1
 8000770:	fb02 f303 	mul.w	r3, r2, r3
 8000774:	2b4f      	cmp	r3, #79	; 0x4f
 8000776:	dc10      	bgt.n	800079a <setCursor+0x42>
		lcd_command(LCD_SETDRAMADD | (col + 40 * row)); //in the second row, address is offset by 40
 8000778:	79bb      	ldrb	r3, [r7, #6]
 800077a:	461a      	mov	r2, r3
 800077c:	0092      	lsls	r2, r2, #2
 800077e:	4413      	add	r3, r2
 8000780:	00db      	lsls	r3, r3, #3
 8000782:	b2da      	uxtb	r2, r3
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	4413      	add	r3, r2
 8000788:	b2db      	uxtb	r3, r3
 800078a:	b25b      	sxtb	r3, r3
 800078c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000790:	b25b      	sxtb	r3, r3
 8000792:	b2db      	uxtb	r3, r3
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ffb7 	bl	8000708 <lcd_command>
	}
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <lcd_print>:

//  print a string on the display, starting from the cursor position
void lcd_print(char string[]) {  //pointer to first char in the string
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b084      	sub	sp, #16
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]

	int size = strlen(string);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff fd18 	bl	80001e0 <strlen>
 80007b0:	4603      	mov	r3, r0
 80007b2:	60fb      	str	r3, [r7, #12]

	while (size--) {
 80007b4:	e006      	b.n	80007c4 <lcd_print+0x22>
		lcd_data(*string++);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	1c5a      	adds	r2, r3, #1
 80007ba:	607a      	str	r2, [r7, #4]
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ffb6 	bl	8000730 <lcd_data>
	while (size--) {
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	1e5a      	subs	r2, r3, #1
 80007c8:	60fa      	str	r2, [r7, #12]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d1f3      	bne.n	80007b6 <lcd_print+0x14>
	}
}
 80007ce:	bf00      	nop
 80007d0:	bf00      	nop
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <lcd_println>:

void lcd_println(char string[], uint8_t row) {
 80007d8:	b5b0      	push	{r4, r5, r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	70fb      	strb	r3, [r7, #3]

	char line[] = "                ";
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <lcd_println+0x6c>)
 80007e6:	f107 0408 	add.w	r4, r7, #8
 80007ea:	461d      	mov	r5, r3
 80007ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f0:	682b      	ldr	r3, [r5, #0]
 80007f2:	7023      	strb	r3, [r4, #0]

	int size = strlen(string);
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff fcf3 	bl	80001e0 <strlen>
 80007fa:	4603      	mov	r3, r0
 80007fc:	61fb      	str	r3, [r7, #28]

	if (size > 16)
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	2b10      	cmp	r3, #16
 8000802:	dd0c      	ble.n	800081e <lcd_println+0x46>
		size = 16;
 8000804:	2310      	movs	r3, #16
 8000806:	61fb      	str	r3, [r7, #28]

	while (size--) {
 8000808:	e009      	b.n	800081e <lcd_println+0x46>
		line[size] = string[size];
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	4413      	add	r3, r2
 8000810:	7819      	ldrb	r1, [r3, #0]
 8000812:	f107 0208 	add.w	r2, r7, #8
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	4413      	add	r3, r2
 800081a:	460a      	mov	r2, r1
 800081c:	701a      	strb	r2, [r3, #0]
	while (size--) {
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	1e5a      	subs	r2, r3, #1
 8000822:	61fa      	str	r2, [r7, #28]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d1f0      	bne.n	800080a <lcd_println+0x32>
	}
	setCursor(0, row);
 8000828:	78fb      	ldrb	r3, [r7, #3]
 800082a:	4619      	mov	r1, r3
 800082c:	2000      	movs	r0, #0
 800082e:	f7ff ff93 	bl	8000758 <setCursor>
	lcd_print(line);
 8000832:	f107 0308 	add.w	r3, r7, #8
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ffb3 	bl	80007a2 <lcd_print>
}
 800083c:	bf00      	nop
 800083e:	3720      	adds	r7, #32
 8000840:	46bd      	mov	sp, r7
 8000842:	bdb0      	pop	{r4, r5, r7, pc}
 8000844:	08007070 	.word	0x08007070

08000848 <writeCustomChar>:

void writeCustomChar(uint8_t address, uint8_t map[]) { //fill Character Generator RAM with custom symbols
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	71fb      	strb	r3, [r7, #7]
	address &= 0x7; //address must be 0 to 7
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	71fb      	strb	r3, [r7, #7]
	lcd_command(0x40 | (address << 3)); //Set CGRAM address + address shifted left by 3 bits to start writing first byte
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	00db      	lsls	r3, r3, #3
 8000860:	b25b      	sxtb	r3, r3
 8000862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000866:	b25b      	sxtb	r3, r3
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff4c 	bl	8000708 <lcd_command>
	for (int i = 0; i < 8; i++) {
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	e009      	b.n	800088a <writeCustomChar+0x42>
		lcd_data(map[i]);
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	683a      	ldr	r2, [r7, #0]
 800087a:	4413      	add	r3, r2
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff ff56 	bl	8000730 <lcd_data>
	for (int i = 0; i < 8; i++) {
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	3301      	adds	r3, #1
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	2b07      	cmp	r3, #7
 800088e:	ddf2      	ble.n	8000876 <writeCustomChar+0x2e>
	}
}
 8000890:	bf00      	nop
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <loadCustomChars>:

void loadCustomChars() { //write all custom characters to the LCD module memory
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	writeCustomChar(CHAR_1_5, CUSTOM_1_5);
 80008a0:	490a      	ldr	r1, [pc, #40]	; (80008cc <loadCustomChars+0x30>)
 80008a2:	2001      	movs	r0, #1
 80008a4:	f7ff ffd0 	bl	8000848 <writeCustomChar>
	writeCustomChar(CHAR_2_5, CUSTOM_2_5);
 80008a8:	4909      	ldr	r1, [pc, #36]	; (80008d0 <loadCustomChars+0x34>)
 80008aa:	2002      	movs	r0, #2
 80008ac:	f7ff ffcc 	bl	8000848 <writeCustomChar>
	writeCustomChar(CHAR_3_5, CUSTOM_3_5);
 80008b0:	4908      	ldr	r1, [pc, #32]	; (80008d4 <loadCustomChars+0x38>)
 80008b2:	2003      	movs	r0, #3
 80008b4:	f7ff ffc8 	bl	8000848 <writeCustomChar>
	writeCustomChar(CHAR_4_5, CUSTOM_4_5);
 80008b8:	4907      	ldr	r1, [pc, #28]	; (80008d8 <loadCustomChars+0x3c>)
 80008ba:	2004      	movs	r0, #4
 80008bc:	f7ff ffc4 	bl	8000848 <writeCustomChar>
	writeCustomChar(CHAR_5_5, CUSTOM_5_5);
 80008c0:	4906      	ldr	r1, [pc, #24]	; (80008dc <loadCustomChars+0x40>)
 80008c2:	2005      	movs	r0, #5
 80008c4:	f7ff ffc0 	bl	8000848 <writeCustomChar>
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000000 	.word	0x20000000
 80008d0:	20000008 	.word	0x20000008
 80008d4:	20000010 	.word	0x20000010
 80008d8:	20000018 	.word	0x20000018
 80008dc:	20000020 	.word	0x20000020

080008e0 <lcd_initialize>:
		i++;
	}
	lcd_print(bar); //finally we write to the LCD
}

void lcd_initialize() {  //initialize WH1602C LCD module in 4 bit mode, page 25
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0

	HAL_Delay(50);  //wait >40 ms as per datasheet
 80008e4:	2032      	movs	r0, #50	; 0x32
 80008e6:	f001 fa6b 	bl	8001dc0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2104      	movs	r1, #4
 80008ee:	4824      	ldr	r0, [pc, #144]	; (8000980 <lcd_initialize+0xa0>)
 80008f0:	f002 fce8 	bl	80032c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2102      	movs	r1, #2
 80008f8:	4821      	ldr	r0, [pc, #132]	; (8000980 <lcd_initialize+0xa0>)
 80008fa:	f002 fce3 	bl	80032c4 <HAL_GPIO_WritePin>
	//LCD WritePIn is hard-wired low as per board schematic
	DWT_Delay_Init();
 80008fe:	f7ff fe45 	bl	800058c <DWT_Delay_Init>
	//Magic reset sequence
	lcd_write4(0x03);  //4-bit mode
 8000902:	2003      	movs	r0, #3
 8000904:	f7ff feb0 	bl	8000668 <lcd_write4>
	HAL_Delay(5);
 8000908:	2005      	movs	r0, #5
 800090a:	f001 fa59 	bl	8001dc0 <HAL_Delay>
	lcd_write4(0x03);
 800090e:	2003      	movs	r0, #3
 8000910:	f7ff feaa 	bl	8000668 <lcd_write4>
	HAL_Delay(5);
 8000914:	2005      	movs	r0, #5
 8000916:	f001 fa53 	bl	8001dc0 <HAL_Delay>
	lcd_write4(0x03);
 800091a:	2003      	movs	r0, #3
 800091c:	f7ff fea4 	bl	8000668 <lcd_write4>
	HAL_Delay(5);
 8000920:	2005      	movs	r0, #5
 8000922:	f001 fa4d 	bl	8001dc0 <HAL_Delay>
	lcd_write4(0x02); //Set 4-bit mode
 8000926:	2002      	movs	r0, #2
 8000928:	f7ff fe9e 	bl	8000668 <lcd_write4>
	lcd_write(0x28); //4bit, 2 lines, 5x8 font
 800092c:	2028      	movs	r0, #40	; 0x28
 800092e:	f7ff fed7 	bl	80006e0 <lcd_write>
	HAL_Delay(5);
 8000932:	2005      	movs	r0, #5
 8000934:	f001 fa44 	bl	8001dc0 <HAL_Delay>
	lcd_write(0x08); //display off;
 8000938:	2008      	movs	r0, #8
 800093a:	f7ff fed1 	bl	80006e0 <lcd_write>
	lcd_write(LCD_CLEAR_COMMAND); 			 //display clear;
 800093e:	2001      	movs	r0, #1
 8000940:	f7ff fece 	bl	80006e0 <lcd_write>
	HAL_Delay(5);
 8000944:	2005      	movs	r0, #5
 8000946:	f001 fa3b 	bl	8001dc0 <HAL_Delay>
	lcd_write(0x06); //entry mode set: increment
 800094a:	2006      	movs	r0, #6
 800094c:	f7ff fec8 	bl	80006e0 <lcd_write>
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);  //enable backlight
 8000950:	2201      	movs	r2, #1
 8000952:	2110      	movs	r1, #16
 8000954:	480b      	ldr	r0, [pc, #44]	; (8000984 <lcd_initialize+0xa4>)
 8000956:	f002 fcb5 	bl	80032c4 <HAL_GPIO_WritePin>
	//_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON|CURSOR_ON|BLINK_ON;
	_display_ctrl = DISPLAY_COMMAND | DISPLAY_ON;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <lcd_initialize+0xa8>)
 800095c:	220c      	movs	r2, #12
 800095e:	701a      	strb	r2, [r3, #0]
	lcd_write(_display_ctrl); //set as above
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <lcd_initialize+0xa8>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff febb 	bl	80006e0 <lcd_write>
	lcd_write(0x02); //go home
 800096a:	2002      	movs	r0, #2
 800096c:	f7ff feb8 	bl	80006e0 <lcd_write>
	HAL_Delay(2);
 8000970:	2002      	movs	r0, #2
 8000972:	f001 fa25 	bl	8001dc0 <HAL_Delay>
	loadCustomChars();
 8000976:	f7ff ff91 	bl	800089c <loadCustomChars>

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40020400 	.word	0x40020400
 8000984:	40020000 	.word	0x40020000
 8000988:	20000174 	.word	0x20000174

0800098c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000992:	f001 f9a3 	bl	8001cdc <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000996:	f000 f89f 	bl	8000ad8 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800099a:	f000 fb75 	bl	8001088 <MX_GPIO_Init>
    MX_DMA_Init();
 800099e:	f000 fb53 	bl	8001048 <MX_DMA_Init>
    MX_USART2_UART_Init();
 80009a2:	f000 fb27 	bl	8000ff4 <MX_USART2_UART_Init>
    MX_TIM3_Init();
 80009a6:	f000 f9e5 	bl	8000d74 <MX_TIM3_Init>
    MX_ADC1_Init();
 80009aa:	f000 f901 	bl	8000bb0 <MX_ADC1_Init>
    MX_TIM2_Init();
 80009ae:	f000 f987 	bl	8000cc0 <MX_TIM2_Init>
    MX_USART1_UART_Init();
 80009b2:	f000 faf5 	bl	8000fa0 <MX_USART1_UART_Init>
    MX_TIM4_Init();
 80009b6:	f000 fa33 	bl	8000e20 <MX_TIM4_Init>
    MX_TIM5_Init();
 80009ba:	f000 fa7f 	bl	8000ebc <MX_TIM5_Init>
    MX_SPI1_Init();
 80009be:	f000 f949 	bl	8000c54 <MX_SPI1_Init>
    MX_TIM10_Init();
 80009c2:	f000 fac9 	bl	8000f58 <MX_TIM10_Init>
    /* USER CODE BEGIN 2 */

    lcd_initialize();
 80009c6:	f7ff ff8b 	bl	80008e0 <lcd_initialize>

    // Start tim3 for quadrature encoder readout
    HAL_TIM_Base_Start(&htim3);
 80009ca:	4835      	ldr	r0, [pc, #212]	; (8000aa0 <main+0x114>)
 80009cc:	f003 fd24 	bl	8004418 <HAL_TIM_Base_Start>

    // Start tim5 for keypad
    HAL_TIM_Base_Start_IT(&htim5);
 80009d0:	4834      	ldr	r0, [pc, #208]	; (8000aa4 <main+0x118>)
 80009d2:	f003 fd7b 	bl	80044cc <HAL_TIM_Base_Start_IT>

    // Start receiving the first byte via the IR link
    HAL_UART_Receive_IT(&huart1, &uart1_buffer, 1);
 80009d6:	2201      	movs	r2, #1
 80009d8:	4933      	ldr	r1, [pc, #204]	; (8000aa8 <main+0x11c>)
 80009da:	4834      	ldr	r0, [pc, #208]	; (8000aac <main+0x120>)
 80009dc:	f004 fef7 	bl	80057ce <HAL_UART_Receive_IT>

    // Start tim10 for led matrix
    HAL_TIM_Base_Start_IT(&htim10);
 80009e0:	4833      	ldr	r0, [pc, #204]	; (8000ab0 <main+0x124>)
 80009e2:	f003 fd73 	bl	80044cc <HAL_TIM_Base_Start_IT>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    char id_message[17] = {0};
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	731a      	strb	r2, [r3, #12]
    ir_ctrl.buffer = malloc(4);
 80009f8:	2004      	movs	r0, #4
 80009fa:	f005 fe81 	bl	8006700 <malloc>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b2c      	ldr	r3, [pc, #176]	; (8000ab4 <main+0x128>)
 8000a04:	609a      	str	r2, [r3, #8]
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */

        // Read the board id
        board_id = (__HAL_TIM_GET_COUNTER(&htim3) / 2) % BOARDS;
 8000a06:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <main+0x114>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a0c:	0859      	lsrs	r1, r3, #1
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <main+0x12c>)
 8000a10:	fba3 2301 	umull	r2, r3, r3, r1
 8000a14:	089a      	lsrs	r2, r3, #2
 8000a16:	4613      	mov	r3, r2
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	4413      	add	r3, r2
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	1aca      	subs	r2, r1, r3
 8000a20:	b292      	uxth	r2, r2
 8000a22:	4b26      	ldr	r3, [pc, #152]	; (8000abc <main+0x130>)
 8000a24:	801a      	strh	r2, [r3, #0]
        sprintf(id_message, "Board id: %d", board_id);
 8000a26:	4b25      	ldr	r3, [pc, #148]	; (8000abc <main+0x130>)
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	4924      	ldr	r1, [pc, #144]	; (8000ac0 <main+0x134>)
 8000a30:	4618      	mov	r0, r3
 8000a32:	f005 ff19 	bl	8006868 <siprintf>
        lcd_println(id_message, 0);
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fecc 	bl	80007d8 <lcd_println>

        // Read the destination id
        HAL_ADC_Start(&hadc1);
 8000a40:	4820      	ldr	r0, [pc, #128]	; (8000ac4 <main+0x138>)
 8000a42:	f001 fa25 	bl	8001e90 <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(&hadc1, 1) == HAL_OK)
 8000a46:	2101      	movs	r1, #1
 8000a48:	481e      	ldr	r0, [pc, #120]	; (8000ac4 <main+0x138>)
 8000a4a:	f001 fad5 	bl	8001ff8 <HAL_ADC_PollForConversion>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1d8      	bne.n	8000a06 <main+0x7a>
        {
            destination_id = HAL_ADC_GetValue(&hadc1) / (4095 / (BOARDS + 1));
 8000a54:	481b      	ldr	r0, [pc, #108]	; (8000ac4 <main+0x138>)
 8000a56:	f001 fb5a 	bl	800210e <HAL_ADC_GetValue>
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <main+0x13c>)
 8000a5e:	fba3 1302 	umull	r1, r3, r3, r2
 8000a62:	1ad2      	subs	r2, r2, r3
 8000a64:	0852      	lsrs	r2, r2, #1
 8000a66:	4413      	add	r3, r2
 8000a68:	0a5b      	lsrs	r3, r3, #9
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <main+0x140>)
 8000a6e:	801a      	strh	r2, [r3, #0]
            if (destination_id != BOARDS)
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <main+0x140>)
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	2b06      	cmp	r3, #6
 8000a76:	d00d      	beq.n	8000a94 <main+0x108>
            {
                sprintf(id_message, "Dest. id: %d", destination_id);
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <main+0x140>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	4913      	ldr	r1, [pc, #76]	; (8000ad0 <main+0x144>)
 8000a82:	4618      	mov	r0, r3
 8000a84:	f005 fef0 	bl	8006868 <siprintf>
                lcd_println(id_message, 1);
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fea3 	bl	80007d8 <lcd_println>
 8000a92:	e7b8      	b.n	8000a06 <main+0x7a>
            }
            else
            {
                lcd_println("Dest. id: ALL", 1);
 8000a94:	2101      	movs	r1, #1
 8000a96:	480f      	ldr	r0, [pc, #60]	; (8000ad4 <main+0x148>)
 8000a98:	f7ff fe9e 	bl	80007d8 <lcd_println>
        board_id = (__HAL_TIM_GET_COUNTER(&htim3) / 2) % BOARDS;
 8000a9c:	e7b3      	b.n	8000a06 <main+0x7a>
 8000a9e:	bf00      	nop
 8000aa0:	200002c0 	.word	0x200002c0
 8000aa4:	20000350 	.word	0x20000350
 8000aa8:	2000047e 	.word	0x2000047e
 8000aac:	200003e0 	.word	0x200003e0
 8000ab0:	20000398 	.word	0x20000398
 8000ab4:	2000004c 	.word	0x2000004c
 8000ab8:	aaaaaaab 	.word	0xaaaaaaab
 8000abc:	2000047c 	.word	0x2000047c
 8000ac0:	08007084 	.word	0x08007084
 8000ac4:	20000178 	.word	0x20000178
 8000ac8:	c01c01c1 	.word	0xc01c01c1
 8000acc:	20000048 	.word	0x20000048
 8000ad0:	08007094 	.word	0x08007094
 8000ad4:	080070a4 	.word	0x080070a4

08000ad8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b094      	sub	sp, #80	; 0x50
 8000adc:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ade:	f107 0320 	add.w	r3, r7, #32
 8000ae2:	2230      	movs	r2, #48	; 0x30
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f005 fede 	bl	80068a8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <SystemClock_Config+0xd0>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	4a28      	ldr	r2, [pc, #160]	; (8000ba8 <SystemClock_Config+0xd0>)
 8000b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0c:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <SystemClock_Config+0xd0>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b18:	2300      	movs	r3, #0
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	4b23      	ldr	r3, [pc, #140]	; (8000bac <SystemClock_Config+0xd4>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b24:	4a21      	ldr	r2, [pc, #132]	; (8000bac <SystemClock_Config+0xd4>)
 8000b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <SystemClock_Config+0xd4>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b40:	2310      	movs	r3, #16
 8000b42:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b44:	2302      	movs	r3, #2
 8000b46:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 16;
 8000b4c:	2310      	movs	r3, #16
 8000b4e:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 336;
 8000b50:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b54:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b56:	2304      	movs	r3, #4
 8000b58:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b5a:	2307      	movs	r3, #7
 8000b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5e:	f107 0320 	add.w	r3, r7, #32
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 fbc8 	bl	80032f8 <HAL_RCC_OscConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0x9a>
    {
        Error_Handler();
 8000b6e:	f000 fd51 	bl	8001614 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000b72:	230f      	movs	r3, #15
 8000b74:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b76:	2302      	movs	r3, #2
 8000b78:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b82:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f002 fe2a 	bl	80037e8 <HAL_RCC_ClockConfig>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <SystemClock_Config+0xc6>
    {
        Error_Handler();
 8000b9a:	f000 fd3b 	bl	8001614 <Error_Handler>
    }
}
 8000b9e:	bf00      	nop
 8000ba0:	3750      	adds	r7, #80	; 0x50
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40007000 	.word	0x40007000

08000bb0 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 8000bb6:	463b      	mov	r3, r7
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]

    /* USER CODE END ADC1_Init 1 */

    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
     */
    hadc1.Instance = ADC1;
 8000bc2:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <MX_ADC1_Init+0x98>)
 8000bc4:	4a21      	ldr	r2, [pc, #132]	; (8000c4c <MX_ADC1_Init+0x9c>)
 8000bc6:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <MX_ADC1_Init+0x98>)
 8000bca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bce:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bd0:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <MX_ADC1_Init+0x98>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <MX_ADC1_Init+0x98>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <MX_ADC1_Init+0x98>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <MX_ADC1_Init+0x98>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bea:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <MX_ADC1_Init+0x98>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <MX_ADC1_Init+0x98>)
 8000bf2:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <MX_ADC1_Init+0xa0>)
 8000bf4:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_ADC1_Init+0x98>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <MX_ADC1_Init+0x98>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_ADC1_Init+0x98>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <MX_ADC1_Init+0x98>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c10:	480d      	ldr	r0, [pc, #52]	; (8000c48 <MX_ADC1_Init+0x98>)
 8000c12:	f001 f8f9 	bl	8001e08 <HAL_ADC_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_ADC1_Init+0x70>
    {
        Error_Handler();
 8000c1c:	f000 fcfa 	bl	8001614 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    sConfig.Channel = ADC_CHANNEL_1;
 8000c20:	2301      	movs	r3, #1
 8000c22:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 8000c24:	2301      	movs	r3, #1
 8000c26:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000c28:	2307      	movs	r3, #7
 8000c2a:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_ADC1_Init+0x98>)
 8000c32:	f001 fa79 	bl	8002128 <HAL_ADC_ConfigChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_ADC1_Init+0x90>
    {
        Error_Handler();
 8000c3c:	f000 fcea 	bl	8001614 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */
}
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000178 	.word	0x20000178
 8000c4c:	40012000 	.word	0x40012000
 8000c50:	0f000001 	.word	0x0f000001

08000c54 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 8000c58:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000c5a:	4a18      	ldr	r2, [pc, #96]	; (8000cbc <MX_SPI1_Init+0x68>)
 8000c5c:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c5e:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000c60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c64:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c84:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000c88:	2208      	movs	r2, #8
 8000c8a:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000ca0:	220a      	movs	r2, #10
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ca4:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000ca6:	f002 ffbf 	bl	8003c28 <HAL_SPI_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_SPI1_Init+0x60>
    {
        Error_Handler();
 8000cb0:	f000 fcb0 	bl	8001614 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200001c0 	.word	0x200001c0
 8000cbc:	40013000 	.word	0x40013000

08000cc0 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc6:	f107 0320 	add.w	r3, r7, #32
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]
 8000cde:	615a      	str	r2, [r3, #20]
 8000ce0:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8000ce2:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <MX_TIM2_Init+0xb0>)
 8000ce4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ce8:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 0;
 8000cea:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <MX_TIM2_Init+0xb0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf0:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <MX_TIM2_Init+0xb0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 2210;
 8000cf6:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <MX_TIM2_Init+0xb0>)
 8000cf8:	f640 02a2 	movw	r2, #2210	; 0x8a2
 8000cfc:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <MX_TIM2_Init+0xb0>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_TIM2_Init+0xb0>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d0a:	4819      	ldr	r0, [pc, #100]	; (8000d70 <MX_TIM2_Init+0xb0>)
 8000d0c:	f003 fc6f 	bl	80045ee <HAL_TIM_PWM_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM2_Init+0x5a>
    {
        Error_Handler();
 8000d16:	f000 fc7d 	bl	8001614 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d22:	f107 0320 	add.w	r3, r7, #32
 8000d26:	4619      	mov	r1, r3
 8000d28:	4811      	ldr	r0, [pc, #68]	; (8000d70 <MX_TIM2_Init+0xb0>)
 8000d2a:	f004 fbef 	bl	800550c <HAL_TIMEx_MasterConfigSynchronization>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM2_Init+0x78>
    {
        Error_Handler();
 8000d34:	f000 fc6e 	bl	8001614 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d38:	2360      	movs	r3, #96	; 0x60
 8000d3a:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 1105;
 8000d3c:	f240 4351 	movw	r3, #1105	; 0x451
 8000d40:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2208      	movs	r2, #8
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4807      	ldr	r0, [pc, #28]	; (8000d70 <MX_TIM2_Init+0xb0>)
 8000d52:	f003 ff5d 	bl	8004c10 <HAL_TIM_PWM_ConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM2_Init+0xa0>
    {
        Error_Handler();
 8000d5c:	f000 fc5a 	bl	8001614 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
    HAL_TIM_MspPostInit(&htim2);
 8000d60:	4803      	ldr	r0, [pc, #12]	; (8000d70 <MX_TIM2_Init+0xb0>)
 8000d62:	f000 fe1d 	bl	80019a0 <HAL_TIM_MspPostInit>
}
 8000d66:	bf00      	nop
 8000d68:	3728      	adds	r7, #40	; 0x28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000278 	.word	0x20000278

08000d74 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08c      	sub	sp, #48	; 0x30
 8000d78:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_Encoder_InitTypeDef sConfig = {0};
 8000d7a:	f107 030c 	add.w	r3, r7, #12
 8000d7e:	2224      	movs	r2, #36	; 0x24
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f005 fd90 	bl	80068a8 <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8000d90:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <MX_TIM3_Init+0xa4>)
 8000d92:	4a22      	ldr	r2, [pc, #136]	; (8000e1c <MX_TIM3_Init+0xa8>)
 8000d94:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 0;
 8000d96:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <MX_TIM3_Init+0xa4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9c:	4b1e      	ldr	r3, [pc, #120]	; (8000e18 <MX_TIM3_Init+0xa4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 65535;
 8000da2:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <MX_TIM3_Init+0xa4>)
 8000da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000da8:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000daa:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <MX_TIM3_Init+0xa4>)
 8000dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db0:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db2:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <MX_TIM3_Init+0xa4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
    sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8000db8:	2302      	movs	r3, #2
 8000dba:	60fb      	str	r3, [r7, #12]
    sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	617b      	str	r3, [r7, #20]
    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]
    sConfig.IC1Filter = 15;
 8000dc8:	230f      	movs	r3, #15
 8000dca:	61fb      	str	r3, [r7, #28]
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	623b      	str	r3, [r7, #32]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    sConfig.IC2Filter = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	4619      	mov	r1, r3
 8000de2:	480d      	ldr	r0, [pc, #52]	; (8000e18 <MX_TIM3_Init+0xa4>)
 8000de4:	f003 fd66 	bl	80048b4 <HAL_TIM_Encoder_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM3_Init+0x7e>
    {
        Error_Handler();
 8000dee:	f000 fc11 	bl	8001614 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4806      	ldr	r0, [pc, #24]	; (8000e18 <MX_TIM3_Init+0xa4>)
 8000e00:	f004 fb84 	bl	800550c <HAL_TIMEx_MasterConfigSynchronization>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM3_Init+0x9a>
    {
        Error_Handler();
 8000e0a:	f000 fc03 	bl	8001614 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
}
 8000e0e:	bf00      	nop
 8000e10:	3730      	adds	r7, #48	; 0x30
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200002c0 	.word	0x200002c0
 8000e1c:	40000400 	.word	0x40000400

08000e20 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM4_Init 0 */

    /* USER CODE END TIM4_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e26:	f107 0308 	add.w	r3, r7, #8
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e34:	463b      	mov	r3, r7
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM4_Init 1 */

    /* USER CODE END TIM4_Init 1 */
    htim4.Instance = TIM4;
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <MX_TIM4_Init+0x94>)
 8000e3e:	4a1e      	ldr	r2, [pc, #120]	; (8000eb8 <MX_TIM4_Init+0x98>)
 8000e40:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = 8400 - 1;
 8000e42:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <MX_TIM4_Init+0x94>)
 8000e44:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000e48:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <MX_TIM4_Init+0x94>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = 5 - 1;
 8000e50:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <MX_TIM4_Init+0x94>)
 8000e52:	2204      	movs	r2, #4
 8000e54:	60da      	str	r2, [r3, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e56:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <MX_TIM4_Init+0x94>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <MX_TIM4_Init+0x94>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e62:	4814      	ldr	r0, [pc, #80]	; (8000eb4 <MX_TIM4_Init+0x94>)
 8000e64:	f003 fa88 	bl	8004378 <HAL_TIM_Base_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM4_Init+0x52>
    {
        Error_Handler();
 8000e6e:	f000 fbd1 	bl	8001614 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e76:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e78:	f107 0308 	add.w	r3, r7, #8
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <MX_TIM4_Init+0x94>)
 8000e80:	f003 ff88 	bl	8004d94 <HAL_TIM_ConfigClockSource>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM4_Init+0x6e>
    {
        Error_Handler();
 8000e8a:	f000 fbc3 	bl	8001614 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e96:	463b      	mov	r3, r7
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4806      	ldr	r0, [pc, #24]	; (8000eb4 <MX_TIM4_Init+0x94>)
 8000e9c:	f004 fb36 	bl	800550c <HAL_TIMEx_MasterConfigSynchronization>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM4_Init+0x8a>
    {
        Error_Handler();
 8000ea6:	f000 fbb5 	bl	8001614 <Error_Handler>
    }
    /* USER CODE BEGIN TIM4_Init 2 */

    /* USER CODE END TIM4_Init 2 */
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000308 	.word	0x20000308
 8000eb8:	40000800 	.word	0x40000800

08000ebc <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM5_Init 0 */

    /* USER CODE END TIM5_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM5_Init 1 */

    /* USER CODE END TIM5_Init 1 */
    htim5.Instance = TIM5;
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <MX_TIM5_Init+0x94>)
 8000eda:	4a1e      	ldr	r2, [pc, #120]	; (8000f54 <MX_TIM5_Init+0x98>)
 8000edc:	601a      	str	r2, [r3, #0]
    htim5.Init.Prescaler = 8400 - 1;
 8000ede:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <MX_TIM5_Init+0x94>)
 8000ee0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000ee4:	605a      	str	r2, [r3, #4]
    htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_TIM5_Init+0x94>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
    htim5.Init.Period = 50 - 1;
 8000eec:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <MX_TIM5_Init+0x94>)
 8000eee:	2231      	movs	r2, #49	; 0x31
 8000ef0:	60da      	str	r2, [r3, #12]
    htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <MX_TIM5_Init+0x94>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
    htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <MX_TIM5_Init+0x94>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000efe:	4814      	ldr	r0, [pc, #80]	; (8000f50 <MX_TIM5_Init+0x94>)
 8000f00:	f003 fa3a 	bl	8004378 <HAL_TIM_Base_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM5_Init+0x52>
    {
        Error_Handler();
 8000f0a:	f000 fb83 	bl	8001614 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f12:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	4619      	mov	r1, r3
 8000f1a:	480d      	ldr	r0, [pc, #52]	; (8000f50 <MX_TIM5_Init+0x94>)
 8000f1c:	f003 ff3a 	bl	8004d94 <HAL_TIM_ConfigClockSource>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM5_Init+0x6e>
    {
        Error_Handler();
 8000f26:	f000 fb75 	bl	8001614 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	4806      	ldr	r0, [pc, #24]	; (8000f50 <MX_TIM5_Init+0x94>)
 8000f38:	f004 fae8 	bl	800550c <HAL_TIMEx_MasterConfigSynchronization>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM5_Init+0x8a>
    {
        Error_Handler();
 8000f42:	f000 fb67 	bl	8001614 <Error_Handler>
    }
    /* USER CODE BEGIN TIM5_Init 2 */

    /* USER CODE END TIM5_Init 2 */
}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000350 	.word	0x20000350
 8000f54:	40000c00 	.word	0x40000c00

08000f58 <MX_TIM10_Init>:
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
    /* USER CODE END TIM10_Init 0 */

    /* USER CODE BEGIN TIM10_Init 1 */

    /* USER CODE END TIM10_Init 1 */
    htim10.Instance = TIM10;
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_TIM10_Init+0x40>)
 8000f5e:	4a0f      	ldr	r2, [pc, #60]	; (8000f9c <MX_TIM10_Init+0x44>)
 8000f60:	601a      	str	r2, [r3, #0]
    htim10.Init.Prescaler = 8400;
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <MX_TIM10_Init+0x40>)
 8000f64:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000f68:	605a      	str	r2, [r3, #4]
    htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <MX_TIM10_Init+0x40>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
    htim10.Init.Period = 40;
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_TIM10_Init+0x40>)
 8000f72:	2228      	movs	r2, #40	; 0x28
 8000f74:	60da      	str	r2, [r3, #12]
    htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <MX_TIM10_Init+0x40>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
    htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_TIM10_Init+0x40>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_TIM10_Init+0x40>)
 8000f84:	f003 f9f8 	bl	8004378 <HAL_TIM_Base_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM10_Init+0x3a>
    {
        Error_Handler();
 8000f8e:	f000 fb41 	bl	8001614 <Error_Handler>
    }
    /* USER CODE BEGIN TIM10_Init 2 */

    /* USER CODE END TIM10_Init 2 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000398 	.word	0x20000398
 8000f9c:	40014400 	.word	0x40014400

08000fa0 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fa6:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <MX_USART1_UART_Init+0x50>)
 8000fa8:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 2000;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000fb0:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fd8:	f004 fb1a 	bl	8005610 <HAL_UART_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_USART1_UART_Init+0x46>
    {
        Error_Handler();
 8000fe2:	f000 fb17 	bl	8001614 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200003e0 	.word	0x200003e0
 8000ff0:	40011000 	.word	0x40011000

08000ff4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <MX_USART2_UART_Init+0x50>)
 8000ffc:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001004:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 800102c:	f004 faf0 	bl	8005610 <HAL_UART_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 8001036:	f000 faed 	bl	8001614 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000424 	.word	0x20000424
 8001044:	40004400 	.word	0x40004400

08001048 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA2_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_DMA_Init+0x3c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <MX_DMA_Init+0x3c>)
 8001058:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_DMA_Init+0x3c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA2_Stream3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	203b      	movs	r0, #59	; 0x3b
 8001070:	f001 fb53 	bl	800271a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001074:	203b      	movs	r0, #59	; 0x3b
 8001076:	f001 fb6c 	bl	8002752 <HAL_NVIC_EnableIRQ>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800

08001088 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b49      	ldr	r3, [pc, #292]	; (80011c8 <MX_GPIO_Init+0x140>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a48      	ldr	r2, [pc, #288]	; (80011c8 <MX_GPIO_Init+0x140>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b46      	ldr	r3, [pc, #280]	; (80011c8 <MX_GPIO_Init+0x140>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b42      	ldr	r3, [pc, #264]	; (80011c8 <MX_GPIO_Init+0x140>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a41      	ldr	r2, [pc, #260]	; (80011c8 <MX_GPIO_Init+0x140>)
 80010c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b3f      	ldr	r3, [pc, #252]	; (80011c8 <MX_GPIO_Init+0x140>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <MX_GPIO_Init+0x140>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a3a      	ldr	r2, [pc, #232]	; (80011c8 <MX_GPIO_Init+0x140>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b38      	ldr	r3, [pc, #224]	; (80011c8 <MX_GPIO_Init+0x140>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b34      	ldr	r3, [pc, #208]	; (80011c8 <MX_GPIO_Init+0x140>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a33      	ldr	r2, [pc, #204]	; (80011c8 <MX_GPIO_Init+0x140>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b31      	ldr	r3, [pc, #196]	; (80011c8 <MX_GPIO_Init+0x140>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	2110      	movs	r1, #16
 8001112:	482e      	ldr	r0, [pc, #184]	; (80011cc <MX_GPIO_Init+0x144>)
 8001114:	f002 f8d6 	bl	80032c4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_6, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	f24f 0146 	movw	r1, #61510	; 0xf046
 800111e:	482c      	ldr	r0, [pc, #176]	; (80011d0 <MX_GPIO_Init+0x148>)
 8001120:	f002 f8d0 	bl	80032c4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800112a:	482a      	ldr	r0, [pc, #168]	; (80011d4 <MX_GPIO_Init+0x14c>)
 800112c:	f002 f8ca 	bl	80032c4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 8001130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001136:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800113a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	4823      	ldr	r0, [pc, #140]	; (80011d4 <MX_GPIO_Init+0x14c>)
 8001148:	f001 ff20 	bl	8002f8c <HAL_GPIO_Init>

    /*Configure GPIO pins : PC2 PC3 PC12 */
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_12;
 800114c:	f241 030c 	movw	r3, #4108	; 0x100c
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	481c      	ldr	r0, [pc, #112]	; (80011d4 <MX_GPIO_Init+0x14c>)
 8001162:	f001 ff13 	bl	8002f8c <HAL_GPIO_Init>

    /*Configure GPIO pin : PA4 */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001166:	2310      	movs	r3, #16
 8001168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	4813      	ldr	r0, [pc, #76]	; (80011cc <MX_GPIO_Init+0x144>)
 800117e:	f001 ff05 	bl	8002f8c <HAL_GPIO_Init>

    /*Configure GPIO pins : PB1 PB2 PB12 PB13
                             PB14 PB15 PB6 */
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_6;
 8001182:	f24f 0346 	movw	r3, #61510	; 0xf046
 8001186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	480d      	ldr	r0, [pc, #52]	; (80011d0 <MX_GPIO_Init+0x148>)
 800119c:	f001 fef6 	bl	8002f8c <HAL_GPIO_Init>

    /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
 80011a0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80011a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	2301      	movs	r3, #1
 80011a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	4806      	ldr	r0, [pc, #24]	; (80011d4 <MX_GPIO_Init+0x14c>)
 80011ba:	f001 fee7 	bl	8002f8c <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	; 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020000 	.word	0x40020000
 80011d0:	40020400 	.word	0x40020400
 80011d4:	40020800 	.word	0x40020800

080011d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b09e      	sub	sp, #120	; 0x78
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
    // Keypad interrupt
    if (htim == &htim5)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a77      	ldr	r2, [pc, #476]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d177      	bne.n	80012d8 <HAL_TIM_PeriodElapsedCallback+0x100>
    {
        for (int row_idx = 0; row_idx < 4; row_idx++)
 80011e8:	2300      	movs	r3, #0
 80011ea:	677b      	str	r3, [r7, #116]	; 0x74
 80011ec:	e050      	b.n	8001290 <HAL_TIM_PeriodElapsedCallback+0xb8>
        {
            GPIO_PinState rowState = HAL_GPIO_ReadPin(GPIOC, rows[row_idx]);
 80011ee:	4a75      	ldr	r2, [pc, #468]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80011f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011f6:	4619      	mov	r1, r3
 80011f8:	4873      	ldr	r0, [pc, #460]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80011fa:	f002 f84b 	bl	8003294 <HAL_GPIO_ReadPin>
 80011fe:	4603      	mov	r3, r0
 8001200:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

            uint8_t btn_state = (rowState == GPIO_PIN_RESET) ? 1 : 0;
 8001204:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001208:	2b00      	cmp	r3, #0
 800120a:	bf0c      	ite	eq
 800120c:	2301      	moveq	r3, #1
 800120e:	2300      	movne	r3, #0
 8001210:	b2db      	uxtb	r3, r3
 8001212:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72

            if (btn_state == 1 && keys[col_idx][row_idx] == 0)
 8001216:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800121a:	2b01      	cmp	r3, #1
 800121c:	d11e      	bne.n	800125c <HAL_TIM_PeriodElapsedCallback+0x84>
 800121e:	4b6b      	ldr	r3, [pc, #428]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a6b      	ldr	r2, [pc, #428]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	441a      	add	r2, r3
 8001228:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800122a:	4413      	add	r3, r2
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d114      	bne.n	800125c <HAL_TIM_PeriodElapsedCallback+0x84>
            {
                keys[col_idx][row_idx] = 1;
 8001232:	4b66      	ldr	r3, [pc, #408]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a66      	ldr	r2, [pc, #408]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	441a      	add	r2, r3
 800123c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800123e:	4413      	add	r3, r2
 8001240:	2201      	movs	r2, #1
 8001242:	701a      	strb	r2, [r3, #0]

                send_command(vals[col_idx][row_idx]);
 8001244:	4b61      	ldr	r3, [pc, #388]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a62      	ldr	r2, [pc, #392]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	441a      	add	r2, r3
 800124e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f000 f90b 	bl	8001470 <send_command>
 800125a:	e016      	b.n	800128a <HAL_TIM_PeriodElapsedCallback+0xb2>
            }
            else if (btn_state == 0 && keys[col_idx][row_idx] == 1)
 800125c:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8001260:	2b00      	cmp	r3, #0
 8001262:	d112      	bne.n	800128a <HAL_TIM_PeriodElapsedCallback+0xb2>
 8001264:	4b59      	ldr	r3, [pc, #356]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a59      	ldr	r2, [pc, #356]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	441a      	add	r2, r3
 800126e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001270:	4413      	add	r3, r2
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d108      	bne.n	800128a <HAL_TIM_PeriodElapsedCallback+0xb2>
            {
                keys[col_idx][row_idx] = 0;
 8001278:	4b54      	ldr	r3, [pc, #336]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a54      	ldr	r2, [pc, #336]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	441a      	add	r2, r3
 8001282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001284:	4413      	add	r3, r2
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
        for (int row_idx = 0; row_idx < 4; row_idx++)
 800128a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800128c:	3301      	adds	r3, #1
 800128e:	677b      	str	r3, [r7, #116]	; 0x74
 8001290:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001292:	2b03      	cmp	r3, #3
 8001294:	ddab      	ble.n	80011ee <HAL_TIM_PeriodElapsedCallback+0x16>
            }
        }

        HAL_GPIO_WritePin(GPIOC, cols[col_idx], GPIO_PIN_RESET);
 8001296:	4b4d      	ldr	r3, [pc, #308]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a4f      	ldr	r2, [pc, #316]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800129c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012a0:	2200      	movs	r2, #0
 80012a2:	4619      	mov	r1, r3
 80012a4:	4848      	ldr	r0, [pc, #288]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80012a6:	f002 f80d 	bl	80032c4 <HAL_GPIO_WritePin>
        if (++col_idx > 3)
 80012aa:	4b48      	ldr	r3, [pc, #288]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	3301      	adds	r3, #1
 80012b0:	4a46      	ldr	r2, [pc, #280]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	4b45      	ldr	r3, [pc, #276]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	dd02      	ble.n	80012c2 <HAL_TIM_PeriodElapsedCallback+0xea>
            col_idx = 0;
 80012bc:	4b43      	ldr	r3, [pc, #268]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOC, cols[col_idx], GPIO_PIN_SET);
 80012c2:	4b42      	ldr	r3, [pc, #264]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a44      	ldr	r2, [pc, #272]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80012c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012cc:	2201      	movs	r2, #1
 80012ce:	4619      	mov	r1, r3
 80012d0:	483d      	ldr	r0, [pc, #244]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80012d2:	f001 fff7 	bl	80032c4 <HAL_GPIO_WritePin>
    }
    else if (htim == &htim10)
    {
        HAL_SPI_Transmit_DMA(&hspi1, matrix[column_index], 2);
    }
}
 80012d6:	e06f      	b.n	80013b8 <HAL_TIM_PeriodElapsedCallback+0x1e0>
    else if (htim == &htim4)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a40      	ldr	r2, [pc, #256]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x204>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d15d      	bne.n	800139c <HAL_TIM_PeriodElapsedCallback+0x1c4>
        char buffer[100] = {0};
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	2260      	movs	r2, #96	; 0x60
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f005 fadb 	bl	80068a8 <memset>
        if (ir_ctrl.current_byte >= 0 && ir_ctrl.current_byte < ir_ctrl.buffer_length)
 80012f2:	4b3b      	ldr	r3, [pc, #236]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db5e      	blt.n	80013b8 <HAL_TIM_PeriodElapsedCallback+0x1e0>
 80012fa:	4b39      	ldr	r3, [pc, #228]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4b38      	ldr	r3, [pc, #224]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	429a      	cmp	r2, r3
 8001304:	da58      	bge.n	80013b8 <HAL_TIM_PeriodElapsedCallback+0x1e0>
            if (ir_ctrl.next_bit == -1)
 8001306:	4b36      	ldr	r3, [pc, #216]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800130e:	d104      	bne.n	800131a <HAL_TIM_PeriodElapsedCallback+0x142>
                HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001310:	2108      	movs	r1, #8
 8001312:	4834      	ldr	r0, [pc, #208]	; (80013e4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001314:	f003 f9ba 	bl	800468c <HAL_TIM_PWM_Start>
 8001318:	e020      	b.n	800135c <HAL_TIM_PeriodElapsedCallback+0x184>
            else if (ir_ctrl.next_bit < 8)
 800131a:	4b31      	ldr	r3, [pc, #196]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b07      	cmp	r3, #7
 8001320:	dc18      	bgt.n	8001354 <HAL_TIM_PeriodElapsedCallback+0x17c>
                if (ir_ctrl.buffer[ir_ctrl.current_byte] >> ir_ctrl.next_bit & 0x1)
 8001322:	4b2f      	ldr	r3, [pc, #188]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	4a2e      	ldr	r2, [pc, #184]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001328:	6812      	ldr	r2, [r2, #0]
 800132a:	4413      	add	r3, r2
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	fa42 f303 	asr.w	r3, r2, r3
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	d004      	beq.n	800134a <HAL_TIM_PeriodElapsedCallback+0x172>
                    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001340:	2108      	movs	r1, #8
 8001342:	4828      	ldr	r0, [pc, #160]	; (80013e4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001344:	f003 fa52 	bl	80047ec <HAL_TIM_PWM_Stop>
 8001348:	e008      	b.n	800135c <HAL_TIM_PeriodElapsedCallback+0x184>
                    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800134a:	2108      	movs	r1, #8
 800134c:	4825      	ldr	r0, [pc, #148]	; (80013e4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800134e:	f003 f99d 	bl	800468c <HAL_TIM_PWM_Start>
 8001352:	e003      	b.n	800135c <HAL_TIM_PeriodElapsedCallback+0x184>
                HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001354:	2108      	movs	r1, #8
 8001356:	4823      	ldr	r0, [pc, #140]	; (80013e4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001358:	f003 fa48 	bl	80047ec <HAL_TIM_PWM_Stop>
            ir_ctrl.next_bit++;
 800135c:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	3301      	adds	r3, #1
 8001362:	4a1f      	ldr	r2, [pc, #124]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001364:	6053      	str	r3, [r2, #4]
            if (ir_ctrl.next_bit == 9 + 1)
 8001366:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b0a      	cmp	r3, #10
 800136c:	d108      	bne.n	8001380 <HAL_TIM_PeriodElapsedCallback+0x1a8>
                ir_ctrl.next_bit = -1;
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001374:	605a      	str	r2, [r3, #4]
                ir_ctrl.current_byte++;
 8001376:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	3301      	adds	r3, #1
 800137c:	4a18      	ldr	r2, [pc, #96]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800137e:	6013      	str	r3, [r2, #0]
            if (ir_ctrl.current_byte == ir_ctrl.buffer_length)
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	429a      	cmp	r2, r3
 800138a:	d115      	bne.n	80013b8 <HAL_TIM_PeriodElapsedCallback+0x1e0>
                ir_ctrl.current_byte = -1;
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800138e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001392:	601a      	str	r2, [r3, #0]
                HAL_TIM_Base_Stop_IT(&htim4);
 8001394:	4811      	ldr	r0, [pc, #68]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001396:	f003 f8fb 	bl	8004590 <HAL_TIM_Base_Stop_IT>
}
 800139a:	e00d      	b.n	80013b8 <HAL_TIM_PeriodElapsedCallback+0x1e0>
    else if (htim == &htim10)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d109      	bne.n	80013b8 <HAL_TIM_PeriodElapsedCallback+0x1e0>
        HAL_SPI_Transmit_DMA(&hspi1, matrix[column_index], 2);
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x214>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4a11      	ldr	r2, [pc, #68]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80013ac:	4413      	add	r3, r2
 80013ae:	2202      	movs	r2, #2
 80013b0:	4619      	mov	r1, r3
 80013b2:	4810      	ldr	r0, [pc, #64]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80013b4:	f002 fcc2 	bl	8003d3c <HAL_SPI_Transmit_DMA>
}
 80013b8:	bf00      	nop
 80013ba:	3778      	adds	r7, #120	; 0x78
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000350 	.word	0x20000350
 80013c4:	20000028 	.word	0x20000028
 80013c8:	40020800 	.word	0x40020800
 80013cc:	20000468 	.word	0x20000468
 80013d0:	2000046c 	.word	0x2000046c
 80013d4:	20000038 	.word	0x20000038
 80013d8:	20000030 	.word	0x20000030
 80013dc:	20000308 	.word	0x20000308
 80013e0:	2000004c 	.word	0x2000004c
 80013e4:	20000278 	.word	0x20000278
 80013e8:	20000398 	.word	0x20000398
 80013ec:	20000480 	.word	0x20000480
 80013f0:	20000484 	.word	0x20000484
 80013f4:	200001c0 	.word	0x200001c0

080013f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
    if (huart == &huart1)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a08      	ldr	r2, [pc, #32]	; (8001424 <HAL_UART_RxCpltCallback+0x2c>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d109      	bne.n	800141c <HAL_UART_RxCpltCallback+0x24>
    {
        // Parse what we receive from the IR link
        parse_IR_byte(uart1_buffer);
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <HAL_UART_RxCpltCallback+0x30>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f000 f875 	bl	80014fc <parse_IR_byte>

        // Setup the peripheral to receive another byte
        HAL_UART_Receive_IT(&huart1, &uart1_buffer, 1);
 8001412:	2201      	movs	r2, #1
 8001414:	4904      	ldr	r1, [pc, #16]	; (8001428 <HAL_UART_RxCpltCallback+0x30>)
 8001416:	4803      	ldr	r0, [pc, #12]	; (8001424 <HAL_UART_RxCpltCallback+0x2c>)
 8001418:	f004 f9d9 	bl	80057ce <HAL_UART_Receive_IT>
    }
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200003e0 	.word	0x200003e0
 8001428:	2000047e 	.word	0x2000047e

0800142c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001434:	2201      	movs	r2, #1
 8001436:	2140      	movs	r1, #64	; 0x40
 8001438:	480b      	ldr	r0, [pc, #44]	; (8001468 <HAL_SPI_TxCpltCallback+0x3c>)
 800143a:	f001 ff43 	bl	80032c4 <HAL_GPIO_WritePin>
    if (++column_index > 4)
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_SPI_TxCpltCallback+0x40>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	3301      	adds	r3, #1
 8001444:	4a09      	ldr	r2, [pc, #36]	; (800146c <HAL_SPI_TxCpltCallback+0x40>)
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <HAL_SPI_TxCpltCallback+0x40>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b04      	cmp	r3, #4
 800144e:	dd02      	ble.n	8001456 <HAL_SPI_TxCpltCallback+0x2a>
        column_index = 0;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_SPI_TxCpltCallback+0x40>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2140      	movs	r1, #64	; 0x40
 800145a:	4803      	ldr	r0, [pc, #12]	; (8001468 <HAL_SPI_TxCpltCallback+0x3c>)
 800145c:	f001 ff32 	bl	80032c4 <HAL_GPIO_WritePin>
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40020400 	.word	0x40020400
 800146c:	20000480 	.word	0x20000480

08001470 <send_command>:

void send_command(char payload)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
    char buffer[5] = ":  \0";
 800147a:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <send_command+0x40>)
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001484:	6018      	str	r0, [r3, #0]
 8001486:	3304      	adds	r3, #4
 8001488:	7019      	strb	r1, [r3, #0]
    buffer[1] = destination_id + '0';
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <send_command+0x44>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	3330      	adds	r3, #48	; 0x30
 8001492:	b2db      	uxtb	r3, r3
 8001494:	727b      	strb	r3, [r7, #9]
    buffer[2] = payload;
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	72bb      	strb	r3, [r7, #10]
    send_IR_string((uint8_t *)buffer, 3);
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	2103      	movs	r1, #3
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 f809 	bl	80014b8 <send_IR_string>
}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	080070b4 	.word	0x080070b4
 80014b4:	20000048 	.word	0x20000048

080014b8 <send_IR_string>:

void send_IR_string(uint8_t *data, int length)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
    memcpy(ir_ctrl.buffer, data, length);
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <send_IR_string+0x3c>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f005 fa30 	bl	8006930 <memcpy>
    ir_ctrl.buffer_length = length;
 80014d0:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <send_IR_string+0x3c>)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	60d3      	str	r3, [r2, #12]
    ir_ctrl.current_byte = 0;
 80014d6:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <send_IR_string+0x3c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
    ir_ctrl.next_bit = -1;
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <send_IR_string+0x3c>)
 80014de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014e2:	605a      	str	r2, [r3, #4]

    HAL_TIM_Base_Start_IT(&htim4);
 80014e4:	4804      	ldr	r0, [pc, #16]	; (80014f8 <send_IR_string+0x40>)
 80014e6:	f002 fff1 	bl	80044cc <HAL_TIM_Base_Start_IT>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000004c 	.word	0x2000004c
 80014f8:	20000308 	.word	0x20000308

080014fc <parse_IR_byte>:

void parse_IR_byte(uint8_t byte)
{
 80014fc:	b5b0      	push	{r4, r5, r7, lr}
 80014fe:	b08e      	sub	sp, #56	; 0x38
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
    if (byte == ':')
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	2b3a      	cmp	r3, #58	; 0x3a
 800150a:	d106      	bne.n	800151a <parse_IR_byte+0x1e>
    {
        HAL_UART_Transmit(&huart2, "\n\r", 2, -1);
 800150c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001510:	2202      	movs	r2, #2
 8001512:	4939      	ldr	r1, [pc, #228]	; (80015f8 <parse_IR_byte+0xfc>)
 8001514:	4839      	ldr	r0, [pc, #228]	; (80015fc <parse_IR_byte+0x100>)
 8001516:	f004 f8c8 	bl	80056aa <HAL_UART_Transmit>
    }
    HAL_UART_Transmit(&huart2, &byte, 1, -1);
 800151a:	1df9      	adds	r1, r7, #7
 800151c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001520:	2201      	movs	r2, #1
 8001522:	4836      	ldr	r0, [pc, #216]	; (80015fc <parse_IR_byte+0x100>)
 8001524:	f004 f8c1 	bl	80056aa <HAL_UART_Transmit>
     * 2: Waiting for char
     */
    static int state = 0;

    // At any moment if we receive ':' (0d58) we reset the state
    if (byte == ':')
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	2b3a      	cmp	r3, #58	; 0x3a
 800152c:	d103      	bne.n	8001536 <parse_IR_byte+0x3a>
    {
        state = 1;
 800152e:	4b34      	ldr	r3, [pc, #208]	; (8001600 <parse_IR_byte+0x104>)
 8001530:	2201      	movs	r2, #1
 8001532:	601a      	str	r2, [r3, #0]
        memcpy(matrix, ledmatrix_symbols[symbol_idx], sizeof(matrix));

        // Reset the state since the message is finished
        state = 0;
    }
}
 8001534:	e05b      	b.n	80015ee <parse_IR_byte+0xf2>
    else if (state == 1)
 8001536:	4b32      	ldr	r3, [pc, #200]	; (8001600 <parse_IR_byte+0x104>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d12e      	bne.n	800159c <parse_IR_byte+0xa0>
        uint8_t msg_dst_id = byte - '0';
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	3b30      	subs	r3, #48	; 0x30
 8001542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (msg_dst_id == board_id || msg_dst_id == BOARDS)
 8001546:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800154a:	b29a      	uxth	r2, r3
 800154c:	4b2d      	ldr	r3, [pc, #180]	; (8001604 <parse_IR_byte+0x108>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d003      	beq.n	800155c <parse_IR_byte+0x60>
 8001554:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001558:	2b06      	cmp	r3, #6
 800155a:	d103      	bne.n	8001564 <parse_IR_byte+0x68>
            state = 2;
 800155c:	4b28      	ldr	r3, [pc, #160]	; (8001600 <parse_IR_byte+0x104>)
 800155e:	2202      	movs	r2, #2
 8001560:	601a      	str	r2, [r3, #0]
}
 8001562:	e044      	b.n	80015ee <parse_IR_byte+0xf2>
            state = 0;
 8001564:	4b26      	ldr	r3, [pc, #152]	; (8001600 <parse_IR_byte+0x104>)
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
            char buffer[] = "\n\rReceived message for another board\n\r";
 800156a:	4b27      	ldr	r3, [pc, #156]	; (8001608 <parse_IR_byte+0x10c>)
 800156c:	f107 040c 	add.w	r4, r7, #12
 8001570:	461d      	mov	r5, r3
 8001572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800157a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800157e:	6020      	str	r0, [r4, #0]
 8001580:	3404      	adds	r4, #4
 8001582:	8021      	strh	r1, [r4, #0]
 8001584:	3402      	adds	r4, #2
 8001586:	0c0b      	lsrs	r3, r1, #16
 8001588:	7023      	strb	r3, [r4, #0]
            HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), -1);
 800158a:	f107 010c 	add.w	r1, r7, #12
 800158e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001592:	2227      	movs	r2, #39	; 0x27
 8001594:	4819      	ldr	r0, [pc, #100]	; (80015fc <parse_IR_byte+0x100>)
 8001596:	f004 f888 	bl	80056aa <HAL_UART_Transmit>
}
 800159a:	e028      	b.n	80015ee <parse_IR_byte+0xf2>
    else if (state == 2)
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <parse_IR_byte+0x104>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d124      	bne.n	80015ee <parse_IR_byte+0xf2>
        int symbol_idx = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	637b      	str	r3, [r7, #52]	; 0x34
        if (byte >= '0' && byte <= '9')
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	2b2f      	cmp	r3, #47	; 0x2f
 80015ac:	d906      	bls.n	80015bc <parse_IR_byte+0xc0>
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	2b39      	cmp	r3, #57	; 0x39
 80015b2:	d803      	bhi.n	80015bc <parse_IR_byte+0xc0>
            symbol_idx = byte - '0';
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	3b30      	subs	r3, #48	; 0x30
 80015b8:	637b      	str	r3, [r7, #52]	; 0x34
 80015ba:	e008      	b.n	80015ce <parse_IR_byte+0xd2>
        else if (byte >= 'A' && byte <= 'F')
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	2b40      	cmp	r3, #64	; 0x40
 80015c0:	d905      	bls.n	80015ce <parse_IR_byte+0xd2>
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2b46      	cmp	r3, #70	; 0x46
 80015c6:	d802      	bhi.n	80015ce <parse_IR_byte+0xd2>
            symbol_idx = byte - 'A' + 10;
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	3b37      	subs	r3, #55	; 0x37
 80015cc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy(matrix, ledmatrix_symbols[symbol_idx], sizeof(matrix));
 80015ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4a0c      	ldr	r2, [pc, #48]	; (800160c <parse_IR_byte+0x110>)
 80015da:	441a      	add	r2, r3
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <parse_IR_byte+0x114>)
 80015de:	6810      	ldr	r0, [r2, #0]
 80015e0:	6851      	ldr	r1, [r2, #4]
 80015e2:	c303      	stmia	r3!, {r0, r1}
 80015e4:	8912      	ldrh	r2, [r2, #8]
 80015e6:	801a      	strh	r2, [r3, #0]
        state = 0;
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <parse_IR_byte+0x104>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
}
 80015ee:	bf00      	nop
 80015f0:	3738      	adds	r7, #56	; 0x38
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bdb0      	pop	{r4, r5, r7, pc}
 80015f6:	bf00      	nop
 80015f8:	080070bc 	.word	0x080070bc
 80015fc:	20000424 	.word	0x20000424
 8001600:	20000490 	.word	0x20000490
 8001604:	2000047c 	.word	0x2000047c
 8001608:	080070c0 	.word	0x080070c0
 800160c:	2000005c 	.word	0x2000005c
 8001610:	20000484 	.word	0x20000484

08001614 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001618:	b672      	cpsid	i
}
 800161a:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 800161c:	e7fe      	b.n	800161c <Error_Handler+0x8>
	...

08001620 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_MspInit+0x4c>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	4a0f      	ldr	r2, [pc, #60]	; (800166c <HAL_MspInit+0x4c>)
 8001630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001634:	6453      	str	r3, [r2, #68]	; 0x44
 8001636:	4b0d      	ldr	r3, [pc, #52]	; (800166c <HAL_MspInit+0x4c>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	603b      	str	r3, [r7, #0]
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_MspInit+0x4c>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a08      	ldr	r2, [pc, #32]	; (800166c <HAL_MspInit+0x4c>)
 800164c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_MspInit+0x4c>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 800165e:	2006      	movs	r0, #6
 8001660:	f001 f850 	bl	8002704 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40023800 	.word	0x40023800

08001670 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a17      	ldr	r2, [pc, #92]	; (80016ec <HAL_ADC_MspInit+0x7c>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d127      	bne.n	80016e2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <HAL_ADC_MspInit+0x80>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	4a15      	ldr	r2, [pc, #84]	; (80016f0 <HAL_ADC_MspInit+0x80>)
 800169c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a0:	6453      	str	r3, [r2, #68]	; 0x44
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <HAL_ADC_MspInit+0x80>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <HAL_ADC_MspInit+0x80>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <HAL_ADC_MspInit+0x80>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <HAL_ADC_MspInit+0x80>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016ca:	2302      	movs	r3, #2
 80016cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ce:	2303      	movs	r3, #3
 80016d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	4805      	ldr	r0, [pc, #20]	; (80016f4 <HAL_ADC_MspInit+0x84>)
 80016de:	f001 fc55 	bl	8002f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016e2:	bf00      	nop
 80016e4:	3728      	adds	r7, #40	; 0x28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40012000 	.word	0x40012000
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40020000 	.word	0x40020000

080016f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	; 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a34      	ldr	r2, [pc, #208]	; (80017e8 <HAL_SPI_MspInit+0xf0>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d161      	bne.n	80017de <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	4b33      	ldr	r3, [pc, #204]	; (80017ec <HAL_SPI_MspInit+0xf4>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	4a32      	ldr	r2, [pc, #200]	; (80017ec <HAL_SPI_MspInit+0xf4>)
 8001724:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001728:	6453      	str	r3, [r2, #68]	; 0x44
 800172a:	4b30      	ldr	r3, [pc, #192]	; (80017ec <HAL_SPI_MspInit+0xf4>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b2c      	ldr	r3, [pc, #176]	; (80017ec <HAL_SPI_MspInit+0xf4>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a2b      	ldr	r2, [pc, #172]	; (80017ec <HAL_SPI_MspInit+0xf4>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b29      	ldr	r3, [pc, #164]	; (80017ec <HAL_SPI_MspInit+0xf4>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001752:	23a0      	movs	r3, #160	; 0xa0
 8001754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175e:	2303      	movs	r3, #3
 8001760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001762:	2305      	movs	r3, #5
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	4820      	ldr	r0, [pc, #128]	; (80017f0 <HAL_SPI_MspInit+0xf8>)
 800176e:	f001 fc0d 	bl	8002f8c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001772:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <HAL_SPI_MspInit+0xfc>)
 8001774:	4a20      	ldr	r2, [pc, #128]	; (80017f8 <HAL_SPI_MspInit+0x100>)
 8001776:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001778:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <HAL_SPI_MspInit+0xfc>)
 800177a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800177e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001780:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <HAL_SPI_MspInit+0xfc>)
 8001782:	2240      	movs	r2, #64	; 0x40
 8001784:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001786:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <HAL_SPI_MspInit+0xfc>)
 8001788:	2200      	movs	r2, #0
 800178a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_SPI_MspInit+0xfc>)
 800178e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001792:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001794:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <HAL_SPI_MspInit+0xfc>)
 8001796:	2200      	movs	r2, #0
 8001798:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <HAL_SPI_MspInit+0xfc>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <HAL_SPI_MspInit+0xfc>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017a6:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <HAL_SPI_MspInit+0xfc>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <HAL_SPI_MspInit+0xfc>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80017b2:	4810      	ldr	r0, [pc, #64]	; (80017f4 <HAL_SPI_MspInit+0xfc>)
 80017b4:	f000 ffe8 	bl	8002788 <HAL_DMA_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80017be:	f7ff ff29 	bl	8001614 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <HAL_SPI_MspInit+0xfc>)
 80017c6:	649a      	str	r2, [r3, #72]	; 0x48
 80017c8:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <HAL_SPI_MspInit+0xfc>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2100      	movs	r1, #0
 80017d2:	2023      	movs	r0, #35	; 0x23
 80017d4:	f000 ffa1 	bl	800271a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80017d8:	2023      	movs	r0, #35	; 0x23
 80017da:	f000 ffba 	bl	8002752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017de:	bf00      	nop
 80017e0:	3728      	adds	r7, #40	; 0x28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40013000 	.word	0x40013000
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020000 	.word	0x40020000
 80017f4:	20000218 	.word	0x20000218
 80017f8:	40026458 	.word	0x40026458

080017fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800180c:	d115      	bne.n	800183a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <HAL_TIM_PWM_MspInit+0x48>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <HAL_TIM_PWM_MspInit+0x48>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6413      	str	r3, [r2, #64]	; 0x40
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_TIM_PWM_MspInit+0x48>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2100      	movs	r1, #0
 800182e:	201c      	movs	r0, #28
 8001830:	f000 ff73 	bl	800271a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001834:	201c      	movs	r0, #28
 8001836:	f000 ff8c 	bl	8002752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a19      	ldr	r2, [pc, #100]	; (80018cc <HAL_TIM_Encoder_MspInit+0x84>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d12b      	bne.n	80018c2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a17      	ldr	r2, [pc, #92]	; (80018d0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	6413      	str	r3, [r2, #64]	; 0x40
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <HAL_TIM_Encoder_MspInit+0x88>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <HAL_TIM_Encoder_MspInit+0x88>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a10      	ldr	r2, [pc, #64]	; (80018d0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001890:	f043 0304 	orr.w	r3, r3, #4
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018a2:	23c0      	movs	r3, #192	; 0xc0
 80018a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018b2:	2302      	movs	r3, #2
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4619      	mov	r1, r3
 80018bc:	4805      	ldr	r0, [pc, #20]	; (80018d4 <HAL_TIM_Encoder_MspInit+0x8c>)
 80018be:	f001 fb65 	bl	8002f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018c2:	bf00      	nop
 80018c4:	3728      	adds	r7, #40	; 0x28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40000400 	.word	0x40000400
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40020800 	.word	0x40020800

080018d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a2a      	ldr	r2, [pc, #168]	; (8001990 <HAL_TIM_Base_MspInit+0xb8>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d116      	bne.n	8001918 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	4b29      	ldr	r3, [pc, #164]	; (8001994 <HAL_TIM_Base_MspInit+0xbc>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	4a28      	ldr	r2, [pc, #160]	; (8001994 <HAL_TIM_Base_MspInit+0xbc>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
 80018fa:	4b26      	ldr	r3, [pc, #152]	; (8001994 <HAL_TIM_Base_MspInit+0xbc>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2101      	movs	r1, #1
 800190a:	201e      	movs	r0, #30
 800190c:	f000 ff05 	bl	800271a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001910:	201e      	movs	r0, #30
 8001912:	f000 ff1e 	bl	8002752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001916:	e036      	b.n	8001986 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a1e      	ldr	r2, [pc, #120]	; (8001998 <HAL_TIM_Base_MspInit+0xc0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d116      	bne.n	8001950 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <HAL_TIM_Base_MspInit+0xbc>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	4a1a      	ldr	r2, [pc, #104]	; (8001994 <HAL_TIM_Base_MspInit+0xbc>)
 800192c:	f043 0308 	orr.w	r3, r3, #8
 8001930:	6413      	str	r3, [r2, #64]	; 0x40
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <HAL_TIM_Base_MspInit+0xbc>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800193e:	2200      	movs	r2, #0
 8001940:	2100      	movs	r1, #0
 8001942:	2032      	movs	r0, #50	; 0x32
 8001944:	f000 fee9 	bl	800271a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001948:	2032      	movs	r0, #50	; 0x32
 800194a:	f000 ff02 	bl	8002752 <HAL_NVIC_EnableIRQ>
}
 800194e:	e01a      	b.n	8001986 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a11      	ldr	r2, [pc, #68]	; (800199c <HAL_TIM_Base_MspInit+0xc4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d115      	bne.n	8001986 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <HAL_TIM_Base_MspInit+0xbc>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4a0c      	ldr	r2, [pc, #48]	; (8001994 <HAL_TIM_Base_MspInit+0xbc>)
 8001964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <HAL_TIM_Base_MspInit+0xbc>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2100      	movs	r1, #0
 800197a:	2019      	movs	r0, #25
 800197c:	f000 fecd 	bl	800271a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001980:	2019      	movs	r0, #25
 8001982:	f000 fee6 	bl	8002752 <HAL_NVIC_EnableIRQ>
}
 8001986:	bf00      	nop
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40000800 	.word	0x40000800
 8001994:	40023800 	.word	0x40023800
 8001998:	40000c00 	.word	0x40000c00
 800199c:	40014400 	.word	0x40014400

080019a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c0:	d11e      	bne.n	8001a00 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <HAL_TIM_MspPostInit+0x68>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a0f      	ldr	r2, [pc, #60]	; (8001a08 <HAL_TIM_MspPostInit+0x68>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <HAL_TIM_MspPostInit+0x68>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e4:	2302      	movs	r3, #2
 80019e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019f0:	2301      	movs	r3, #1
 80019f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	4619      	mov	r1, r3
 80019fa:	4804      	ldr	r0, [pc, #16]	; (8001a0c <HAL_TIM_MspPostInit+0x6c>)
 80019fc:	f001 fac6 	bl	8002f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a00:	bf00      	nop
 8001a02:	3720      	adds	r7, #32
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020400 	.word	0x40020400

08001a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08c      	sub	sp, #48	; 0x30
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a36      	ldr	r2, [pc, #216]	; (8001b08 <HAL_UART_MspInit+0xf8>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d135      	bne.n	8001a9e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	61bb      	str	r3, [r7, #24]
 8001a36:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <HAL_UART_MspInit+0xfc>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	4a34      	ldr	r2, [pc, #208]	; (8001b0c <HAL_UART_MspInit+0xfc>)
 8001a3c:	f043 0310 	orr.w	r3, r3, #16
 8001a40:	6453      	str	r3, [r2, #68]	; 0x44
 8001a42:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <HAL_UART_MspInit+0xfc>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	61bb      	str	r3, [r7, #24]
 8001a4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <HAL_UART_MspInit+0xfc>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a2d      	ldr	r2, [pc, #180]	; (8001b0c <HAL_UART_MspInit+0xfc>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <HAL_UART_MspInit+0xfc>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a7c:	2307      	movs	r3, #7
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a80:	f107 031c 	add.w	r3, r7, #28
 8001a84:	4619      	mov	r1, r3
 8001a86:	4822      	ldr	r0, [pc, #136]	; (8001b10 <HAL_UART_MspInit+0x100>)
 8001a88:	f001 fa80 	bl	8002f8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2100      	movs	r1, #0
 8001a90:	2025      	movs	r0, #37	; 0x25
 8001a92:	f000 fe42 	bl	800271a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a96:	2025      	movs	r0, #37	; 0x25
 8001a98:	f000 fe5b 	bl	8002752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a9c:	e030      	b.n	8001b00 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a1c      	ldr	r2, [pc, #112]	; (8001b14 <HAL_UART_MspInit+0x104>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d12b      	bne.n	8001b00 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <HAL_UART_MspInit+0xfc>)
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	4a16      	ldr	r2, [pc, #88]	; (8001b0c <HAL_UART_MspInit+0xfc>)
 8001ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <HAL_UART_MspInit+0xfc>)
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <HAL_UART_MspInit+0xfc>)
 8001aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001acc:	4a0f      	ldr	r2, [pc, #60]	; (8001b0c <HAL_UART_MspInit+0xfc>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad4:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <HAL_UART_MspInit+0xfc>)
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ae0:	230c      	movs	r3, #12
 8001ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001af0:	2307      	movs	r3, #7
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	4619      	mov	r1, r3
 8001afa:	4805      	ldr	r0, [pc, #20]	; (8001b10 <HAL_UART_MspInit+0x100>)
 8001afc:	f001 fa46 	bl	8002f8c <HAL_GPIO_Init>
}
 8001b00:	bf00      	nop
 8001b02:	3730      	adds	r7, #48	; 0x30
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40011000 	.word	0x40011000
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020000 	.word	0x40020000
 8001b14:	40004400 	.word	0x40004400

08001b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001b1c:	e7fe      	b.n	8001b1c <NMI_Handler+0x4>

08001b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b22:	e7fe      	b.n	8001b22 <HardFault_Handler+0x4>

08001b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <MemManage_Handler+0x4>

08001b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2e:	e7fe      	b.n	8001b2e <BusFault_Handler+0x4>

08001b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <UsageFault_Handler+0x4>

08001b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b64:	f000 f90c 	bl	8001d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001b70:	4802      	ldr	r0, [pc, #8]	; (8001b7c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b72:	f002 ff45 	bl	8004a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000398 	.word	0x20000398

08001b80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b84:	4802      	ldr	r0, [pc, #8]	; (8001b90 <TIM2_IRQHandler+0x10>)
 8001b86:	f002 ff3b 	bl	8004a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000278 	.word	0x20000278

08001b94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b98:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <TIM4_IRQHandler+0x10>)
 8001b9a:	f002 ff31 	bl	8004a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000308 	.word	0x20000308

08001ba8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <SPI1_IRQHandler+0x10>)
 8001bae:	f002 f97b 	bl	8003ea8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200001c0 	.word	0x200001c0

08001bbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <USART1_IRQHandler+0x10>)
 8001bc2:	f003 fe35 	bl	8005830 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200003e0 	.word	0x200003e0

08001bd0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <TIM5_IRQHandler+0x10>)
 8001bd6:	f002 ff13 	bl	8004a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000350 	.word	0x20000350

08001be4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <DMA2_Stream3_IRQHandler+0x10>)
 8001bea:	f000 ff65 	bl	8002ab8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000218 	.word	0x20000218

08001bf8 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001c00:	4a14      	ldr	r2, [pc, #80]	; (8001c54 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001c0c:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <_sbrk+0x64>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d102      	bne.n	8001c1a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <_sbrk+0x64>)
 8001c16:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <_sbrk+0x68>)
 8001c18:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <_sbrk+0x64>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d207      	bcs.n	8001c38 <_sbrk+0x40>
		errno = ENOMEM;
 8001c28:	f004 fe56 	bl	80068d8 <__errno>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	220c      	movs	r2, #12
 8001c30:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c36:	e009      	b.n	8001c4c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <_sbrk+0x64>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001c3e:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <_sbrk+0x64>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	4a05      	ldr	r2, [pc, #20]	; (8001c5c <_sbrk+0x64>)
 8001c48:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20018000 	.word	0x20018000
 8001c58:	00000400 	.word	0x00000400
 8001c5c:	20000494 	.word	0x20000494
 8001c60:	200005e8 	.word	0x200005e8

08001c64 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <SystemInit+0x20>)
 8001c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c6e:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <SystemInit+0x20>)
 8001c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c8c:	480d      	ldr	r0, [pc, #52]	; (8001cc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c8e:	490e      	ldr	r1, [pc, #56]	; (8001cc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c90:	4a0e      	ldr	r2, [pc, #56]	; (8001ccc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c94:	e002      	b.n	8001c9c <LoopCopyDataInit>

08001c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c9a:	3304      	adds	r3, #4

08001c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca0:	d3f9      	bcc.n	8001c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ca2:	4a0b      	ldr	r2, [pc, #44]	; (8001cd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ca4:	4c0b      	ldr	r4, [pc, #44]	; (8001cd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca8:	e001      	b.n	8001cae <LoopFillZerobss>

08001caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cac:	3204      	adds	r2, #4

08001cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb0:	d3fb      	bcc.n	8001caa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cb2:	f7ff ffd7 	bl	8001c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cb6:	f004 fe15 	bl	80068e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cba:	f7fe fe67 	bl	800098c <main>
  bx  lr    
 8001cbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cc0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc8:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8001ccc:	0800714c 	.word	0x0800714c
  ldr r2, =_sbss
 8001cd0:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8001cd4:	200005e4 	.word	0x200005e4

08001cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cd8:	e7fe      	b.n	8001cd8 <ADC_IRQHandler>
	...

08001cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ce0:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <HAL_Init+0x40>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a0d      	ldr	r2, [pc, #52]	; (8001d1c <HAL_Init+0x40>)
 8001ce6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <HAL_Init+0x40>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <HAL_Init+0x40>)
 8001cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <HAL_Init+0x40>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a07      	ldr	r2, [pc, #28]	; (8001d1c <HAL_Init+0x40>)
 8001cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d04:	2003      	movs	r0, #3
 8001d06:	f000 fcfd 	bl	8002704 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f000 f808 	bl	8001d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d10:	f7ff fc86 	bl	8001620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023c00 	.word	0x40023c00

08001d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_InitTick+0x54>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_InitTick+0x58>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	4619      	mov	r1, r3
 8001d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 fd15 	bl	800276e <HAL_SYSTICK_Config>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e00e      	b.n	8001d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b0f      	cmp	r3, #15
 8001d52:	d80a      	bhi.n	8001d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d54:	2200      	movs	r2, #0
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d5c:	f000 fcdd 	bl	800271a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d60:	4a06      	ldr	r2, [pc, #24]	; (8001d7c <HAL_InitTick+0x5c>)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	e000      	b.n	8001d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	200000fc 	.word	0x200000fc
 8001d78:	20000104 	.word	0x20000104
 8001d7c:	20000100 	.word	0x20000100

08001d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_IncTick+0x20>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_IncTick+0x24>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4413      	add	r3, r2
 8001d90:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <HAL_IncTick+0x24>)
 8001d92:	6013      	str	r3, [r2, #0]
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000104 	.word	0x20000104
 8001da4:	20000498 	.word	0x20000498

08001da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return uwTick;
 8001dac:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <HAL_GetTick+0x14>)
 8001dae:	681b      	ldr	r3, [r3, #0]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20000498 	.word	0x20000498

08001dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dc8:	f7ff ffee 	bl	8001da8 <HAL_GetTick>
 8001dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dd8:	d005      	beq.n	8001de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_Delay+0x44>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4413      	add	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001de6:	bf00      	nop
 8001de8:	f7ff ffde 	bl	8001da8 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d8f7      	bhi.n	8001de8 <HAL_Delay+0x28>
  {
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000104 	.word	0x20000104

08001e08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e10:	2300      	movs	r3, #0
 8001e12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e033      	b.n	8001e86 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d109      	bne.n	8001e3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff fc22 	bl	8001670 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d118      	bne.n	8001e78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e4e:	f023 0302 	bic.w	r3, r3, #2
 8001e52:	f043 0202 	orr.w	r2, r3, #2
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 fa86 	bl	800236c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f023 0303 	bic.w	r3, r3, #3
 8001e6e:	f043 0201 	orr.w	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40
 8001e76:	e001      	b.n	8001e7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_ADC_Start+0x1a>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e097      	b.n	8001fda <HAL_ADC_Start+0x14a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d018      	beq.n	8001ef2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ed0:	4b45      	ldr	r3, [pc, #276]	; (8001fe8 <HAL_ADC_Start+0x158>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a45      	ldr	r2, [pc, #276]	; (8001fec <HAL_ADC_Start+0x15c>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	0c9a      	lsrs	r2, r3, #18
 8001edc:	4613      	mov	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4413      	add	r3, r2
 8001ee2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ee4:	e002      	b.n	8001eec <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f9      	bne.n	8001ee6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d15f      	bne.n	8001fc0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d007      	beq.n	8001f32 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f3e:	d106      	bne.n	8001f4e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f44:	f023 0206 	bic.w	r2, r3, #6
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	645a      	str	r2, [r3, #68]	; 0x44
 8001f4c:	e002      	b.n	8001f54 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f5c:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <HAL_ADC_Start+0x160>)
 8001f5e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f68:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10f      	bne.n	8001f96 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d129      	bne.n	8001fd8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	e020      	b.n	8001fd8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a16      	ldr	r2, [pc, #88]	; (8001ff4 <HAL_ADC_Start+0x164>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d11b      	bne.n	8001fd8 <HAL_ADC_Start+0x148>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d114      	bne.n	8001fd8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fbc:	609a      	str	r2, [r3, #8]
 8001fbe:	e00b      	b.n	8001fd8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	f043 0210 	orr.w	r2, r3, #16
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd0:	f043 0201 	orr.w	r2, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	200000fc 	.word	0x200000fc
 8001fec:	431bde83 	.word	0x431bde83
 8001ff0:	40012300 	.word	0x40012300
 8001ff4:	40012000 	.word	0x40012000

08001ff8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002014:	d113      	bne.n	800203e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002024:	d10b      	bne.n	800203e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f043 0220 	orr.w	r2, r3, #32
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e063      	b.n	8002106 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800203e:	f7ff feb3 	bl	8001da8 <HAL_GetTick>
 8002042:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002044:	e021      	b.n	800208a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800204c:	d01d      	beq.n	800208a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <HAL_ADC_PollForConversion+0x6c>
 8002054:	f7ff fea8 	bl	8001da8 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d212      	bcs.n	800208a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b02      	cmp	r3, #2
 8002070:	d00b      	beq.n	800208a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f043 0204 	orr.w	r2, r3, #4
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e03d      	b.n	8002106 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b02      	cmp	r3, #2
 8002096:	d1d6      	bne.n	8002046 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0212 	mvn.w	r2, #18
 80020a0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d123      	bne.n	8002104 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d11f      	bne.n	8002104 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d006      	beq.n	80020e0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d111      	bne.n	8002104 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d105      	bne.n	8002104 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	f043 0201 	orr.w	r2, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x1c>
 8002140:	2302      	movs	r3, #2
 8002142:	e105      	b.n	8002350 <HAL_ADC_ConfigChannel+0x228>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b09      	cmp	r3, #9
 8002152:	d925      	bls.n	80021a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68d9      	ldr	r1, [r3, #12]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	b29b      	uxth	r3, r3
 8002160:	461a      	mov	r2, r3
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	3b1e      	subs	r3, #30
 800216a:	2207      	movs	r2, #7
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43da      	mvns	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	400a      	ands	r2, r1
 8002178:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68d9      	ldr	r1, [r3, #12]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	b29b      	uxth	r3, r3
 800218a:	4618      	mov	r0, r3
 800218c:	4603      	mov	r3, r0
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4403      	add	r3, r0
 8002192:	3b1e      	subs	r3, #30
 8002194:	409a      	lsls	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	e022      	b.n	80021e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6919      	ldr	r1, [r3, #16]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	4613      	mov	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4413      	add	r3, r2
 80021b4:	2207      	movs	r2, #7
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43da      	mvns	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	400a      	ands	r2, r1
 80021c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6919      	ldr	r1, [r3, #16]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	4618      	mov	r0, r3
 80021d6:	4603      	mov	r3, r0
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	4403      	add	r3, r0
 80021dc:	409a      	lsls	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	d824      	bhi.n	8002238 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	3b05      	subs	r3, #5
 8002200:	221f      	movs	r2, #31
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	400a      	ands	r2, r1
 800220e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	4618      	mov	r0, r3
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	3b05      	subs	r3, #5
 800222a:	fa00 f203 	lsl.w	r2, r0, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	635a      	str	r2, [r3, #52]	; 0x34
 8002236:	e04c      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b0c      	cmp	r3, #12
 800223e:	d824      	bhi.n	800228a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	3b23      	subs	r3, #35	; 0x23
 8002252:	221f      	movs	r2, #31
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43da      	mvns	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	400a      	ands	r2, r1
 8002260:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	b29b      	uxth	r3, r3
 800226e:	4618      	mov	r0, r3
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	3b23      	subs	r3, #35	; 0x23
 800227c:	fa00 f203 	lsl.w	r2, r0, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	631a      	str	r2, [r3, #48]	; 0x30
 8002288:	e023      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	3b41      	subs	r3, #65	; 0x41
 800229c:	221f      	movs	r2, #31
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43da      	mvns	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	400a      	ands	r2, r1
 80022aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	4618      	mov	r0, r3
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	3b41      	subs	r3, #65	; 0x41
 80022c6:	fa00 f203 	lsl.w	r2, r0, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022d2:	4b22      	ldr	r3, [pc, #136]	; (800235c <HAL_ADC_ConfigChannel+0x234>)
 80022d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a21      	ldr	r2, [pc, #132]	; (8002360 <HAL_ADC_ConfigChannel+0x238>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d109      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x1cc>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b12      	cmp	r3, #18
 80022e6:	d105      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a19      	ldr	r2, [pc, #100]	; (8002360 <HAL_ADC_ConfigChannel+0x238>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d123      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x21e>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b10      	cmp	r3, #16
 8002304:	d003      	beq.n	800230e <HAL_ADC_ConfigChannel+0x1e6>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b11      	cmp	r3, #17
 800230c:	d11b      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b10      	cmp	r3, #16
 8002320:	d111      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <HAL_ADC_ConfigChannel+0x23c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a10      	ldr	r2, [pc, #64]	; (8002368 <HAL_ADC_ConfigChannel+0x240>)
 8002328:	fba2 2303 	umull	r2, r3, r2, r3
 800232c:	0c9a      	lsrs	r2, r3, #18
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002338:	e002      	b.n	8002340 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	3b01      	subs	r3, #1
 800233e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f9      	bne.n	800233a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	40012300 	.word	0x40012300
 8002360:	40012000 	.word	0x40012000
 8002364:	200000fc 	.word	0x200000fc
 8002368:	431bde83 	.word	0x431bde83

0800236c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002374:	4b79      	ldr	r3, [pc, #484]	; (800255c <ADC_Init+0x1f0>)
 8002376:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	431a      	orrs	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6859      	ldr	r1, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	021a      	lsls	r2, r3, #8
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6859      	ldr	r1, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6899      	ldr	r1, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fe:	4a58      	ldr	r2, [pc, #352]	; (8002560 <ADC_Init+0x1f4>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d022      	beq.n	800244a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002412:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6899      	ldr	r1, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002434:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6899      	ldr	r1, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	e00f      	b.n	800246a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002458:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002468:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0202 	bic.w	r2, r2, #2
 8002478:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6899      	ldr	r1, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	7e1b      	ldrb	r3, [r3, #24]
 8002484:	005a      	lsls	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d01b      	beq.n	80024d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6859      	ldr	r1, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	3b01      	subs	r3, #1
 80024c4:	035a      	lsls	r2, r3, #13
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	e007      	b.n	80024e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	051a      	lsls	r2, r3, #20
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002514:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6899      	ldr	r1, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002522:	025a      	lsls	r2, r3, #9
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800253a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6899      	ldr	r1, [r3, #8]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	029a      	lsls	r2, r3, #10
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	609a      	str	r2, [r3, #8]
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	40012300 	.word	0x40012300
 8002560:	0f000001 	.word	0x0f000001

08002564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002580:	4013      	ands	r3, r2
 8002582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800258c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002596:	4a04      	ldr	r2, [pc, #16]	; (80025a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	60d3      	str	r3, [r2, #12]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b0:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <__NVIC_GetPriorityGrouping+0x18>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	0a1b      	lsrs	r3, r3, #8
 80025b6:	f003 0307 	and.w	r3, r3, #7
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	db0b      	blt.n	80025f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	f003 021f 	and.w	r2, r3, #31
 80025e0:	4907      	ldr	r1, [pc, #28]	; (8002600 <__NVIC_EnableIRQ+0x38>)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	2001      	movs	r0, #1
 80025ea:	fa00 f202 	lsl.w	r2, r0, r2
 80025ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	e000e100 	.word	0xe000e100

08002604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	6039      	str	r1, [r7, #0]
 800260e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002614:	2b00      	cmp	r3, #0
 8002616:	db0a      	blt.n	800262e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	b2da      	uxtb	r2, r3
 800261c:	490c      	ldr	r1, [pc, #48]	; (8002650 <__NVIC_SetPriority+0x4c>)
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	0112      	lsls	r2, r2, #4
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	440b      	add	r3, r1
 8002628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800262c:	e00a      	b.n	8002644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	b2da      	uxtb	r2, r3
 8002632:	4908      	ldr	r1, [pc, #32]	; (8002654 <__NVIC_SetPriority+0x50>)
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	3b04      	subs	r3, #4
 800263c:	0112      	lsls	r2, r2, #4
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	440b      	add	r3, r1
 8002642:	761a      	strb	r2, [r3, #24]
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000e100 	.word	0xe000e100
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002658:	b480      	push	{r7}
 800265a:	b089      	sub	sp, #36	; 0x24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f1c3 0307 	rsb	r3, r3, #7
 8002672:	2b04      	cmp	r3, #4
 8002674:	bf28      	it	cs
 8002676:	2304      	movcs	r3, #4
 8002678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3304      	adds	r3, #4
 800267e:	2b06      	cmp	r3, #6
 8002680:	d902      	bls.n	8002688 <NVIC_EncodePriority+0x30>
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3b03      	subs	r3, #3
 8002686:	e000      	b.n	800268a <NVIC_EncodePriority+0x32>
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800268c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43da      	mvns	r2, r3
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	401a      	ands	r2, r3
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	fa01 f303 	lsl.w	r3, r1, r3
 80026aa:	43d9      	mvns	r1, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b0:	4313      	orrs	r3, r2
         );
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3724      	adds	r7, #36	; 0x24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
	...

080026c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026d0:	d301      	bcc.n	80026d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026d2:	2301      	movs	r3, #1
 80026d4:	e00f      	b.n	80026f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026d6:	4a0a      	ldr	r2, [pc, #40]	; (8002700 <SysTick_Config+0x40>)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3b01      	subs	r3, #1
 80026dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026de:	210f      	movs	r1, #15
 80026e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026e4:	f7ff ff8e 	bl	8002604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026e8:	4b05      	ldr	r3, [pc, #20]	; (8002700 <SysTick_Config+0x40>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ee:	4b04      	ldr	r3, [pc, #16]	; (8002700 <SysTick_Config+0x40>)
 80026f0:	2207      	movs	r2, #7
 80026f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	e000e010 	.word	0xe000e010

08002704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff ff29 	bl	8002564 <__NVIC_SetPriorityGrouping>
}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800271a:	b580      	push	{r7, lr}
 800271c:	b086      	sub	sp, #24
 800271e:	af00      	add	r7, sp, #0
 8002720:	4603      	mov	r3, r0
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	607a      	str	r2, [r7, #4]
 8002726:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800272c:	f7ff ff3e 	bl	80025ac <__NVIC_GetPriorityGrouping>
 8002730:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	68b9      	ldr	r1, [r7, #8]
 8002736:	6978      	ldr	r0, [r7, #20]
 8002738:	f7ff ff8e 	bl	8002658 <NVIC_EncodePriority>
 800273c:	4602      	mov	r2, r0
 800273e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002742:	4611      	mov	r1, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ff5d 	bl	8002604 <__NVIC_SetPriority>
}
 800274a:	bf00      	nop
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	4603      	mov	r3, r0
 800275a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800275c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff ff31 	bl	80025c8 <__NVIC_EnableIRQ>
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff ffa2 	bl	80026c0 <SysTick_Config>
 800277c:	4603      	mov	r3, r0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002794:	f7ff fb08 	bl	8001da8 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e099      	b.n	80028d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0201 	bic.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027c4:	e00f      	b.n	80027e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027c6:	f7ff faef 	bl	8001da8 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b05      	cmp	r3, #5
 80027d2:	d908      	bls.n	80027e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2220      	movs	r2, #32
 80027d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2203      	movs	r2, #3
 80027de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e078      	b.n	80028d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1e8      	bne.n	80027c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	4b38      	ldr	r3, [pc, #224]	; (80028e0 <HAL_DMA_Init+0x158>)
 8002800:	4013      	ands	r3, r2
 8002802:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002812:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800281e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800282a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	4313      	orrs	r3, r2
 8002836:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	2b04      	cmp	r3, #4
 800283e:	d107      	bne.n	8002850 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	4313      	orrs	r3, r2
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4313      	orrs	r3, r2
 800284e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f023 0307 	bic.w	r3, r3, #7
 8002866:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	4313      	orrs	r3, r2
 8002870:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	2b04      	cmp	r3, #4
 8002878:	d117      	bne.n	80028aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	4313      	orrs	r3, r2
 8002882:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00e      	beq.n	80028aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 fb01 	bl	8002e94 <DMA_CheckFifoParam>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2240      	movs	r2, #64	; 0x40
 800289c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028a6:	2301      	movs	r3, #1
 80028a8:	e016      	b.n	80028d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fab8 	bl	8002e28 <DMA_CalcBaseAndBitshift>
 80028b8:	4603      	mov	r3, r0
 80028ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c0:	223f      	movs	r2, #63	; 0x3f
 80028c2:	409a      	lsls	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	f010803f 	.word	0xf010803f

080028e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_DMA_Start_IT+0x26>
 8002906:	2302      	movs	r3, #2
 8002908:	e040      	b.n	800298c <HAL_DMA_Start_IT+0xa8>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b01      	cmp	r3, #1
 800291c:	d12f      	bne.n	800297e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2202      	movs	r2, #2
 8002922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 fa4a 	bl	8002dcc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293c:	223f      	movs	r2, #63	; 0x3f
 800293e:	409a      	lsls	r2, r3
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0216 	orr.w	r2, r2, #22
 8002952:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0208 	orr.w	r2, r2, #8
 800296a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0201 	orr.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	e005      	b.n	800298a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002986:	2302      	movs	r3, #2
 8002988:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800298a:	7dfb      	ldrb	r3, [r7, #23]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029a2:	f7ff fa01 	bl	8001da8 <HAL_GetTick>
 80029a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d008      	beq.n	80029c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2280      	movs	r2, #128	; 0x80
 80029b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e052      	b.n	8002a6c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0216 	bic.w	r2, r2, #22
 80029d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	695a      	ldr	r2, [r3, #20]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d103      	bne.n	80029f6 <HAL_DMA_Abort+0x62>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0208 	bic.w	r2, r2, #8
 8002a04:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0201 	bic.w	r2, r2, #1
 8002a14:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a16:	e013      	b.n	8002a40 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a18:	f7ff f9c6 	bl	8001da8 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b05      	cmp	r3, #5
 8002a24:	d90c      	bls.n	8002a40 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2203      	movs	r2, #3
 8002a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e015      	b.n	8002a6c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1e4      	bne.n	8002a18 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a52:	223f      	movs	r2, #63	; 0x3f
 8002a54:	409a      	lsls	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d004      	beq.n	8002a92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2280      	movs	r2, #128	; 0x80
 8002a8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e00c      	b.n	8002aac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2205      	movs	r2, #5
 8002a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0201 	bic.w	r2, r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ac4:	4b8e      	ldr	r3, [pc, #568]	; (8002d00 <HAL_DMA_IRQHandler+0x248>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a8e      	ldr	r2, [pc, #568]	; (8002d04 <HAL_DMA_IRQHandler+0x24c>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	0a9b      	lsrs	r3, r3, #10
 8002ad0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae2:	2208      	movs	r2, #8
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d01a      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d013      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0204 	bic.w	r2, r2, #4
 8002b0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b10:	2208      	movs	r2, #8
 8002b12:	409a      	lsls	r2, r3
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1c:	f043 0201 	orr.w	r2, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b28:	2201      	movs	r2, #1
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d012      	beq.n	8002b5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00b      	beq.n	8002b5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b46:	2201      	movs	r2, #1
 8002b48:	409a      	lsls	r2, r3
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b52:	f043 0202 	orr.w	r2, r3, #2
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5e:	2204      	movs	r2, #4
 8002b60:	409a      	lsls	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d012      	beq.n	8002b90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00b      	beq.n	8002b90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7c:	2204      	movs	r2, #4
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b88:	f043 0204 	orr.w	r2, r3, #4
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b94:	2210      	movs	r2, #16
 8002b96:	409a      	lsls	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d043      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d03c      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb2:	2210      	movs	r2, #16
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d018      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d108      	bne.n	8002be8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d024      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	4798      	blx	r3
 8002be6:	e01f      	b.n	8002c28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d01b      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	4798      	blx	r3
 8002bf8:	e016      	b.n	8002c28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d107      	bne.n	8002c18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0208 	bic.w	r2, r2, #8
 8002c16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 808f 	beq.w	8002d58 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0310 	and.w	r3, r3, #16
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 8087 	beq.w	8002d58 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4e:	2220      	movs	r2, #32
 8002c50:	409a      	lsls	r2, r3
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b05      	cmp	r3, #5
 8002c60:	d136      	bne.n	8002cd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0216 	bic.w	r2, r2, #22
 8002c70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695a      	ldr	r2, [r3, #20]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d103      	bne.n	8002c92 <HAL_DMA_IRQHandler+0x1da>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d007      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0208 	bic.w	r2, r2, #8
 8002ca0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca6:	223f      	movs	r2, #63	; 0x3f
 8002ca8:	409a      	lsls	r2, r3
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d07e      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	4798      	blx	r3
        }
        return;
 8002cce:	e079      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d01d      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10d      	bne.n	8002d08 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d031      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	4798      	blx	r3
 8002cfc:	e02c      	b.n	8002d58 <HAL_DMA_IRQHandler+0x2a0>
 8002cfe:	bf00      	nop
 8002d00:	200000fc 	.word	0x200000fc
 8002d04:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d023      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	4798      	blx	r3
 8002d18:	e01e      	b.n	8002d58 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10f      	bne.n	8002d48 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0210 	bic.w	r2, r2, #16
 8002d36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d032      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d022      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2205      	movs	r2, #5
 8002d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	3301      	adds	r3, #1
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d307      	bcc.n	8002da0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f2      	bne.n	8002d84 <HAL_DMA_IRQHandler+0x2cc>
 8002d9e:	e000      	b.n	8002da2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002da0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d005      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	4798      	blx	r3
 8002dc2:	e000      	b.n	8002dc6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002dc4:	bf00      	nop
    }
  }
}
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002de8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b40      	cmp	r3, #64	; 0x40
 8002df8:	d108      	bne.n	8002e0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e0a:	e007      	b.n	8002e1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	60da      	str	r2, [r3, #12]
}
 8002e1c:	bf00      	nop
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	3b10      	subs	r3, #16
 8002e38:	4a14      	ldr	r2, [pc, #80]	; (8002e8c <DMA_CalcBaseAndBitshift+0x64>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	091b      	lsrs	r3, r3, #4
 8002e40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e42:	4a13      	ldr	r2, [pc, #76]	; (8002e90 <DMA_CalcBaseAndBitshift+0x68>)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4413      	add	r3, r2
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d909      	bls.n	8002e6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e5e:	f023 0303 	bic.w	r3, r3, #3
 8002e62:	1d1a      	adds	r2, r3, #4
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	659a      	str	r2, [r3, #88]	; 0x58
 8002e68:	e007      	b.n	8002e7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e72:	f023 0303 	bic.w	r3, r3, #3
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	aaaaaaab 	.word	0xaaaaaaab
 8002e90:	08007100 	.word	0x08007100

08002e94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d11f      	bne.n	8002eee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d856      	bhi.n	8002f62 <DMA_CheckFifoParam+0xce>
 8002eb4:	a201      	add	r2, pc, #4	; (adr r2, 8002ebc <DMA_CheckFifoParam+0x28>)
 8002eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eba:	bf00      	nop
 8002ebc:	08002ecd 	.word	0x08002ecd
 8002ec0:	08002edf 	.word	0x08002edf
 8002ec4:	08002ecd 	.word	0x08002ecd
 8002ec8:	08002f63 	.word	0x08002f63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d046      	beq.n	8002f66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002edc:	e043      	b.n	8002f66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ee6:	d140      	bne.n	8002f6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eec:	e03d      	b.n	8002f6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ef6:	d121      	bne.n	8002f3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d837      	bhi.n	8002f6e <DMA_CheckFifoParam+0xda>
 8002efe:	a201      	add	r2, pc, #4	; (adr r2, 8002f04 <DMA_CheckFifoParam+0x70>)
 8002f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f04:	08002f15 	.word	0x08002f15
 8002f08:	08002f1b 	.word	0x08002f1b
 8002f0c:	08002f15 	.word	0x08002f15
 8002f10:	08002f2d 	.word	0x08002f2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
      break;
 8002f18:	e030      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d025      	beq.n	8002f72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f2a:	e022      	b.n	8002f72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f34:	d11f      	bne.n	8002f76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f3a:	e01c      	b.n	8002f76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d903      	bls.n	8002f4a <DMA_CheckFifoParam+0xb6>
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d003      	beq.n	8002f50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f48:	e018      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f4e:	e015      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00e      	beq.n	8002f7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f60:	e00b      	b.n	8002f7a <DMA_CheckFifoParam+0xe6>
      break;
 8002f62:	bf00      	nop
 8002f64:	e00a      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
      break;
 8002f66:	bf00      	nop
 8002f68:	e008      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
      break;
 8002f6a:	bf00      	nop
 8002f6c:	e006      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
      break;
 8002f6e:	bf00      	nop
 8002f70:	e004      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
      break;
 8002f72:	bf00      	nop
 8002f74:	e002      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
      break;   
 8002f76:	bf00      	nop
 8002f78:	e000      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
      break;
 8002f7a:	bf00      	nop
    }
  } 
  
  return status; 
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop

08002f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b089      	sub	sp, #36	; 0x24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61fb      	str	r3, [r7, #28]
 8002fa6:	e159      	b.n	800325c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fa8:	2201      	movs	r2, #1
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	f040 8148 	bne.w	8003256 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d005      	beq.n	8002fde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d130      	bne.n	8003040 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	2203      	movs	r2, #3
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003014:	2201      	movs	r2, #1
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	f003 0201 	and.w	r2, r3, #1
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	2b03      	cmp	r3, #3
 800304a:	d017      	beq.n	800307c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	2203      	movs	r2, #3
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d123      	bne.n	80030d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	08da      	lsrs	r2, r3, #3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3208      	adds	r2, #8
 8003090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003094:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	220f      	movs	r2, #15
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4313      	orrs	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	08da      	lsrs	r2, r3, #3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	3208      	adds	r2, #8
 80030ca:	69b9      	ldr	r1, [r7, #24]
 80030cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	2203      	movs	r2, #3
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	43db      	mvns	r3, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f003 0203 	and.w	r2, r3, #3
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 80a2 	beq.w	8003256 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	4b57      	ldr	r3, [pc, #348]	; (8003274 <HAL_GPIO_Init+0x2e8>)
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	4a56      	ldr	r2, [pc, #344]	; (8003274 <HAL_GPIO_Init+0x2e8>)
 800311c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003120:	6453      	str	r3, [r2, #68]	; 0x44
 8003122:	4b54      	ldr	r3, [pc, #336]	; (8003274 <HAL_GPIO_Init+0x2e8>)
 8003124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800312e:	4a52      	ldr	r2, [pc, #328]	; (8003278 <HAL_GPIO_Init+0x2ec>)
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	089b      	lsrs	r3, r3, #2
 8003134:	3302      	adds	r3, #2
 8003136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	220f      	movs	r2, #15
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43db      	mvns	r3, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4013      	ands	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a49      	ldr	r2, [pc, #292]	; (800327c <HAL_GPIO_Init+0x2f0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d019      	beq.n	800318e <HAL_GPIO_Init+0x202>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a48      	ldr	r2, [pc, #288]	; (8003280 <HAL_GPIO_Init+0x2f4>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d013      	beq.n	800318a <HAL_GPIO_Init+0x1fe>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a47      	ldr	r2, [pc, #284]	; (8003284 <HAL_GPIO_Init+0x2f8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00d      	beq.n	8003186 <HAL_GPIO_Init+0x1fa>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a46      	ldr	r2, [pc, #280]	; (8003288 <HAL_GPIO_Init+0x2fc>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d007      	beq.n	8003182 <HAL_GPIO_Init+0x1f6>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a45      	ldr	r2, [pc, #276]	; (800328c <HAL_GPIO_Init+0x300>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d101      	bne.n	800317e <HAL_GPIO_Init+0x1f2>
 800317a:	2304      	movs	r3, #4
 800317c:	e008      	b.n	8003190 <HAL_GPIO_Init+0x204>
 800317e:	2307      	movs	r3, #7
 8003180:	e006      	b.n	8003190 <HAL_GPIO_Init+0x204>
 8003182:	2303      	movs	r3, #3
 8003184:	e004      	b.n	8003190 <HAL_GPIO_Init+0x204>
 8003186:	2302      	movs	r3, #2
 8003188:	e002      	b.n	8003190 <HAL_GPIO_Init+0x204>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <HAL_GPIO_Init+0x204>
 800318e:	2300      	movs	r3, #0
 8003190:	69fa      	ldr	r2, [r7, #28]
 8003192:	f002 0203 	and.w	r2, r2, #3
 8003196:	0092      	lsls	r2, r2, #2
 8003198:	4093      	lsls	r3, r2
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031a0:	4935      	ldr	r1, [pc, #212]	; (8003278 <HAL_GPIO_Init+0x2ec>)
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	089b      	lsrs	r3, r3, #2
 80031a6:	3302      	adds	r3, #2
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ae:	4b38      	ldr	r3, [pc, #224]	; (8003290 <HAL_GPIO_Init+0x304>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031d2:	4a2f      	ldr	r2, [pc, #188]	; (8003290 <HAL_GPIO_Init+0x304>)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031d8:	4b2d      	ldr	r3, [pc, #180]	; (8003290 <HAL_GPIO_Init+0x304>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031fc:	4a24      	ldr	r2, [pc, #144]	; (8003290 <HAL_GPIO_Init+0x304>)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003202:	4b23      	ldr	r3, [pc, #140]	; (8003290 <HAL_GPIO_Init+0x304>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003226:	4a1a      	ldr	r2, [pc, #104]	; (8003290 <HAL_GPIO_Init+0x304>)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800322c:	4b18      	ldr	r3, [pc, #96]	; (8003290 <HAL_GPIO_Init+0x304>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003250:	4a0f      	ldr	r2, [pc, #60]	; (8003290 <HAL_GPIO_Init+0x304>)
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	3301      	adds	r3, #1
 800325a:	61fb      	str	r3, [r7, #28]
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	2b0f      	cmp	r3, #15
 8003260:	f67f aea2 	bls.w	8002fa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	3724      	adds	r7, #36	; 0x24
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800
 8003278:	40013800 	.word	0x40013800
 800327c:	40020000 	.word	0x40020000
 8003280:	40020400 	.word	0x40020400
 8003284:	40020800 	.word	0x40020800
 8003288:	40020c00 	.word	0x40020c00
 800328c:	40021000 	.word	0x40021000
 8003290:	40013c00 	.word	0x40013c00

08003294 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	460b      	mov	r3, r1
 800329e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	887b      	ldrh	r3, [r7, #2]
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d002      	beq.n	80032b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032ac:	2301      	movs	r3, #1
 80032ae:	73fb      	strb	r3, [r7, #15]
 80032b0:	e001      	b.n	80032b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032b2:	2300      	movs	r3, #0
 80032b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	807b      	strh	r3, [r7, #2]
 80032d0:	4613      	mov	r3, r2
 80032d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032d4:	787b      	ldrb	r3, [r7, #1]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032da:	887a      	ldrh	r2, [r7, #2]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032e0:	e003      	b.n	80032ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032e2:	887b      	ldrh	r3, [r7, #2]
 80032e4:	041a      	lsls	r2, r3, #16
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	619a      	str	r2, [r3, #24]
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e267      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d075      	beq.n	8003402 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003316:	4b88      	ldr	r3, [pc, #544]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	2b04      	cmp	r3, #4
 8003320:	d00c      	beq.n	800333c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003322:	4b85      	ldr	r3, [pc, #532]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800332a:	2b08      	cmp	r3, #8
 800332c:	d112      	bne.n	8003354 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800332e:	4b82      	ldr	r3, [pc, #520]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003336:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800333a:	d10b      	bne.n	8003354 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333c:	4b7e      	ldr	r3, [pc, #504]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d05b      	beq.n	8003400 <HAL_RCC_OscConfig+0x108>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d157      	bne.n	8003400 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e242      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800335c:	d106      	bne.n	800336c <HAL_RCC_OscConfig+0x74>
 800335e:	4b76      	ldr	r3, [pc, #472]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a75      	ldr	r2, [pc, #468]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	e01d      	b.n	80033a8 <HAL_RCC_OscConfig+0xb0>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003374:	d10c      	bne.n	8003390 <HAL_RCC_OscConfig+0x98>
 8003376:	4b70      	ldr	r3, [pc, #448]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a6f      	ldr	r2, [pc, #444]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 800337c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	4b6d      	ldr	r3, [pc, #436]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a6c      	ldr	r2, [pc, #432]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	e00b      	b.n	80033a8 <HAL_RCC_OscConfig+0xb0>
 8003390:	4b69      	ldr	r3, [pc, #420]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a68      	ldr	r2, [pc, #416]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	4b66      	ldr	r3, [pc, #408]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a65      	ldr	r2, [pc, #404]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 80033a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d013      	beq.n	80033d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b0:	f7fe fcfa 	bl	8001da8 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033b8:	f7fe fcf6 	bl	8001da8 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b64      	cmp	r3, #100	; 0x64
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e207      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ca:	4b5b      	ldr	r3, [pc, #364]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0f0      	beq.n	80033b8 <HAL_RCC_OscConfig+0xc0>
 80033d6:	e014      	b.n	8003402 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d8:	f7fe fce6 	bl	8001da8 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e0:	f7fe fce2 	bl	8001da8 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	; 0x64
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e1f3      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f2:	4b51      	ldr	r3, [pc, #324]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0xe8>
 80033fe:	e000      	b.n	8003402 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d063      	beq.n	80034d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800340e:	4b4a      	ldr	r3, [pc, #296]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00b      	beq.n	8003432 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800341a:	4b47      	ldr	r3, [pc, #284]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003422:	2b08      	cmp	r3, #8
 8003424:	d11c      	bne.n	8003460 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003426:	4b44      	ldr	r3, [pc, #272]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d116      	bne.n	8003460 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003432:	4b41      	ldr	r3, [pc, #260]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d005      	beq.n	800344a <HAL_RCC_OscConfig+0x152>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d001      	beq.n	800344a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e1c7      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344a:	4b3b      	ldr	r3, [pc, #236]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4937      	ldr	r1, [pc, #220]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 800345a:	4313      	orrs	r3, r2
 800345c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345e:	e03a      	b.n	80034d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d020      	beq.n	80034aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003468:	4b34      	ldr	r3, [pc, #208]	; (800353c <HAL_RCC_OscConfig+0x244>)
 800346a:	2201      	movs	r2, #1
 800346c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346e:	f7fe fc9b 	bl	8001da8 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003476:	f7fe fc97 	bl	8001da8 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e1a8      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003488:	4b2b      	ldr	r3, [pc, #172]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003494:	4b28      	ldr	r3, [pc, #160]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4925      	ldr	r1, [pc, #148]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	600b      	str	r3, [r1, #0]
 80034a8:	e015      	b.n	80034d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034aa:	4b24      	ldr	r3, [pc, #144]	; (800353c <HAL_RCC_OscConfig+0x244>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b0:	f7fe fc7a 	bl	8001da8 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034b8:	f7fe fc76 	bl	8001da8 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e187      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ca:	4b1b      	ldr	r3, [pc, #108]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f0      	bne.n	80034b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d036      	beq.n	8003550 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d016      	beq.n	8003518 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ea:	4b15      	ldr	r3, [pc, #84]	; (8003540 <HAL_RCC_OscConfig+0x248>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f0:	f7fe fc5a 	bl	8001da8 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034f8:	f7fe fc56 	bl	8001da8 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e167      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350a:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 800350c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0x200>
 8003516:	e01b      	b.n	8003550 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003518:	4b09      	ldr	r3, [pc, #36]	; (8003540 <HAL_RCC_OscConfig+0x248>)
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351e:	f7fe fc43 	bl	8001da8 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003524:	e00e      	b.n	8003544 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003526:	f7fe fc3f 	bl	8001da8 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d907      	bls.n	8003544 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e150      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
 8003538:	40023800 	.word	0x40023800
 800353c:	42470000 	.word	0x42470000
 8003540:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003544:	4b88      	ldr	r3, [pc, #544]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1ea      	bne.n	8003526 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 8097 	beq.w	800368c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800355e:	2300      	movs	r3, #0
 8003560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003562:	4b81      	ldr	r3, [pc, #516]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10f      	bne.n	800358e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	4b7d      	ldr	r3, [pc, #500]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	4a7c      	ldr	r2, [pc, #496]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357c:	6413      	str	r3, [r2, #64]	; 0x40
 800357e:	4b7a      	ldr	r3, [pc, #488]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800358a:	2301      	movs	r3, #1
 800358c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358e:	4b77      	ldr	r3, [pc, #476]	; (800376c <HAL_RCC_OscConfig+0x474>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003596:	2b00      	cmp	r3, #0
 8003598:	d118      	bne.n	80035cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800359a:	4b74      	ldr	r3, [pc, #464]	; (800376c <HAL_RCC_OscConfig+0x474>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a73      	ldr	r2, [pc, #460]	; (800376c <HAL_RCC_OscConfig+0x474>)
 80035a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a6:	f7fe fbff 	bl	8001da8 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ae:	f7fe fbfb 	bl	8001da8 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e10c      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	4b6a      	ldr	r3, [pc, #424]	; (800376c <HAL_RCC_OscConfig+0x474>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d106      	bne.n	80035e2 <HAL_RCC_OscConfig+0x2ea>
 80035d4:	4b64      	ldr	r3, [pc, #400]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 80035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d8:	4a63      	ldr	r2, [pc, #396]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	6713      	str	r3, [r2, #112]	; 0x70
 80035e0:	e01c      	b.n	800361c <HAL_RCC_OscConfig+0x324>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b05      	cmp	r3, #5
 80035e8:	d10c      	bne.n	8003604 <HAL_RCC_OscConfig+0x30c>
 80035ea:	4b5f      	ldr	r3, [pc, #380]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	4a5e      	ldr	r2, [pc, #376]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 80035f0:	f043 0304 	orr.w	r3, r3, #4
 80035f4:	6713      	str	r3, [r2, #112]	; 0x70
 80035f6:	4b5c      	ldr	r3, [pc, #368]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	4a5b      	ldr	r2, [pc, #364]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	6713      	str	r3, [r2, #112]	; 0x70
 8003602:	e00b      	b.n	800361c <HAL_RCC_OscConfig+0x324>
 8003604:	4b58      	ldr	r3, [pc, #352]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003608:	4a57      	ldr	r2, [pc, #348]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 800360a:	f023 0301 	bic.w	r3, r3, #1
 800360e:	6713      	str	r3, [r2, #112]	; 0x70
 8003610:	4b55      	ldr	r3, [pc, #340]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003614:	4a54      	ldr	r2, [pc, #336]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003616:	f023 0304 	bic.w	r3, r3, #4
 800361a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d015      	beq.n	8003650 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003624:	f7fe fbc0 	bl	8001da8 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362a:	e00a      	b.n	8003642 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800362c:	f7fe fbbc 	bl	8001da8 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f241 3288 	movw	r2, #5000	; 0x1388
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e0cb      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003642:	4b49      	ldr	r3, [pc, #292]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0ee      	beq.n	800362c <HAL_RCC_OscConfig+0x334>
 800364e:	e014      	b.n	800367a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003650:	f7fe fbaa 	bl	8001da8 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003656:	e00a      	b.n	800366e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003658:	f7fe fba6 	bl	8001da8 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	f241 3288 	movw	r2, #5000	; 0x1388
 8003666:	4293      	cmp	r3, r2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e0b5      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366e:	4b3e      	ldr	r3, [pc, #248]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1ee      	bne.n	8003658 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800367a:	7dfb      	ldrb	r3, [r7, #23]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d105      	bne.n	800368c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003680:	4b39      	ldr	r3, [pc, #228]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	4a38      	ldr	r2, [pc, #224]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80a1 	beq.w	80037d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003696:	4b34      	ldr	r3, [pc, #208]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d05c      	beq.n	800375c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d141      	bne.n	800372e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036aa:	4b31      	ldr	r3, [pc, #196]	; (8003770 <HAL_RCC_OscConfig+0x478>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7fe fb7a 	bl	8001da8 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b8:	f7fe fb76 	bl	8001da8 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e087      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ca:	4b27      	ldr	r3, [pc, #156]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69da      	ldr	r2, [r3, #28]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	019b      	lsls	r3, r3, #6
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ec:	085b      	lsrs	r3, r3, #1
 80036ee:	3b01      	subs	r3, #1
 80036f0:	041b      	lsls	r3, r3, #16
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	061b      	lsls	r3, r3, #24
 80036fa:	491b      	ldr	r1, [pc, #108]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003700:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <HAL_RCC_OscConfig+0x478>)
 8003702:	2201      	movs	r2, #1
 8003704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003706:	f7fe fb4f 	bl	8001da8 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800370e:	f7fe fb4b 	bl	8001da8 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e05c      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003720:	4b11      	ldr	r3, [pc, #68]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0f0      	beq.n	800370e <HAL_RCC_OscConfig+0x416>
 800372c:	e054      	b.n	80037d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372e:	4b10      	ldr	r3, [pc, #64]	; (8003770 <HAL_RCC_OscConfig+0x478>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7fe fb38 	bl	8001da8 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800373c:	f7fe fb34 	bl	8001da8 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e045      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374e:	4b06      	ldr	r3, [pc, #24]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x444>
 800375a:	e03d      	b.n	80037d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d107      	bne.n	8003774 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e038      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
 8003768:	40023800 	.word	0x40023800
 800376c:	40007000 	.word	0x40007000
 8003770:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003774:	4b1b      	ldr	r3, [pc, #108]	; (80037e4 <HAL_RCC_OscConfig+0x4ec>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d028      	beq.n	80037d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800378c:	429a      	cmp	r2, r3
 800378e:	d121      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379a:	429a      	cmp	r2, r3
 800379c:	d11a      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037a4:	4013      	ands	r3, r2
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d111      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ba:	085b      	lsrs	r3, r3, #1
 80037bc:	3b01      	subs	r3, #1
 80037be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d107      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40023800 	.word	0x40023800

080037e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0cc      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037fc:	4b68      	ldr	r3, [pc, #416]	; (80039a0 <HAL_RCC_ClockConfig+0x1b8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d90c      	bls.n	8003824 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380a:	4b65      	ldr	r3, [pc, #404]	; (80039a0 <HAL_RCC_ClockConfig+0x1b8>)
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003812:	4b63      	ldr	r3, [pc, #396]	; (80039a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d001      	beq.n	8003824 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e0b8      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d020      	beq.n	8003872 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d005      	beq.n	8003848 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800383c:	4b59      	ldr	r3, [pc, #356]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	4a58      	ldr	r2, [pc, #352]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003846:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003854:	4b53      	ldr	r3, [pc, #332]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	4a52      	ldr	r2, [pc, #328]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800385e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003860:	4b50      	ldr	r3, [pc, #320]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	494d      	ldr	r1, [pc, #308]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	4313      	orrs	r3, r2
 8003870:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d044      	beq.n	8003908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d107      	bne.n	8003896 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003886:	4b47      	ldr	r3, [pc, #284]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d119      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e07f      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d003      	beq.n	80038a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038a2:	2b03      	cmp	r3, #3
 80038a4:	d107      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a6:	4b3f      	ldr	r3, [pc, #252]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d109      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e06f      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b6:	4b3b      	ldr	r3, [pc, #236]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e067      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038c6:	4b37      	ldr	r3, [pc, #220]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f023 0203 	bic.w	r2, r3, #3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	4934      	ldr	r1, [pc, #208]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038d8:	f7fe fa66 	bl	8001da8 <HAL_GetTick>
 80038dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e0:	f7fe fa62 	bl	8001da8 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e04f      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f6:	4b2b      	ldr	r3, [pc, #172]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 020c 	and.w	r2, r3, #12
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	429a      	cmp	r2, r3
 8003906:	d1eb      	bne.n	80038e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003908:	4b25      	ldr	r3, [pc, #148]	; (80039a0 <HAL_RCC_ClockConfig+0x1b8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d20c      	bcs.n	8003930 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003916:	4b22      	ldr	r3, [pc, #136]	; (80039a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800391e:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d001      	beq.n	8003930 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e032      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d008      	beq.n	800394e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800393c:	4b19      	ldr	r3, [pc, #100]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	4916      	ldr	r1, [pc, #88]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800395a:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	490e      	ldr	r1, [pc, #56]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	4313      	orrs	r3, r2
 800396c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800396e:	f000 f821 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8003972:	4602      	mov	r2, r0
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	091b      	lsrs	r3, r3, #4
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	490a      	ldr	r1, [pc, #40]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003980:	5ccb      	ldrb	r3, [r1, r3]
 8003982:	fa22 f303 	lsr.w	r3, r2, r3
 8003986:	4a09      	ldr	r2, [pc, #36]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800398a:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <HAL_RCC_ClockConfig+0x1c8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe f9c6 	bl	8001d20 <HAL_InitTick>

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40023c00 	.word	0x40023c00
 80039a4:	40023800 	.word	0x40023800
 80039a8:	080070e8 	.word	0x080070e8
 80039ac:	200000fc 	.word	0x200000fc
 80039b0:	20000100 	.word	0x20000100

080039b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039b8:	b094      	sub	sp, #80	; 0x50
 80039ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	647b      	str	r3, [r7, #68]	; 0x44
 80039c0:	2300      	movs	r3, #0
 80039c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039c4:	2300      	movs	r3, #0
 80039c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039cc:	4b79      	ldr	r3, [pc, #484]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 030c 	and.w	r3, r3, #12
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d00d      	beq.n	80039f4 <HAL_RCC_GetSysClockFreq+0x40>
 80039d8:	2b08      	cmp	r3, #8
 80039da:	f200 80e1 	bhi.w	8003ba0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <HAL_RCC_GetSysClockFreq+0x34>
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d003      	beq.n	80039ee <HAL_RCC_GetSysClockFreq+0x3a>
 80039e6:	e0db      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039e8:	4b73      	ldr	r3, [pc, #460]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x204>)
 80039ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80039ec:	e0db      	b.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ee:	4b73      	ldr	r3, [pc, #460]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x208>)
 80039f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039f2:	e0d8      	b.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039f4:	4b6f      	ldr	r3, [pc, #444]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039fe:	4b6d      	ldr	r3, [pc, #436]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d063      	beq.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a0a:	4b6a      	ldr	r3, [pc, #424]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	099b      	lsrs	r3, r3, #6
 8003a10:	2200      	movs	r2, #0
 8003a12:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a1c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a1e:	2300      	movs	r3, #0
 8003a20:	637b      	str	r3, [r7, #52]	; 0x34
 8003a22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a26:	4622      	mov	r2, r4
 8003a28:	462b      	mov	r3, r5
 8003a2a:	f04f 0000 	mov.w	r0, #0
 8003a2e:	f04f 0100 	mov.w	r1, #0
 8003a32:	0159      	lsls	r1, r3, #5
 8003a34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a38:	0150      	lsls	r0, r2, #5
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	4621      	mov	r1, r4
 8003a40:	1a51      	subs	r1, r2, r1
 8003a42:	6139      	str	r1, [r7, #16]
 8003a44:	4629      	mov	r1, r5
 8003a46:	eb63 0301 	sbc.w	r3, r3, r1
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a58:	4659      	mov	r1, fp
 8003a5a:	018b      	lsls	r3, r1, #6
 8003a5c:	4651      	mov	r1, sl
 8003a5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a62:	4651      	mov	r1, sl
 8003a64:	018a      	lsls	r2, r1, #6
 8003a66:	4651      	mov	r1, sl
 8003a68:	ebb2 0801 	subs.w	r8, r2, r1
 8003a6c:	4659      	mov	r1, fp
 8003a6e:	eb63 0901 	sbc.w	r9, r3, r1
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a86:	4690      	mov	r8, r2
 8003a88:	4699      	mov	r9, r3
 8003a8a:	4623      	mov	r3, r4
 8003a8c:	eb18 0303 	adds.w	r3, r8, r3
 8003a90:	60bb      	str	r3, [r7, #8]
 8003a92:	462b      	mov	r3, r5
 8003a94:	eb49 0303 	adc.w	r3, r9, r3
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	024b      	lsls	r3, r1, #9
 8003aaa:	4621      	mov	r1, r4
 8003aac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	024a      	lsls	r2, r1, #9
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aba:	2200      	movs	r2, #0
 8003abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003abe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ac0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ac4:	f7fc fbe4 	bl	8000290 <__aeabi_uldivmod>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4613      	mov	r3, r2
 8003ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ad0:	e058      	b.n	8003b84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad2:	4b38      	ldr	r3, [pc, #224]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	099b      	lsrs	r3, r3, #6
 8003ad8:	2200      	movs	r2, #0
 8003ada:	4618      	mov	r0, r3
 8003adc:	4611      	mov	r1, r2
 8003ade:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ae2:	623b      	str	r3, [r7, #32]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003aec:	4642      	mov	r2, r8
 8003aee:	464b      	mov	r3, r9
 8003af0:	f04f 0000 	mov.w	r0, #0
 8003af4:	f04f 0100 	mov.w	r1, #0
 8003af8:	0159      	lsls	r1, r3, #5
 8003afa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003afe:	0150      	lsls	r0, r2, #5
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4641      	mov	r1, r8
 8003b06:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b0a:	4649      	mov	r1, r9
 8003b0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b24:	ebb2 040a 	subs.w	r4, r2, sl
 8003b28:	eb63 050b 	sbc.w	r5, r3, fp
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	00eb      	lsls	r3, r5, #3
 8003b36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b3a:	00e2      	lsls	r2, r4, #3
 8003b3c:	4614      	mov	r4, r2
 8003b3e:	461d      	mov	r5, r3
 8003b40:	4643      	mov	r3, r8
 8003b42:	18e3      	adds	r3, r4, r3
 8003b44:	603b      	str	r3, [r7, #0]
 8003b46:	464b      	mov	r3, r9
 8003b48:	eb45 0303 	adc.w	r3, r5, r3
 8003b4c:	607b      	str	r3, [r7, #4]
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	028b      	lsls	r3, r1, #10
 8003b5e:	4621      	mov	r1, r4
 8003b60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b64:	4621      	mov	r1, r4
 8003b66:	028a      	lsls	r2, r1, #10
 8003b68:	4610      	mov	r0, r2
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b6e:	2200      	movs	r2, #0
 8003b70:	61bb      	str	r3, [r7, #24]
 8003b72:	61fa      	str	r2, [r7, #28]
 8003b74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b78:	f7fc fb8a 	bl	8000290 <__aeabi_uldivmod>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4613      	mov	r3, r2
 8003b82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b84:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	0c1b      	lsrs	r3, r3, #16
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	3301      	adds	r3, #1
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b9e:	e002      	b.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ba0:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ba2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3750      	adds	r7, #80	; 0x50
 8003bac:	46bd      	mov	sp, r7
 8003bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	00f42400 	.word	0x00f42400
 8003bbc:	007a1200 	.word	0x007a1200

08003bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc4:	4b03      	ldr	r3, [pc, #12]	; (8003bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	200000fc 	.word	0x200000fc

08003bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bdc:	f7ff fff0 	bl	8003bc0 <HAL_RCC_GetHCLKFreq>
 8003be0:	4602      	mov	r2, r0
 8003be2:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	0a9b      	lsrs	r3, r3, #10
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	4903      	ldr	r1, [pc, #12]	; (8003bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bee:	5ccb      	ldrb	r3, [r1, r3]
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	080070f8 	.word	0x080070f8

08003c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c04:	f7ff ffdc 	bl	8003bc0 <HAL_RCC_GetHCLKFreq>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	0b5b      	lsrs	r3, r3, #13
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	4903      	ldr	r1, [pc, #12]	; (8003c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c16:	5ccb      	ldrb	r3, [r1, r3]
 8003c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40023800 	.word	0x40023800
 8003c24:	080070f8 	.word	0x080070f8

08003c28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e07b      	b.n	8003d32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d108      	bne.n	8003c54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c4a:	d009      	beq.n	8003c60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	61da      	str	r2, [r3, #28]
 8003c52:	e005      	b.n	8003c60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fd fd3c 	bl	80016f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce4:	ea42 0103 	orr.w	r1, r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	0c1b      	lsrs	r3, r3, #16
 8003cfe:	f003 0104 	and.w	r1, r3, #4
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	f003 0210 	and.w	r2, r3, #16
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69da      	ldr	r2, [r3, #28]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	4613      	mov	r3, r2
 8003d48:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_SPI_Transmit_DMA+0x20>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e09b      	b.n	8003e94 <HAL_SPI_Transmit_DMA+0x158>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d002      	beq.n	8003d76 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003d70:	2302      	movs	r3, #2
 8003d72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d74:	e089      	b.n	8003e8a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_SPI_Transmit_DMA+0x46>
 8003d7c:	88fb      	ldrh	r3, [r7, #6]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d102      	bne.n	8003d88 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d86:	e080      	b.n	8003e8a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2203      	movs	r2, #3
 8003d8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	88fa      	ldrh	r2, [r7, #6]
 8003da0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	88fa      	ldrh	r2, [r7, #6]
 8003da6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dce:	d10f      	bne.n	8003df0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dde:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df4:	4a29      	ldr	r2, [pc, #164]	; (8003e9c <HAL_SPI_Transmit_DMA+0x160>)
 8003df6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dfc:	4a28      	ldr	r2, [pc, #160]	; (8003ea0 <HAL_SPI_Transmit_DMA+0x164>)
 8003dfe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e04:	4a27      	ldr	r2, [pc, #156]	; (8003ea4 <HAL_SPI_Transmit_DMA+0x168>)
 8003e06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e18:	4619      	mov	r1, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	330c      	adds	r3, #12
 8003e20:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e26:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003e28:	f7fe fd5c 	bl	80028e4 <HAL_DMA_Start_IT>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00c      	beq.n	8003e4c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e36:	f043 0210 	orr.w	r2, r3, #16
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003e4a:	e01e      	b.n	8003e8a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e56:	2b40      	cmp	r3, #64	; 0x40
 8003e58:	d007      	beq.n	8003e6a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e68:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 0220 	orr.w	r2, r2, #32
 8003e78:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f042 0202 	orr.w	r2, r2, #2
 8003e88:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	08004161 	.word	0x08004161
 8003ea0:	080040b9 	.word	0x080040b9
 8003ea4:	0800417d 	.word	0x0800417d

08003ea8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10e      	bne.n	8003ee8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d009      	beq.n	8003ee8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d004      	beq.n	8003ee8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	4798      	blx	r3
    return;
 8003ee6:	e0ce      	b.n	8004086 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d009      	beq.n	8003f06 <HAL_SPI_IRQHandler+0x5e>
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d004      	beq.n	8003f06 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	4798      	blx	r3
    return;
 8003f04:	e0bf      	b.n	8004086 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	f003 0320 	and.w	r3, r3, #32
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10a      	bne.n	8003f26 <HAL_SPI_IRQHandler+0x7e>
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d105      	bne.n	8003f26 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 80b0 	beq.w	8004086 <HAL_SPI_IRQHandler+0x1de>
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	f003 0320 	and.w	r3, r3, #32
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80aa 	beq.w	8004086 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d023      	beq.n	8003f84 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d011      	beq.n	8003f6c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4c:	f043 0204 	orr.w	r2, r3, #4
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	e00b      	b.n	8003f84 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	613b      	str	r3, [r7, #16]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	613b      	str	r3, [r7, #16]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	613b      	str	r3, [r7, #16]
 8003f80:	693b      	ldr	r3, [r7, #16]
        return;
 8003f82:	e080      	b.n	8004086 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d014      	beq.n	8003fb8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f92:	f043 0201 	orr.w	r2, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00c      	beq.n	8003fdc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc6:	f043 0208 	orr.w	r2, r3, #8
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60bb      	str	r3, [r7, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d04f      	beq.n	8004084 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ff2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d104      	bne.n	8004010 <HAL_SPI_IRQHandler+0x168>
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d034      	beq.n	800407a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0203 	bic.w	r2, r2, #3
 800401e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004024:	2b00      	cmp	r3, #0
 8004026:	d011      	beq.n	800404c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800402c:	4a17      	ldr	r2, [pc, #92]	; (800408c <HAL_SPI_IRQHandler+0x1e4>)
 800402e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004034:	4618      	mov	r0, r3
 8004036:	f7fe fd1d 	bl	8002a74 <HAL_DMA_Abort_IT>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004044:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004050:	2b00      	cmp	r3, #0
 8004052:	d016      	beq.n	8004082 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004058:	4a0c      	ldr	r2, [pc, #48]	; (800408c <HAL_SPI_IRQHandler+0x1e4>)
 800405a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004060:	4618      	mov	r0, r3
 8004062:	f7fe fd07 	bl	8002a74 <HAL_DMA_Abort_IT>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004070:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004078:	e003      	b.n	8004082 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f812 	bl	80040a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004080:	e000      	b.n	8004084 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004082:	bf00      	nop
    return;
 8004084:	bf00      	nop
  }
}
 8004086:	3720      	adds	r7, #32
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	080041bd 	.word	0x080041bd

08004090 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040c6:	f7fd fe6f 	bl	8001da8 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040da:	d03b      	beq.n	8004154 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0220 	bic.w	r2, r2, #32
 80040ea:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0202 	bic.w	r2, r2, #2
 80040fa:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	2164      	movs	r1, #100	; 0x64
 8004100:	6978      	ldr	r0, [r7, #20]
 8004102:	f000 f8f7 	bl	80042f4 <SPI_EndRxTxTransaction>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004110:	f043 0220 	orr.w	r2, r3, #32
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10a      	bne.n	8004136 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004120:	2300      	movs	r3, #0
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2200      	movs	r2, #0
 800413a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800414c:	6978      	ldr	r0, [r7, #20]
 800414e:	f7ff ffa9 	bl	80040a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004152:	e002      	b.n	800415a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004154:	6978      	ldr	r0, [r7, #20]
 8004156:	f7fd f969 	bl	800142c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f7ff ff8e 	bl	8004090 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004174:	bf00      	nop
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004188:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0203 	bic.w	r2, r2, #3
 8004198:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419e:	f043 0210 	orr.w	r2, r3, #16
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f7ff ff78 	bl	80040a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041b4:	bf00      	nop
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f7ff ff64 	bl	80040a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041dc:	bf00      	nop
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	603b      	str	r3, [r7, #0]
 80041f0:	4613      	mov	r3, r2
 80041f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041f4:	f7fd fdd8 	bl	8001da8 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fc:	1a9b      	subs	r3, r3, r2
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	4413      	add	r3, r2
 8004202:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004204:	f7fd fdd0 	bl	8001da8 <HAL_GetTick>
 8004208:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800420a:	4b39      	ldr	r3, [pc, #228]	; (80042f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	015b      	lsls	r3, r3, #5
 8004210:	0d1b      	lsrs	r3, r3, #20
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	fb02 f303 	mul.w	r3, r2, r3
 8004218:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800421a:	e054      	b.n	80042c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004222:	d050      	beq.n	80042c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004224:	f7fd fdc0 	bl	8001da8 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	429a      	cmp	r2, r3
 8004232:	d902      	bls.n	800423a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d13d      	bne.n	80042b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004248:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004252:	d111      	bne.n	8004278 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800425c:	d004      	beq.n	8004268 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004266:	d107      	bne.n	8004278 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004276:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004280:	d10f      	bne.n	80042a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e017      	b.n	80042e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4013      	ands	r3, r2
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	bf0c      	ite	eq
 80042d6:	2301      	moveq	r3, #1
 80042d8:	2300      	movne	r3, #0
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	461a      	mov	r2, r3
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d19b      	bne.n	800421c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3720      	adds	r7, #32
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	200000fc 	.word	0x200000fc

080042f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af02      	add	r7, sp, #8
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004300:	4b1b      	ldr	r3, [pc, #108]	; (8004370 <SPI_EndRxTxTransaction+0x7c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a1b      	ldr	r2, [pc, #108]	; (8004374 <SPI_EndRxTxTransaction+0x80>)
 8004306:	fba2 2303 	umull	r2, r3, r2, r3
 800430a:	0d5b      	lsrs	r3, r3, #21
 800430c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004310:	fb02 f303 	mul.w	r3, r2, r3
 8004314:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800431e:	d112      	bne.n	8004346 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2200      	movs	r2, #0
 8004328:	2180      	movs	r1, #128	; 0x80
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f7ff ff5a 	bl	80041e4 <SPI_WaitFlagStateUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d016      	beq.n	8004364 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433a:	f043 0220 	orr.w	r2, r3, #32
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e00f      	b.n	8004366 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00a      	beq.n	8004362 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	3b01      	subs	r3, #1
 8004350:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435c:	2b80      	cmp	r3, #128	; 0x80
 800435e:	d0f2      	beq.n	8004346 <SPI_EndRxTxTransaction+0x52>
 8004360:	e000      	b.n	8004364 <SPI_EndRxTxTransaction+0x70>
        break;
 8004362:	bf00      	nop
  }

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	200000fc 	.word	0x200000fc
 8004374:	165e9f81 	.word	0x165e9f81

08004378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e041      	b.n	800440e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d106      	bne.n	80043a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fd fa9a 	bl	80018d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3304      	adds	r3, #4
 80043b4:	4619      	mov	r1, r3
 80043b6:	4610      	mov	r0, r2
 80043b8:	f000 fddc 	bl	8004f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b01      	cmp	r3, #1
 800442a:	d001      	beq.n	8004430 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e03c      	b.n	80044aa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a1e      	ldr	r2, [pc, #120]	; (80044b8 <HAL_TIM_Base_Start+0xa0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d018      	beq.n	8004474 <HAL_TIM_Base_Start+0x5c>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444a:	d013      	beq.n	8004474 <HAL_TIM_Base_Start+0x5c>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a1a      	ldr	r2, [pc, #104]	; (80044bc <HAL_TIM_Base_Start+0xa4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00e      	beq.n	8004474 <HAL_TIM_Base_Start+0x5c>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a19      	ldr	r2, [pc, #100]	; (80044c0 <HAL_TIM_Base_Start+0xa8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d009      	beq.n	8004474 <HAL_TIM_Base_Start+0x5c>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a17      	ldr	r2, [pc, #92]	; (80044c4 <HAL_TIM_Base_Start+0xac>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d004      	beq.n	8004474 <HAL_TIM_Base_Start+0x5c>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a16      	ldr	r2, [pc, #88]	; (80044c8 <HAL_TIM_Base_Start+0xb0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d111      	bne.n	8004498 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b06      	cmp	r3, #6
 8004484:	d010      	beq.n	80044a8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 0201 	orr.w	r2, r2, #1
 8004494:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004496:	e007      	b.n	80044a8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40010000 	.word	0x40010000
 80044bc:	40000400 	.word	0x40000400
 80044c0:	40000800 	.word	0x40000800
 80044c4:	40000c00 	.word	0x40000c00
 80044c8:	40014000 	.word	0x40014000

080044cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d001      	beq.n	80044e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e044      	b.n	800456e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a1e      	ldr	r2, [pc, #120]	; (800457c <HAL_TIM_Base_Start_IT+0xb0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d018      	beq.n	8004538 <HAL_TIM_Base_Start_IT+0x6c>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450e:	d013      	beq.n	8004538 <HAL_TIM_Base_Start_IT+0x6c>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a1a      	ldr	r2, [pc, #104]	; (8004580 <HAL_TIM_Base_Start_IT+0xb4>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00e      	beq.n	8004538 <HAL_TIM_Base_Start_IT+0x6c>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a19      	ldr	r2, [pc, #100]	; (8004584 <HAL_TIM_Base_Start_IT+0xb8>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d009      	beq.n	8004538 <HAL_TIM_Base_Start_IT+0x6c>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a17      	ldr	r2, [pc, #92]	; (8004588 <HAL_TIM_Base_Start_IT+0xbc>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d004      	beq.n	8004538 <HAL_TIM_Base_Start_IT+0x6c>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a16      	ldr	r2, [pc, #88]	; (800458c <HAL_TIM_Base_Start_IT+0xc0>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d111      	bne.n	800455c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 0307 	and.w	r3, r3, #7
 8004542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2b06      	cmp	r3, #6
 8004548:	d010      	beq.n	800456c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f042 0201 	orr.w	r2, r2, #1
 8004558:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800455a:	e007      	b.n	800456c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40010000 	.word	0x40010000
 8004580:	40000400 	.word	0x40000400
 8004584:	40000800 	.word	0x40000800
 8004588:	40000c00 	.word	0x40000c00
 800458c:	40014000 	.word	0x40014000

08004590 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0201 	bic.w	r2, r2, #1
 80045a6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6a1a      	ldr	r2, [r3, #32]
 80045ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10f      	bne.n	80045d8 <HAL_TIM_Base_Stop_IT+0x48>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6a1a      	ldr	r2, [r3, #32]
 80045be:	f240 4344 	movw	r3, #1092	; 0x444
 80045c2:	4013      	ands	r3, r2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d107      	bne.n	80045d8 <HAL_TIM_Base_Stop_IT+0x48>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0201 	bic.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b082      	sub	sp, #8
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e041      	b.n	8004684 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d106      	bne.n	800461a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7fd f8f1 	bl	80017fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2202      	movs	r2, #2
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3304      	adds	r3, #4
 800462a:	4619      	mov	r1, r3
 800462c:	4610      	mov	r0, r2
 800462e:	f000 fca1 	bl	8004f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d109      	bne.n	80046b0 <HAL_TIM_PWM_Start+0x24>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	bf14      	ite	ne
 80046a8:	2301      	movne	r3, #1
 80046aa:	2300      	moveq	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	e022      	b.n	80046f6 <HAL_TIM_PWM_Start+0x6a>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d109      	bne.n	80046ca <HAL_TIM_PWM_Start+0x3e>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b01      	cmp	r3, #1
 80046c0:	bf14      	ite	ne
 80046c2:	2301      	movne	r3, #1
 80046c4:	2300      	moveq	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	e015      	b.n	80046f6 <HAL_TIM_PWM_Start+0x6a>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d109      	bne.n	80046e4 <HAL_TIM_PWM_Start+0x58>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b01      	cmp	r3, #1
 80046da:	bf14      	ite	ne
 80046dc:	2301      	movne	r3, #1
 80046de:	2300      	moveq	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	e008      	b.n	80046f6 <HAL_TIM_PWM_Start+0x6a>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	bf14      	ite	ne
 80046f0:	2301      	movne	r3, #1
 80046f2:	2300      	moveq	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e068      	b.n	80047d0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d104      	bne.n	800470e <HAL_TIM_PWM_Start+0x82>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800470c:	e013      	b.n	8004736 <HAL_TIM_PWM_Start+0xaa>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b04      	cmp	r3, #4
 8004712:	d104      	bne.n	800471e <HAL_TIM_PWM_Start+0x92>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800471c:	e00b      	b.n	8004736 <HAL_TIM_PWM_Start+0xaa>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b08      	cmp	r3, #8
 8004722:	d104      	bne.n	800472e <HAL_TIM_PWM_Start+0xa2>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800472c:	e003      	b.n	8004736 <HAL_TIM_PWM_Start+0xaa>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2202      	movs	r2, #2
 8004732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2201      	movs	r2, #1
 800473c:	6839      	ldr	r1, [r7, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f000 febe 	bl	80054c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a23      	ldr	r2, [pc, #140]	; (80047d8 <HAL_TIM_PWM_Start+0x14c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d107      	bne.n	800475e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800475c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1d      	ldr	r2, [pc, #116]	; (80047d8 <HAL_TIM_PWM_Start+0x14c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d018      	beq.n	800479a <HAL_TIM_PWM_Start+0x10e>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004770:	d013      	beq.n	800479a <HAL_TIM_PWM_Start+0x10e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a19      	ldr	r2, [pc, #100]	; (80047dc <HAL_TIM_PWM_Start+0x150>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00e      	beq.n	800479a <HAL_TIM_PWM_Start+0x10e>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a17      	ldr	r2, [pc, #92]	; (80047e0 <HAL_TIM_PWM_Start+0x154>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d009      	beq.n	800479a <HAL_TIM_PWM_Start+0x10e>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a16      	ldr	r2, [pc, #88]	; (80047e4 <HAL_TIM_PWM_Start+0x158>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d004      	beq.n	800479a <HAL_TIM_PWM_Start+0x10e>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a14      	ldr	r2, [pc, #80]	; (80047e8 <HAL_TIM_PWM_Start+0x15c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d111      	bne.n	80047be <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b06      	cmp	r3, #6
 80047aa:	d010      	beq.n	80047ce <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047bc:	e007      	b.n	80047ce <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f042 0201 	orr.w	r2, r2, #1
 80047cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40010000 	.word	0x40010000
 80047dc:	40000400 	.word	0x40000400
 80047e0:	40000800 	.word	0x40000800
 80047e4:	40000c00 	.word	0x40000c00
 80047e8:	40014000 	.word	0x40014000

080047ec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2200      	movs	r2, #0
 80047fc:	6839      	ldr	r1, [r7, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 fe5e 	bl	80054c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a29      	ldr	r2, [pc, #164]	; (80048b0 <HAL_TIM_PWM_Stop+0xc4>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d117      	bne.n	800483e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6a1a      	ldr	r2, [r3, #32]
 8004814:	f241 1311 	movw	r3, #4369	; 0x1111
 8004818:	4013      	ands	r3, r2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10f      	bne.n	800483e <HAL_TIM_PWM_Stop+0x52>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6a1a      	ldr	r2, [r3, #32]
 8004824:	f240 4344 	movw	r3, #1092	; 0x444
 8004828:	4013      	ands	r3, r2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d107      	bne.n	800483e <HAL_TIM_PWM_Stop+0x52>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800483c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6a1a      	ldr	r2, [r3, #32]
 8004844:	f241 1311 	movw	r3, #4369	; 0x1111
 8004848:	4013      	ands	r3, r2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10f      	bne.n	800486e <HAL_TIM_PWM_Stop+0x82>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6a1a      	ldr	r2, [r3, #32]
 8004854:	f240 4344 	movw	r3, #1092	; 0x444
 8004858:	4013      	ands	r3, r2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d107      	bne.n	800486e <HAL_TIM_PWM_Stop+0x82>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0201 	bic.w	r2, r2, #1
 800486c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d104      	bne.n	800487e <HAL_TIM_PWM_Stop+0x92>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800487c:	e013      	b.n	80048a6 <HAL_TIM_PWM_Stop+0xba>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b04      	cmp	r3, #4
 8004882:	d104      	bne.n	800488e <HAL_TIM_PWM_Stop+0xa2>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800488c:	e00b      	b.n	80048a6 <HAL_TIM_PWM_Stop+0xba>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b08      	cmp	r3, #8
 8004892:	d104      	bne.n	800489e <HAL_TIM_PWM_Stop+0xb2>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800489c:	e003      	b.n	80048a6 <HAL_TIM_PWM_Stop+0xba>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40010000 	.word	0x40010000

080048b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e097      	b.n	80049f8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d106      	bne.n	80048e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7fc ffb3 	bl	8001848 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2202      	movs	r2, #2
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6812      	ldr	r2, [r2, #0]
 80048f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048f8:	f023 0307 	bic.w	r3, r3, #7
 80048fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3304      	adds	r3, #4
 8004906:	4619      	mov	r1, r3
 8004908:	4610      	mov	r0, r2
 800490a:	f000 fb33 	bl	8004f74 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	4313      	orrs	r3, r2
 800492e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004936:	f023 0303 	bic.w	r3, r3, #3
 800493a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	021b      	lsls	r3, r3, #8
 8004946:	4313      	orrs	r3, r2
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	4313      	orrs	r3, r2
 800494c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004954:	f023 030c 	bic.w	r3, r3, #12
 8004958:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004960:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004964:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	021b      	lsls	r3, r3, #8
 8004970:	4313      	orrs	r3, r2
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	011a      	lsls	r2, r3, #4
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	031b      	lsls	r3, r3, #12
 8004984:	4313      	orrs	r3, r2
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004992:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800499a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	4313      	orrs	r3, r2
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d122      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d11b      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f06f 0202 	mvn.w	r2, #2
 8004a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 fa77 	bl	8004f36 <HAL_TIM_IC_CaptureCallback>
 8004a48:	e005      	b.n	8004a56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fa69 	bl	8004f22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 fa7a 	bl	8004f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	f003 0304 	and.w	r3, r3, #4
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d122      	bne.n	8004ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d11b      	bne.n	8004ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f06f 0204 	mvn.w	r2, #4
 8004a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2202      	movs	r2, #2
 8004a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 fa4d 	bl	8004f36 <HAL_TIM_IC_CaptureCallback>
 8004a9c:	e005      	b.n	8004aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fa3f 	bl	8004f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fa50 	bl	8004f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d122      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d11b      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f06f 0208 	mvn.w	r2, #8
 8004ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2204      	movs	r2, #4
 8004ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 fa23 	bl	8004f36 <HAL_TIM_IC_CaptureCallback>
 8004af0:	e005      	b.n	8004afe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fa15 	bl	8004f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 fa26 	bl	8004f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f003 0310 	and.w	r3, r3, #16
 8004b0e:	2b10      	cmp	r3, #16
 8004b10:	d122      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f003 0310 	and.w	r3, r3, #16
 8004b1c:	2b10      	cmp	r3, #16
 8004b1e:	d11b      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f06f 0210 	mvn.w	r2, #16
 8004b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2208      	movs	r2, #8
 8004b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f9f9 	bl	8004f36 <HAL_TIM_IC_CaptureCallback>
 8004b44:	e005      	b.n	8004b52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f9eb 	bl	8004f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f9fc 	bl	8004f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d10e      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d107      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f06f 0201 	mvn.w	r2, #1
 8004b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fc fb2a 	bl	80011d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8e:	2b80      	cmp	r3, #128	; 0x80
 8004b90:	d10e      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9c:	2b80      	cmp	r3, #128	; 0x80
 8004b9e:	d107      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fd26 	bl	80055fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bba:	2b40      	cmp	r3, #64	; 0x40
 8004bbc:	d10e      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc8:	2b40      	cmp	r3, #64	; 0x40
 8004bca:	d107      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f9c1 	bl	8004f5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b20      	cmp	r3, #32
 8004be8:	d10e      	bne.n	8004c08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f003 0320 	and.w	r3, r3, #32
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	d107      	bne.n	8004c08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f06f 0220 	mvn.w	r2, #32
 8004c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fcf0 	bl	80055e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c08:	bf00      	nop
 8004c0a:	3708      	adds	r7, #8
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e0ae      	b.n	8004d8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b0c      	cmp	r3, #12
 8004c3a:	f200 809f 	bhi.w	8004d7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c3e:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c44:	08004c79 	.word	0x08004c79
 8004c48:	08004d7d 	.word	0x08004d7d
 8004c4c:	08004d7d 	.word	0x08004d7d
 8004c50:	08004d7d 	.word	0x08004d7d
 8004c54:	08004cb9 	.word	0x08004cb9
 8004c58:	08004d7d 	.word	0x08004d7d
 8004c5c:	08004d7d 	.word	0x08004d7d
 8004c60:	08004d7d 	.word	0x08004d7d
 8004c64:	08004cfb 	.word	0x08004cfb
 8004c68:	08004d7d 	.word	0x08004d7d
 8004c6c:	08004d7d 	.word	0x08004d7d
 8004c70:	08004d7d 	.word	0x08004d7d
 8004c74:	08004d3b 	.word	0x08004d3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68b9      	ldr	r1, [r7, #8]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 f9f8 	bl	8005074 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0208 	orr.w	r2, r2, #8
 8004c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	699a      	ldr	r2, [r3, #24]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0204 	bic.w	r2, r2, #4
 8004ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6999      	ldr	r1, [r3, #24]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	691a      	ldr	r2, [r3, #16]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	619a      	str	r2, [r3, #24]
      break;
 8004cb6:	e064      	b.n	8004d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68b9      	ldr	r1, [r7, #8]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 fa3e 	bl	8005140 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699a      	ldr	r2, [r3, #24]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6999      	ldr	r1, [r3, #24]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	021a      	lsls	r2, r3, #8
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	619a      	str	r2, [r3, #24]
      break;
 8004cf8:	e043      	b.n	8004d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fa89 	bl	8005218 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69da      	ldr	r2, [r3, #28]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0208 	orr.w	r2, r2, #8
 8004d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69da      	ldr	r2, [r3, #28]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0204 	bic.w	r2, r2, #4
 8004d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	69d9      	ldr	r1, [r3, #28]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	691a      	ldr	r2, [r3, #16]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	61da      	str	r2, [r3, #28]
      break;
 8004d38:	e023      	b.n	8004d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68b9      	ldr	r1, [r7, #8]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 fad3 	bl	80052ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69da      	ldr	r2, [r3, #28]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	69d9      	ldr	r1, [r3, #28]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	021a      	lsls	r2, r3, #8
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	61da      	str	r2, [r3, #28]
      break;
 8004d7a:	e002      	b.n	8004d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_TIM_ConfigClockSource+0x1c>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e0b4      	b.n	8004f1a <HAL_TIM_ConfigClockSource+0x186>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de8:	d03e      	beq.n	8004e68 <HAL_TIM_ConfigClockSource+0xd4>
 8004dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dee:	f200 8087 	bhi.w	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df6:	f000 8086 	beq.w	8004f06 <HAL_TIM_ConfigClockSource+0x172>
 8004dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dfe:	d87f      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e00:	2b70      	cmp	r3, #112	; 0x70
 8004e02:	d01a      	beq.n	8004e3a <HAL_TIM_ConfigClockSource+0xa6>
 8004e04:	2b70      	cmp	r3, #112	; 0x70
 8004e06:	d87b      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e08:	2b60      	cmp	r3, #96	; 0x60
 8004e0a:	d050      	beq.n	8004eae <HAL_TIM_ConfigClockSource+0x11a>
 8004e0c:	2b60      	cmp	r3, #96	; 0x60
 8004e0e:	d877      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e10:	2b50      	cmp	r3, #80	; 0x50
 8004e12:	d03c      	beq.n	8004e8e <HAL_TIM_ConfigClockSource+0xfa>
 8004e14:	2b50      	cmp	r3, #80	; 0x50
 8004e16:	d873      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e18:	2b40      	cmp	r3, #64	; 0x40
 8004e1a:	d058      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0x13a>
 8004e1c:	2b40      	cmp	r3, #64	; 0x40
 8004e1e:	d86f      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e20:	2b30      	cmp	r3, #48	; 0x30
 8004e22:	d064      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0x15a>
 8004e24:	2b30      	cmp	r3, #48	; 0x30
 8004e26:	d86b      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e28:	2b20      	cmp	r3, #32
 8004e2a:	d060      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0x15a>
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d867      	bhi.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d05c      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0x15a>
 8004e34:	2b10      	cmp	r3, #16
 8004e36:	d05a      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0x15a>
 8004e38:	e062      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6818      	ldr	r0, [r3, #0]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	6899      	ldr	r1, [r3, #8]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f000 fb19 	bl	8005480 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	609a      	str	r2, [r3, #8]
      break;
 8004e66:	e04f      	b.n	8004f08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	6899      	ldr	r1, [r3, #8]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f000 fb02 	bl	8005480 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e8a:	609a      	str	r2, [r3, #8]
      break;
 8004e8c:	e03c      	b.n	8004f08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	6859      	ldr	r1, [r3, #4]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	f000 fa76 	bl	800538c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2150      	movs	r1, #80	; 0x50
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 facf 	bl	800544a <TIM_ITRx_SetConfig>
      break;
 8004eac:	e02c      	b.n	8004f08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6859      	ldr	r1, [r3, #4]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f000 fa95 	bl	80053ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2160      	movs	r1, #96	; 0x60
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 fabf 	bl	800544a <TIM_ITRx_SetConfig>
      break;
 8004ecc:	e01c      	b.n	8004f08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	6859      	ldr	r1, [r3, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	461a      	mov	r2, r3
 8004edc:	f000 fa56 	bl	800538c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2140      	movs	r1, #64	; 0x40
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 faaf 	bl	800544a <TIM_ITRx_SetConfig>
      break;
 8004eec:	e00c      	b.n	8004f08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	4610      	mov	r0, r2
 8004efa:	f000 faa6 	bl	800544a <TIM_ITRx_SetConfig>
      break;
 8004efe:	e003      	b.n	8004f08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	73fb      	strb	r3, [r7, #15]
      break;
 8004f04:	e000      	b.n	8004f08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
	...

08004f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a34      	ldr	r2, [pc, #208]	; (8005058 <TIM_Base_SetConfig+0xe4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d00f      	beq.n	8004fac <TIM_Base_SetConfig+0x38>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f92:	d00b      	beq.n	8004fac <TIM_Base_SetConfig+0x38>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a31      	ldr	r2, [pc, #196]	; (800505c <TIM_Base_SetConfig+0xe8>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d007      	beq.n	8004fac <TIM_Base_SetConfig+0x38>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a30      	ldr	r2, [pc, #192]	; (8005060 <TIM_Base_SetConfig+0xec>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d003      	beq.n	8004fac <TIM_Base_SetConfig+0x38>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a2f      	ldr	r2, [pc, #188]	; (8005064 <TIM_Base_SetConfig+0xf0>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d108      	bne.n	8004fbe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a25      	ldr	r2, [pc, #148]	; (8005058 <TIM_Base_SetConfig+0xe4>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d01b      	beq.n	8004ffe <TIM_Base_SetConfig+0x8a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fcc:	d017      	beq.n	8004ffe <TIM_Base_SetConfig+0x8a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a22      	ldr	r2, [pc, #136]	; (800505c <TIM_Base_SetConfig+0xe8>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d013      	beq.n	8004ffe <TIM_Base_SetConfig+0x8a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a21      	ldr	r2, [pc, #132]	; (8005060 <TIM_Base_SetConfig+0xec>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00f      	beq.n	8004ffe <TIM_Base_SetConfig+0x8a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a20      	ldr	r2, [pc, #128]	; (8005064 <TIM_Base_SetConfig+0xf0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00b      	beq.n	8004ffe <TIM_Base_SetConfig+0x8a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a1f      	ldr	r2, [pc, #124]	; (8005068 <TIM_Base_SetConfig+0xf4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d007      	beq.n	8004ffe <TIM_Base_SetConfig+0x8a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a1e      	ldr	r2, [pc, #120]	; (800506c <TIM_Base_SetConfig+0xf8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d003      	beq.n	8004ffe <TIM_Base_SetConfig+0x8a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a1d      	ldr	r2, [pc, #116]	; (8005070 <TIM_Base_SetConfig+0xfc>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d108      	bne.n	8005010 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	4313      	orrs	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a08      	ldr	r2, [pc, #32]	; (8005058 <TIM_Base_SetConfig+0xe4>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d103      	bne.n	8005044 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	615a      	str	r2, [r3, #20]
}
 800504a:	bf00      	nop
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40010000 	.word	0x40010000
 800505c:	40000400 	.word	0x40000400
 8005060:	40000800 	.word	0x40000800
 8005064:	40000c00 	.word	0x40000c00
 8005068:	40014000 	.word	0x40014000
 800506c:	40014400 	.word	0x40014400
 8005070:	40014800 	.word	0x40014800

08005074 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	f023 0201 	bic.w	r2, r3, #1
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0303 	bic.w	r3, r3, #3
 80050aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f023 0302 	bic.w	r3, r3, #2
 80050bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a1c      	ldr	r2, [pc, #112]	; (800513c <TIM_OC1_SetConfig+0xc8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d10c      	bne.n	80050ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f023 0308 	bic.w	r3, r3, #8
 80050d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f023 0304 	bic.w	r3, r3, #4
 80050e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a13      	ldr	r2, [pc, #76]	; (800513c <TIM_OC1_SetConfig+0xc8>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d111      	bne.n	8005116 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	4313      	orrs	r3, r2
 800510a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	621a      	str	r2, [r3, #32]
}
 8005130:	bf00      	nop
 8005132:	371c      	adds	r7, #28
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	40010000 	.word	0x40010000

08005140 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	f023 0210 	bic.w	r2, r3, #16
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800516e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	021b      	lsls	r3, r3, #8
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f023 0320 	bic.w	r3, r3, #32
 800518a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	4313      	orrs	r3, r2
 8005196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a1e      	ldr	r2, [pc, #120]	; (8005214 <TIM_OC2_SetConfig+0xd4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d10d      	bne.n	80051bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a15      	ldr	r2, [pc, #84]	; (8005214 <TIM_OC2_SetConfig+0xd4>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d113      	bne.n	80051ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	4313      	orrs	r3, r2
 80051de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	621a      	str	r2, [r3, #32]
}
 8005206:	bf00      	nop
 8005208:	371c      	adds	r7, #28
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40010000 	.word	0x40010000

08005218 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f023 0303 	bic.w	r3, r3, #3
 800524e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	021b      	lsls	r3, r3, #8
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a1d      	ldr	r2, [pc, #116]	; (80052e8 <TIM_OC3_SetConfig+0xd0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d10d      	bne.n	8005292 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800527c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	021b      	lsls	r3, r3, #8
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	4313      	orrs	r3, r2
 8005288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a14      	ldr	r2, [pc, #80]	; (80052e8 <TIM_OC3_SetConfig+0xd0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d113      	bne.n	80052c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	4313      	orrs	r3, r2
 80052c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	621a      	str	r2, [r3, #32]
}
 80052dc:	bf00      	nop
 80052de:	371c      	adds	r7, #28
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	40010000 	.word	0x40010000

080052ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800531a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	021b      	lsls	r3, r3, #8
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4313      	orrs	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005336:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	031b      	lsls	r3, r3, #12
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a10      	ldr	r2, [pc, #64]	; (8005388 <TIM_OC4_SetConfig+0x9c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d109      	bne.n	8005360 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005352:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	019b      	lsls	r3, r3, #6
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	621a      	str	r2, [r3, #32]
}
 800537a:	bf00      	nop
 800537c:	371c      	adds	r7, #28
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	40010000 	.word	0x40010000

0800538c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	f023 0201 	bic.w	r2, r3, #1
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f023 030a 	bic.w	r3, r3, #10
 80053c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	621a      	str	r2, [r3, #32]
}
 80053de:	bf00      	nop
 80053e0:	371c      	adds	r7, #28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b087      	sub	sp, #28
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	60f8      	str	r0, [r7, #12]
 80053f2:	60b9      	str	r1, [r7, #8]
 80053f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	f023 0210 	bic.w	r2, r3, #16
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005414:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	031b      	lsls	r3, r3, #12
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	4313      	orrs	r3, r2
 800541e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005426:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	621a      	str	r2, [r3, #32]
}
 800543e:	bf00      	nop
 8005440:	371c      	adds	r7, #28
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800544a:	b480      	push	{r7}
 800544c:	b085      	sub	sp, #20
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005460:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4313      	orrs	r3, r2
 8005468:	f043 0307 	orr.w	r3, r3, #7
 800546c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	609a      	str	r2, [r3, #8]
}
 8005474:	bf00      	nop
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800549a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	021a      	lsls	r2, r3, #8
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	609a      	str	r2, [r3, #8]
}
 80054b4:	bf00      	nop
 80054b6:	371c      	adds	r7, #28
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f003 031f 	and.w	r3, r3, #31
 80054d2:	2201      	movs	r2, #1
 80054d4:	fa02 f303 	lsl.w	r3, r2, r3
 80054d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6a1a      	ldr	r2, [r3, #32]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	43db      	mvns	r3, r3
 80054e2:	401a      	ands	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a1a      	ldr	r2, [r3, #32]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f003 031f 	and.w	r3, r3, #31
 80054f2:	6879      	ldr	r1, [r7, #4]
 80054f4:	fa01 f303 	lsl.w	r3, r1, r3
 80054f8:	431a      	orrs	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	621a      	str	r2, [r3, #32]
}
 80054fe:	bf00      	nop
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
	...

0800550c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005520:	2302      	movs	r3, #2
 8005522:	e050      	b.n	80055c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2202      	movs	r2, #2
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a1c      	ldr	r2, [pc, #112]	; (80055d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d018      	beq.n	800559a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005570:	d013      	beq.n	800559a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a18      	ldr	r2, [pc, #96]	; (80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00e      	beq.n	800559a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a16      	ldr	r2, [pc, #88]	; (80055dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d009      	beq.n	800559a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a15      	ldr	r2, [pc, #84]	; (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d004      	beq.n	800559a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a13      	ldr	r2, [pc, #76]	; (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d10c      	bne.n	80055b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	40010000 	.word	0x40010000
 80055d8:	40000400 	.word	0x40000400
 80055dc:	40000800 	.word	0x40000800
 80055e0:	40000c00 	.word	0x40000c00
 80055e4:	40014000 	.word	0x40014000

080055e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e03f      	b.n	80056a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d106      	bne.n	800563c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7fc f9ea 	bl	8001a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2224      	movs	r2, #36	; 0x24
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68da      	ldr	r2, [r3, #12]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005652:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 fddf 	bl	8006218 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005668:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	695a      	ldr	r2, [r3, #20]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005678:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68da      	ldr	r2, [r3, #12]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005688:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b08a      	sub	sp, #40	; 0x28
 80056ae:	af02      	add	r7, sp, #8
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	603b      	str	r3, [r7, #0]
 80056b6:	4613      	mov	r3, r2
 80056b8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	d17c      	bne.n	80057c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <HAL_UART_Transmit+0x2c>
 80056d0:	88fb      	ldrh	r3, [r7, #6]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e075      	b.n	80057c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d101      	bne.n	80056e8 <HAL_UART_Transmit+0x3e>
 80056e4:	2302      	movs	r3, #2
 80056e6:	e06e      	b.n	80057c6 <HAL_UART_Transmit+0x11c>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2221      	movs	r2, #33	; 0x21
 80056fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056fe:	f7fc fb53 	bl	8001da8 <HAL_GetTick>
 8005702:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	88fa      	ldrh	r2, [r7, #6]
 8005708:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	88fa      	ldrh	r2, [r7, #6]
 800570e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005718:	d108      	bne.n	800572c <HAL_UART_Transmit+0x82>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d104      	bne.n	800572c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005722:	2300      	movs	r3, #0
 8005724:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	61bb      	str	r3, [r7, #24]
 800572a:	e003      	b.n	8005734 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005730:	2300      	movs	r3, #0
 8005732:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800573c:	e02a      	b.n	8005794 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2200      	movs	r2, #0
 8005746:	2180      	movs	r1, #128	; 0x80
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 fb1f 	bl	8005d8c <UART_WaitOnFlagUntilTimeout>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e036      	b.n	80057c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10b      	bne.n	8005776 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	461a      	mov	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800576c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	3302      	adds	r3, #2
 8005772:	61bb      	str	r3, [r7, #24]
 8005774:	e007      	b.n	8005786 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	781a      	ldrb	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	3301      	adds	r3, #1
 8005784:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800578a:	b29b      	uxth	r3, r3
 800578c:	3b01      	subs	r3, #1
 800578e:	b29a      	uxth	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005798:	b29b      	uxth	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1cf      	bne.n	800573e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	2200      	movs	r2, #0
 80057a6:	2140      	movs	r1, #64	; 0x40
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 faef 	bl	8005d8c <UART_WaitOnFlagUntilTimeout>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e006      	b.n	80057c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2220      	movs	r2, #32
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	e000      	b.n	80057c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80057c4:	2302      	movs	r3, #2
  }
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3720      	adds	r7, #32
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b084      	sub	sp, #16
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	4613      	mov	r3, r2
 80057da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	d11d      	bne.n	8005824 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d002      	beq.n	80057f4 <HAL_UART_Receive_IT+0x26>
 80057ee:	88fb      	ldrh	r3, [r7, #6]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e016      	b.n	8005826 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d101      	bne.n	8005806 <HAL_UART_Receive_IT+0x38>
 8005802:	2302      	movs	r3, #2
 8005804:	e00f      	b.n	8005826 <HAL_UART_Receive_IT+0x58>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005814:	88fb      	ldrh	r3, [r7, #6]
 8005816:	461a      	mov	r2, r3
 8005818:	68b9      	ldr	r1, [r7, #8]
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 fb24 	bl	8005e68 <UART_Start_Receive_IT>
 8005820:	4603      	mov	r3, r0
 8005822:	e000      	b.n	8005826 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005824:	2302      	movs	r3, #2
  }
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
	...

08005830 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b0ba      	sub	sp, #232	; 0xe8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005856:	2300      	movs	r3, #0
 8005858:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800585c:	2300      	movs	r3, #0
 800585e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005866:	f003 030f 	and.w	r3, r3, #15
 800586a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800586e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10f      	bne.n	8005896 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b00      	cmp	r3, #0
 8005880:	d009      	beq.n	8005896 <HAL_UART_IRQHandler+0x66>
 8005882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005886:	f003 0320 	and.w	r3, r3, #32
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fc07 	bl	80060a2 <UART_Receive_IT>
      return;
 8005894:	e256      	b.n	8005d44 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005896:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 80de 	beq.w	8005a5c <HAL_UART_IRQHandler+0x22c>
 80058a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d106      	bne.n	80058ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 80d1 	beq.w	8005a5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00b      	beq.n	80058de <HAL_UART_IRQHandler+0xae>
 80058c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d005      	beq.n	80058de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	f043 0201 	orr.w	r2, r3, #1
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058e2:	f003 0304 	and.w	r3, r3, #4
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00b      	beq.n	8005902 <HAL_UART_IRQHandler+0xd2>
 80058ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d005      	beq.n	8005902 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	f043 0202 	orr.w	r2, r3, #2
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00b      	beq.n	8005926 <HAL_UART_IRQHandler+0xf6>
 800590e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d005      	beq.n	8005926 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	f043 0204 	orr.w	r2, r3, #4
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592a:	f003 0308 	and.w	r3, r3, #8
 800592e:	2b00      	cmp	r3, #0
 8005930:	d011      	beq.n	8005956 <HAL_UART_IRQHandler+0x126>
 8005932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005936:	f003 0320 	and.w	r3, r3, #32
 800593a:	2b00      	cmp	r3, #0
 800593c:	d105      	bne.n	800594a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800593e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d005      	beq.n	8005956 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	f043 0208 	orr.w	r2, r3, #8
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 81ed 	beq.w	8005d3a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b00      	cmp	r3, #0
 800596a:	d008      	beq.n	800597e <HAL_UART_IRQHandler+0x14e>
 800596c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005970:	f003 0320 	and.w	r3, r3, #32
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fb92 	bl	80060a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005988:	2b40      	cmp	r3, #64	; 0x40
 800598a:	bf0c      	ite	eq
 800598c:	2301      	moveq	r3, #1
 800598e:	2300      	movne	r3, #0
 8005990:	b2db      	uxtb	r3, r3
 8005992:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d103      	bne.n	80059aa <HAL_UART_IRQHandler+0x17a>
 80059a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d04f      	beq.n	8005a4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fa9a 	bl	8005ee4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ba:	2b40      	cmp	r3, #64	; 0x40
 80059bc:	d141      	bne.n	8005a42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3314      	adds	r3, #20
 80059c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059cc:	e853 3f00 	ldrex	r3, [r3]
 80059d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3314      	adds	r3, #20
 80059e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80059ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80059ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80059f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1d9      	bne.n	80059be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d013      	beq.n	8005a3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	4a7d      	ldr	r2, [pc, #500]	; (8005c0c <HAL_UART_IRQHandler+0x3dc>)
 8005a18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fd f828 	bl	8002a74 <HAL_DMA_Abort_IT>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d016      	beq.n	8005a58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a34:	4610      	mov	r0, r2
 8005a36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a38:	e00e      	b.n	8005a58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f990 	bl	8005d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a40:	e00a      	b.n	8005a58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f98c 	bl	8005d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a48:	e006      	b.n	8005a58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f988 	bl	8005d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a56:	e170      	b.n	8005d3a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a58:	bf00      	nop
    return;
 8005a5a:	e16e      	b.n	8005d3a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	f040 814a 	bne.w	8005cfa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a6a:	f003 0310 	and.w	r3, r3, #16
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 8143 	beq.w	8005cfa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 813c 	beq.w	8005cfa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a82:	2300      	movs	r3, #0
 8005a84:	60bb      	str	r3, [r7, #8]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	60bb      	str	r3, [r7, #8]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	60bb      	str	r3, [r7, #8]
 8005a96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa2:	2b40      	cmp	r3, #64	; 0x40
 8005aa4:	f040 80b4 	bne.w	8005c10 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ab4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 8140 	beq.w	8005d3e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ac2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	f080 8139 	bcs.w	8005d3e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ad2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ade:	f000 8088 	beq.w	8005bf2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	330c      	adds	r3, #12
 8005ae8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005af0:	e853 3f00 	ldrex	r3, [r3]
 8005af4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005af8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	330c      	adds	r3, #12
 8005b0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b1e:	e841 2300 	strex	r3, r2, [r1]
 8005b22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1d9      	bne.n	8005ae2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	3314      	adds	r3, #20
 8005b34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b38:	e853 3f00 	ldrex	r3, [r3]
 8005b3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b40:	f023 0301 	bic.w	r3, r3, #1
 8005b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3314      	adds	r3, #20
 8005b4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b5e:	e841 2300 	strex	r3, r2, [r1]
 8005b62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1e1      	bne.n	8005b2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3314      	adds	r3, #20
 8005b70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b74:	e853 3f00 	ldrex	r3, [r3]
 8005b78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3314      	adds	r3, #20
 8005b8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e3      	bne.n	8005b6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	330c      	adds	r3, #12
 8005bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bba:	e853 3f00 	ldrex	r3, [r3]
 8005bbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bc2:	f023 0310 	bic.w	r3, r3, #16
 8005bc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	330c      	adds	r3, #12
 8005bd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005bd4:	65ba      	str	r2, [r7, #88]	; 0x58
 8005bd6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bdc:	e841 2300 	strex	r3, r2, [r1]
 8005be0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1e3      	bne.n	8005bb0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fc fed1 	bl	8002994 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	4619      	mov	r1, r3
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f8b6 	bl	8005d74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c08:	e099      	b.n	8005d3e <HAL_UART_IRQHandler+0x50e>
 8005c0a:	bf00      	nop
 8005c0c:	08005fab 	.word	0x08005fab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 808b 	beq.w	8005d42 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005c2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 8086 	beq.w	8005d42 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	330c      	adds	r3, #12
 8005c3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c40:	e853 3f00 	ldrex	r3, [r3]
 8005c44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	330c      	adds	r3, #12
 8005c56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c5a:	647a      	str	r2, [r7, #68]	; 0x44
 8005c5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c62:	e841 2300 	strex	r3, r2, [r1]
 8005c66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1e3      	bne.n	8005c36 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3314      	adds	r3, #20
 8005c74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	e853 3f00 	ldrex	r3, [r3]
 8005c7c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	f023 0301 	bic.w	r3, r3, #1
 8005c84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3314      	adds	r3, #20
 8005c8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c92:	633a      	str	r2, [r7, #48]	; 0x30
 8005c94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e3      	bne.n	8005c6e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	330c      	adds	r3, #12
 8005cba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0310 	bic.w	r3, r3, #16
 8005cca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	330c      	adds	r3, #12
 8005cd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005cd8:	61fa      	str	r2, [r7, #28]
 8005cda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	69b9      	ldr	r1, [r7, #24]
 8005cde:	69fa      	ldr	r2, [r7, #28]
 8005ce0:	e841 2300 	strex	r3, r2, [r1]
 8005ce4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e3      	bne.n	8005cb4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f83e 	bl	8005d74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cf8:	e023      	b.n	8005d42 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d009      	beq.n	8005d1a <HAL_UART_IRQHandler+0x4ea>
 8005d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f95d 	bl	8005fd2 <UART_Transmit_IT>
    return;
 8005d18:	e014      	b.n	8005d44 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00e      	beq.n	8005d44 <HAL_UART_IRQHandler+0x514>
 8005d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d008      	beq.n	8005d44 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f99d 	bl	8006072 <UART_EndTransmit_IT>
    return;
 8005d38:	e004      	b.n	8005d44 <HAL_UART_IRQHandler+0x514>
    return;
 8005d3a:	bf00      	nop
 8005d3c:	e002      	b.n	8005d44 <HAL_UART_IRQHandler+0x514>
      return;
 8005d3e:	bf00      	nop
 8005d40:	e000      	b.n	8005d44 <HAL_UART_IRQHandler+0x514>
      return;
 8005d42:	bf00      	nop
  }
}
 8005d44:	37e8      	adds	r7, #232	; 0xe8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop

08005d4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b090      	sub	sp, #64	; 0x40
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d9c:	e050      	b.n	8005e40 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005da4:	d04c      	beq.n	8005e40 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d007      	beq.n	8005dbc <UART_WaitOnFlagUntilTimeout+0x30>
 8005dac:	f7fb fffc 	bl	8001da8 <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d241      	bcs.n	8005e40 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	330c      	adds	r3, #12
 8005dc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc6:	e853 3f00 	ldrex	r3, [r3]
 8005dca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	330c      	adds	r3, #12
 8005dda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ddc:	637a      	str	r2, [r7, #52]	; 0x34
 8005dde:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005de2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005de4:	e841 2300 	strex	r3, r2, [r1]
 8005de8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1e5      	bne.n	8005dbc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3314      	adds	r3, #20
 8005df6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	e853 3f00 	ldrex	r3, [r3]
 8005dfe:	613b      	str	r3, [r7, #16]
   return(result);
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f023 0301 	bic.w	r3, r3, #1
 8005e06:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3314      	adds	r3, #20
 8005e0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e10:	623a      	str	r2, [r7, #32]
 8005e12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e14:	69f9      	ldr	r1, [r7, #28]
 8005e16:	6a3a      	ldr	r2, [r7, #32]
 8005e18:	e841 2300 	strex	r3, r2, [r1]
 8005e1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e5      	bne.n	8005df0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e00f      	b.n	8005e60 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	4013      	ands	r3, r2
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	bf0c      	ite	eq
 8005e50:	2301      	moveq	r3, #1
 8005e52:	2300      	movne	r3, #0
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	461a      	mov	r2, r3
 8005e58:	79fb      	ldrb	r3, [r7, #7]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d09f      	beq.n	8005d9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3740      	adds	r7, #64	; 0x40
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	4613      	mov	r3, r2
 8005e74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	88fa      	ldrh	r2, [r7, #6]
 8005e80:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	88fa      	ldrh	r2, [r7, #6]
 8005e86:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2222      	movs	r2, #34	; 0x22
 8005e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d007      	beq.n	8005eb6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eb4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	695a      	ldr	r2, [r3, #20]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f042 0201 	orr.w	r2, r2, #1
 8005ec4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68da      	ldr	r2, [r3, #12]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f042 0220 	orr.w	r2, r2, #32
 8005ed4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3714      	adds	r7, #20
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b095      	sub	sp, #84	; 0x54
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	330c      	adds	r3, #12
 8005ef2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef6:	e853 3f00 	ldrex	r3, [r3]
 8005efa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	330c      	adds	r3, #12
 8005f0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f0c:	643a      	str	r2, [r7, #64]	; 0x40
 8005f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f14:	e841 2300 	strex	r3, r2, [r1]
 8005f18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1e5      	bne.n	8005eec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3314      	adds	r3, #20
 8005f26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f28:	6a3b      	ldr	r3, [r7, #32]
 8005f2a:	e853 3f00 	ldrex	r3, [r3]
 8005f2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	f023 0301 	bic.w	r3, r3, #1
 8005f36:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3314      	adds	r3, #20
 8005f3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f48:	e841 2300 	strex	r3, r2, [r1]
 8005f4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1e5      	bne.n	8005f20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d119      	bne.n	8005f90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	330c      	adds	r3, #12
 8005f62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	e853 3f00 	ldrex	r3, [r3]
 8005f6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f023 0310 	bic.w	r3, r3, #16
 8005f72:	647b      	str	r3, [r7, #68]	; 0x44
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	330c      	adds	r3, #12
 8005f7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f7c:	61ba      	str	r2, [r7, #24]
 8005f7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f80:	6979      	ldr	r1, [r7, #20]
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	e841 2300 	strex	r3, r2, [r1]
 8005f88:	613b      	str	r3, [r7, #16]
   return(result);
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1e5      	bne.n	8005f5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f9e:	bf00      	nop
 8005fa0:	3754      	adds	r7, #84	; 0x54
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f7ff fecb 	bl	8005d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fca:	bf00      	nop
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b085      	sub	sp, #20
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b21      	cmp	r3, #33	; 0x21
 8005fe4:	d13e      	bne.n	8006064 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fee:	d114      	bne.n	800601a <UART_Transmit_IT+0x48>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d110      	bne.n	800601a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	461a      	mov	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800600c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	1c9a      	adds	r2, r3, #2
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	621a      	str	r2, [r3, #32]
 8006018:	e008      	b.n	800602c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	1c59      	adds	r1, r3, #1
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	6211      	str	r1, [r2, #32]
 8006024:	781a      	ldrb	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006030:	b29b      	uxth	r3, r3
 8006032:	3b01      	subs	r3, #1
 8006034:	b29b      	uxth	r3, r3
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	4619      	mov	r1, r3
 800603a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10f      	bne.n	8006060 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800604e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68da      	ldr	r2, [r3, #12]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800605e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006060:	2300      	movs	r3, #0
 8006062:	e000      	b.n	8006066 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006064:	2302      	movs	r3, #2
  }
}
 8006066:	4618      	mov	r0, r3
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b082      	sub	sp, #8
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68da      	ldr	r2, [r3, #12]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006088:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2220      	movs	r2, #32
 800608e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7ff fe5a 	bl	8005d4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b08c      	sub	sp, #48	; 0x30
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b22      	cmp	r3, #34	; 0x22
 80060b4:	f040 80ab 	bne.w	800620e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060c0:	d117      	bne.n	80060f2 <UART_Receive_IT+0x50>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d113      	bne.n	80060f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060ca:	2300      	movs	r3, #0
 80060cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	b29b      	uxth	r3, r3
 80060dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ea:	1c9a      	adds	r2, r3, #2
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	629a      	str	r2, [r3, #40]	; 0x28
 80060f0:	e026      	b.n	8006140 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80060f8:	2300      	movs	r3, #0
 80060fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006104:	d007      	beq.n	8006116 <UART_Receive_IT+0x74>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10a      	bne.n	8006124 <UART_Receive_IT+0x82>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d106      	bne.n	8006124 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	b2da      	uxtb	r2, r3
 800611e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006120:	701a      	strb	r2, [r3, #0]
 8006122:	e008      	b.n	8006136 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	b2db      	uxtb	r3, r3
 800612c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006130:	b2da      	uxtb	r2, r3
 8006132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006134:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006144:	b29b      	uxth	r3, r3
 8006146:	3b01      	subs	r3, #1
 8006148:	b29b      	uxth	r3, r3
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	4619      	mov	r1, r3
 800614e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006150:	2b00      	cmp	r3, #0
 8006152:	d15a      	bne.n	800620a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68da      	ldr	r2, [r3, #12]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 0220 	bic.w	r2, r2, #32
 8006162:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006172:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695a      	ldr	r2, [r3, #20]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0201 	bic.w	r2, r2, #1
 8006182:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2220      	movs	r2, #32
 8006188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006190:	2b01      	cmp	r3, #1
 8006192:	d135      	bne.n	8006200 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	330c      	adds	r3, #12
 80061a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	e853 3f00 	ldrex	r3, [r3]
 80061a8:	613b      	str	r3, [r7, #16]
   return(result);
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f023 0310 	bic.w	r3, r3, #16
 80061b0:	627b      	str	r3, [r7, #36]	; 0x24
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	330c      	adds	r3, #12
 80061b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ba:	623a      	str	r2, [r7, #32]
 80061bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061be:	69f9      	ldr	r1, [r7, #28]
 80061c0:	6a3a      	ldr	r2, [r7, #32]
 80061c2:	e841 2300 	strex	r3, r2, [r1]
 80061c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1e5      	bne.n	800619a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0310 	and.w	r3, r3, #16
 80061d8:	2b10      	cmp	r3, #16
 80061da:	d10a      	bne.n	80061f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061dc:	2300      	movs	r3, #0
 80061de:	60fb      	str	r3, [r7, #12]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061f6:	4619      	mov	r1, r3
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7ff fdbb 	bl	8005d74 <HAL_UARTEx_RxEventCallback>
 80061fe:	e002      	b.n	8006206 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f7fb f8f9 	bl	80013f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	e002      	b.n	8006210 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800620a:	2300      	movs	r3, #0
 800620c:	e000      	b.n	8006210 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800620e:	2302      	movs	r3, #2
  }
}
 8006210:	4618      	mov	r0, r3
 8006212:	3730      	adds	r7, #48	; 0x30
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800621c:	b0c0      	sub	sp, #256	; 0x100
 800621e:	af00      	add	r7, sp, #0
 8006220:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006234:	68d9      	ldr	r1, [r3, #12]
 8006236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	ea40 0301 	orr.w	r3, r0, r1
 8006240:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006246:	689a      	ldr	r2, [r3, #8]
 8006248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	431a      	orrs	r2, r3
 8006250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	431a      	orrs	r2, r3
 8006258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	4313      	orrs	r3, r2
 8006260:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006270:	f021 010c 	bic.w	r1, r1, #12
 8006274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800627e:	430b      	orrs	r3, r1
 8006280:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800628e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006292:	6999      	ldr	r1, [r3, #24]
 8006294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	ea40 0301 	orr.w	r3, r0, r1
 800629e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	4b8f      	ldr	r3, [pc, #572]	; (80064e4 <UART_SetConfig+0x2cc>)
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d005      	beq.n	80062b8 <UART_SetConfig+0xa0>
 80062ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	4b8d      	ldr	r3, [pc, #564]	; (80064e8 <UART_SetConfig+0x2d0>)
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d104      	bne.n	80062c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062b8:	f7fd fca2 	bl	8003c00 <HAL_RCC_GetPCLK2Freq>
 80062bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80062c0:	e003      	b.n	80062ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062c2:	f7fd fc89 	bl	8003bd8 <HAL_RCC_GetPCLK1Freq>
 80062c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062d4:	f040 810c 	bne.w	80064f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062dc:	2200      	movs	r2, #0
 80062de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80062e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80062ea:	4622      	mov	r2, r4
 80062ec:	462b      	mov	r3, r5
 80062ee:	1891      	adds	r1, r2, r2
 80062f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80062f2:	415b      	adcs	r3, r3
 80062f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80062fa:	4621      	mov	r1, r4
 80062fc:	eb12 0801 	adds.w	r8, r2, r1
 8006300:	4629      	mov	r1, r5
 8006302:	eb43 0901 	adc.w	r9, r3, r1
 8006306:	f04f 0200 	mov.w	r2, #0
 800630a:	f04f 0300 	mov.w	r3, #0
 800630e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006312:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006316:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800631a:	4690      	mov	r8, r2
 800631c:	4699      	mov	r9, r3
 800631e:	4623      	mov	r3, r4
 8006320:	eb18 0303 	adds.w	r3, r8, r3
 8006324:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006328:	462b      	mov	r3, r5
 800632a:	eb49 0303 	adc.w	r3, r9, r3
 800632e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800633e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006342:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006346:	460b      	mov	r3, r1
 8006348:	18db      	adds	r3, r3, r3
 800634a:	653b      	str	r3, [r7, #80]	; 0x50
 800634c:	4613      	mov	r3, r2
 800634e:	eb42 0303 	adc.w	r3, r2, r3
 8006352:	657b      	str	r3, [r7, #84]	; 0x54
 8006354:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006358:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800635c:	f7f9 ff98 	bl	8000290 <__aeabi_uldivmod>
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	4b61      	ldr	r3, [pc, #388]	; (80064ec <UART_SetConfig+0x2d4>)
 8006366:	fba3 2302 	umull	r2, r3, r3, r2
 800636a:	095b      	lsrs	r3, r3, #5
 800636c:	011c      	lsls	r4, r3, #4
 800636e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006372:	2200      	movs	r2, #0
 8006374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006378:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800637c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006380:	4642      	mov	r2, r8
 8006382:	464b      	mov	r3, r9
 8006384:	1891      	adds	r1, r2, r2
 8006386:	64b9      	str	r1, [r7, #72]	; 0x48
 8006388:	415b      	adcs	r3, r3
 800638a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800638c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006390:	4641      	mov	r1, r8
 8006392:	eb12 0a01 	adds.w	sl, r2, r1
 8006396:	4649      	mov	r1, r9
 8006398:	eb43 0b01 	adc.w	fp, r3, r1
 800639c:	f04f 0200 	mov.w	r2, #0
 80063a0:	f04f 0300 	mov.w	r3, #0
 80063a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063b0:	4692      	mov	sl, r2
 80063b2:	469b      	mov	fp, r3
 80063b4:	4643      	mov	r3, r8
 80063b6:	eb1a 0303 	adds.w	r3, sl, r3
 80063ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063be:	464b      	mov	r3, r9
 80063c0:	eb4b 0303 	adc.w	r3, fp, r3
 80063c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80063d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063dc:	460b      	mov	r3, r1
 80063de:	18db      	adds	r3, r3, r3
 80063e0:	643b      	str	r3, [r7, #64]	; 0x40
 80063e2:	4613      	mov	r3, r2
 80063e4:	eb42 0303 	adc.w	r3, r2, r3
 80063e8:	647b      	str	r3, [r7, #68]	; 0x44
 80063ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80063f2:	f7f9 ff4d 	bl	8000290 <__aeabi_uldivmod>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	4611      	mov	r1, r2
 80063fc:	4b3b      	ldr	r3, [pc, #236]	; (80064ec <UART_SetConfig+0x2d4>)
 80063fe:	fba3 2301 	umull	r2, r3, r3, r1
 8006402:	095b      	lsrs	r3, r3, #5
 8006404:	2264      	movs	r2, #100	; 0x64
 8006406:	fb02 f303 	mul.w	r3, r2, r3
 800640a:	1acb      	subs	r3, r1, r3
 800640c:	00db      	lsls	r3, r3, #3
 800640e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006412:	4b36      	ldr	r3, [pc, #216]	; (80064ec <UART_SetConfig+0x2d4>)
 8006414:	fba3 2302 	umull	r2, r3, r3, r2
 8006418:	095b      	lsrs	r3, r3, #5
 800641a:	005b      	lsls	r3, r3, #1
 800641c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006420:	441c      	add	r4, r3
 8006422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006426:	2200      	movs	r2, #0
 8006428:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800642c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006430:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006434:	4642      	mov	r2, r8
 8006436:	464b      	mov	r3, r9
 8006438:	1891      	adds	r1, r2, r2
 800643a:	63b9      	str	r1, [r7, #56]	; 0x38
 800643c:	415b      	adcs	r3, r3
 800643e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006440:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006444:	4641      	mov	r1, r8
 8006446:	1851      	adds	r1, r2, r1
 8006448:	6339      	str	r1, [r7, #48]	; 0x30
 800644a:	4649      	mov	r1, r9
 800644c:	414b      	adcs	r3, r1
 800644e:	637b      	str	r3, [r7, #52]	; 0x34
 8006450:	f04f 0200 	mov.w	r2, #0
 8006454:	f04f 0300 	mov.w	r3, #0
 8006458:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800645c:	4659      	mov	r1, fp
 800645e:	00cb      	lsls	r3, r1, #3
 8006460:	4651      	mov	r1, sl
 8006462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006466:	4651      	mov	r1, sl
 8006468:	00ca      	lsls	r2, r1, #3
 800646a:	4610      	mov	r0, r2
 800646c:	4619      	mov	r1, r3
 800646e:	4603      	mov	r3, r0
 8006470:	4642      	mov	r2, r8
 8006472:	189b      	adds	r3, r3, r2
 8006474:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006478:	464b      	mov	r3, r9
 800647a:	460a      	mov	r2, r1
 800647c:	eb42 0303 	adc.w	r3, r2, r3
 8006480:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006490:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006494:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006498:	460b      	mov	r3, r1
 800649a:	18db      	adds	r3, r3, r3
 800649c:	62bb      	str	r3, [r7, #40]	; 0x28
 800649e:	4613      	mov	r3, r2
 80064a0:	eb42 0303 	adc.w	r3, r2, r3
 80064a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80064ae:	f7f9 feef 	bl	8000290 <__aeabi_uldivmod>
 80064b2:	4602      	mov	r2, r0
 80064b4:	460b      	mov	r3, r1
 80064b6:	4b0d      	ldr	r3, [pc, #52]	; (80064ec <UART_SetConfig+0x2d4>)
 80064b8:	fba3 1302 	umull	r1, r3, r3, r2
 80064bc:	095b      	lsrs	r3, r3, #5
 80064be:	2164      	movs	r1, #100	; 0x64
 80064c0:	fb01 f303 	mul.w	r3, r1, r3
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	00db      	lsls	r3, r3, #3
 80064c8:	3332      	adds	r3, #50	; 0x32
 80064ca:	4a08      	ldr	r2, [pc, #32]	; (80064ec <UART_SetConfig+0x2d4>)
 80064cc:	fba2 2303 	umull	r2, r3, r2, r3
 80064d0:	095b      	lsrs	r3, r3, #5
 80064d2:	f003 0207 	and.w	r2, r3, #7
 80064d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4422      	add	r2, r4
 80064de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064e0:	e106      	b.n	80066f0 <UART_SetConfig+0x4d8>
 80064e2:	bf00      	nop
 80064e4:	40011000 	.word	0x40011000
 80064e8:	40011400 	.word	0x40011400
 80064ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064f4:	2200      	movs	r2, #0
 80064f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80064fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006502:	4642      	mov	r2, r8
 8006504:	464b      	mov	r3, r9
 8006506:	1891      	adds	r1, r2, r2
 8006508:	6239      	str	r1, [r7, #32]
 800650a:	415b      	adcs	r3, r3
 800650c:	627b      	str	r3, [r7, #36]	; 0x24
 800650e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006512:	4641      	mov	r1, r8
 8006514:	1854      	adds	r4, r2, r1
 8006516:	4649      	mov	r1, r9
 8006518:	eb43 0501 	adc.w	r5, r3, r1
 800651c:	f04f 0200 	mov.w	r2, #0
 8006520:	f04f 0300 	mov.w	r3, #0
 8006524:	00eb      	lsls	r3, r5, #3
 8006526:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800652a:	00e2      	lsls	r2, r4, #3
 800652c:	4614      	mov	r4, r2
 800652e:	461d      	mov	r5, r3
 8006530:	4643      	mov	r3, r8
 8006532:	18e3      	adds	r3, r4, r3
 8006534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006538:	464b      	mov	r3, r9
 800653a:	eb45 0303 	adc.w	r3, r5, r3
 800653e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800654e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006552:	f04f 0200 	mov.w	r2, #0
 8006556:	f04f 0300 	mov.w	r3, #0
 800655a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800655e:	4629      	mov	r1, r5
 8006560:	008b      	lsls	r3, r1, #2
 8006562:	4621      	mov	r1, r4
 8006564:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006568:	4621      	mov	r1, r4
 800656a:	008a      	lsls	r2, r1, #2
 800656c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006570:	f7f9 fe8e 	bl	8000290 <__aeabi_uldivmod>
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	4b60      	ldr	r3, [pc, #384]	; (80066fc <UART_SetConfig+0x4e4>)
 800657a:	fba3 2302 	umull	r2, r3, r3, r2
 800657e:	095b      	lsrs	r3, r3, #5
 8006580:	011c      	lsls	r4, r3, #4
 8006582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006586:	2200      	movs	r2, #0
 8006588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800658c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006590:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006594:	4642      	mov	r2, r8
 8006596:	464b      	mov	r3, r9
 8006598:	1891      	adds	r1, r2, r2
 800659a:	61b9      	str	r1, [r7, #24]
 800659c:	415b      	adcs	r3, r3
 800659e:	61fb      	str	r3, [r7, #28]
 80065a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065a4:	4641      	mov	r1, r8
 80065a6:	1851      	adds	r1, r2, r1
 80065a8:	6139      	str	r1, [r7, #16]
 80065aa:	4649      	mov	r1, r9
 80065ac:	414b      	adcs	r3, r1
 80065ae:	617b      	str	r3, [r7, #20]
 80065b0:	f04f 0200 	mov.w	r2, #0
 80065b4:	f04f 0300 	mov.w	r3, #0
 80065b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065bc:	4659      	mov	r1, fp
 80065be:	00cb      	lsls	r3, r1, #3
 80065c0:	4651      	mov	r1, sl
 80065c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065c6:	4651      	mov	r1, sl
 80065c8:	00ca      	lsls	r2, r1, #3
 80065ca:	4610      	mov	r0, r2
 80065cc:	4619      	mov	r1, r3
 80065ce:	4603      	mov	r3, r0
 80065d0:	4642      	mov	r2, r8
 80065d2:	189b      	adds	r3, r3, r2
 80065d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065d8:	464b      	mov	r3, r9
 80065da:	460a      	mov	r2, r1
 80065dc:	eb42 0303 	adc.w	r3, r2, r3
 80065e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80065ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80065f0:	f04f 0200 	mov.w	r2, #0
 80065f4:	f04f 0300 	mov.w	r3, #0
 80065f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80065fc:	4649      	mov	r1, r9
 80065fe:	008b      	lsls	r3, r1, #2
 8006600:	4641      	mov	r1, r8
 8006602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006606:	4641      	mov	r1, r8
 8006608:	008a      	lsls	r2, r1, #2
 800660a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800660e:	f7f9 fe3f 	bl	8000290 <__aeabi_uldivmod>
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	4611      	mov	r1, r2
 8006618:	4b38      	ldr	r3, [pc, #224]	; (80066fc <UART_SetConfig+0x4e4>)
 800661a:	fba3 2301 	umull	r2, r3, r3, r1
 800661e:	095b      	lsrs	r3, r3, #5
 8006620:	2264      	movs	r2, #100	; 0x64
 8006622:	fb02 f303 	mul.w	r3, r2, r3
 8006626:	1acb      	subs	r3, r1, r3
 8006628:	011b      	lsls	r3, r3, #4
 800662a:	3332      	adds	r3, #50	; 0x32
 800662c:	4a33      	ldr	r2, [pc, #204]	; (80066fc <UART_SetConfig+0x4e4>)
 800662e:	fba2 2303 	umull	r2, r3, r2, r3
 8006632:	095b      	lsrs	r3, r3, #5
 8006634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006638:	441c      	add	r4, r3
 800663a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800663e:	2200      	movs	r2, #0
 8006640:	673b      	str	r3, [r7, #112]	; 0x70
 8006642:	677a      	str	r2, [r7, #116]	; 0x74
 8006644:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006648:	4642      	mov	r2, r8
 800664a:	464b      	mov	r3, r9
 800664c:	1891      	adds	r1, r2, r2
 800664e:	60b9      	str	r1, [r7, #8]
 8006650:	415b      	adcs	r3, r3
 8006652:	60fb      	str	r3, [r7, #12]
 8006654:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006658:	4641      	mov	r1, r8
 800665a:	1851      	adds	r1, r2, r1
 800665c:	6039      	str	r1, [r7, #0]
 800665e:	4649      	mov	r1, r9
 8006660:	414b      	adcs	r3, r1
 8006662:	607b      	str	r3, [r7, #4]
 8006664:	f04f 0200 	mov.w	r2, #0
 8006668:	f04f 0300 	mov.w	r3, #0
 800666c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006670:	4659      	mov	r1, fp
 8006672:	00cb      	lsls	r3, r1, #3
 8006674:	4651      	mov	r1, sl
 8006676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800667a:	4651      	mov	r1, sl
 800667c:	00ca      	lsls	r2, r1, #3
 800667e:	4610      	mov	r0, r2
 8006680:	4619      	mov	r1, r3
 8006682:	4603      	mov	r3, r0
 8006684:	4642      	mov	r2, r8
 8006686:	189b      	adds	r3, r3, r2
 8006688:	66bb      	str	r3, [r7, #104]	; 0x68
 800668a:	464b      	mov	r3, r9
 800668c:	460a      	mov	r2, r1
 800668e:	eb42 0303 	adc.w	r3, r2, r3
 8006692:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	663b      	str	r3, [r7, #96]	; 0x60
 800669e:	667a      	str	r2, [r7, #100]	; 0x64
 80066a0:	f04f 0200 	mov.w	r2, #0
 80066a4:	f04f 0300 	mov.w	r3, #0
 80066a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80066ac:	4649      	mov	r1, r9
 80066ae:	008b      	lsls	r3, r1, #2
 80066b0:	4641      	mov	r1, r8
 80066b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066b6:	4641      	mov	r1, r8
 80066b8:	008a      	lsls	r2, r1, #2
 80066ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80066be:	f7f9 fde7 	bl	8000290 <__aeabi_uldivmod>
 80066c2:	4602      	mov	r2, r0
 80066c4:	460b      	mov	r3, r1
 80066c6:	4b0d      	ldr	r3, [pc, #52]	; (80066fc <UART_SetConfig+0x4e4>)
 80066c8:	fba3 1302 	umull	r1, r3, r3, r2
 80066cc:	095b      	lsrs	r3, r3, #5
 80066ce:	2164      	movs	r1, #100	; 0x64
 80066d0:	fb01 f303 	mul.w	r3, r1, r3
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	011b      	lsls	r3, r3, #4
 80066d8:	3332      	adds	r3, #50	; 0x32
 80066da:	4a08      	ldr	r2, [pc, #32]	; (80066fc <UART_SetConfig+0x4e4>)
 80066dc:	fba2 2303 	umull	r2, r3, r2, r3
 80066e0:	095b      	lsrs	r3, r3, #5
 80066e2:	f003 020f 	and.w	r2, r3, #15
 80066e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4422      	add	r2, r4
 80066ee:	609a      	str	r2, [r3, #8]
}
 80066f0:	bf00      	nop
 80066f2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80066f6:	46bd      	mov	sp, r7
 80066f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066fc:	51eb851f 	.word	0x51eb851f

08006700 <malloc>:
 8006700:	4b02      	ldr	r3, [pc, #8]	; (800670c <malloc+0xc>)
 8006702:	4601      	mov	r1, r0
 8006704:	6818      	ldr	r0, [r3, #0]
 8006706:	f000 b823 	b.w	8006750 <_malloc_r>
 800670a:	bf00      	nop
 800670c:	20000154 	.word	0x20000154

08006710 <sbrk_aligned>:
 8006710:	b570      	push	{r4, r5, r6, lr}
 8006712:	4e0e      	ldr	r6, [pc, #56]	; (800674c <sbrk_aligned+0x3c>)
 8006714:	460c      	mov	r4, r1
 8006716:	6831      	ldr	r1, [r6, #0]
 8006718:	4605      	mov	r5, r0
 800671a:	b911      	cbnz	r1, 8006722 <sbrk_aligned+0x12>
 800671c:	f000 f8cc 	bl	80068b8 <_sbrk_r>
 8006720:	6030      	str	r0, [r6, #0]
 8006722:	4621      	mov	r1, r4
 8006724:	4628      	mov	r0, r5
 8006726:	f000 f8c7 	bl	80068b8 <_sbrk_r>
 800672a:	1c43      	adds	r3, r0, #1
 800672c:	d00a      	beq.n	8006744 <sbrk_aligned+0x34>
 800672e:	1cc4      	adds	r4, r0, #3
 8006730:	f024 0403 	bic.w	r4, r4, #3
 8006734:	42a0      	cmp	r0, r4
 8006736:	d007      	beq.n	8006748 <sbrk_aligned+0x38>
 8006738:	1a21      	subs	r1, r4, r0
 800673a:	4628      	mov	r0, r5
 800673c:	f000 f8bc 	bl	80068b8 <_sbrk_r>
 8006740:	3001      	adds	r0, #1
 8006742:	d101      	bne.n	8006748 <sbrk_aligned+0x38>
 8006744:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006748:	4620      	mov	r0, r4
 800674a:	bd70      	pop	{r4, r5, r6, pc}
 800674c:	200004a0 	.word	0x200004a0

08006750 <_malloc_r>:
 8006750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006754:	1ccd      	adds	r5, r1, #3
 8006756:	f025 0503 	bic.w	r5, r5, #3
 800675a:	3508      	adds	r5, #8
 800675c:	2d0c      	cmp	r5, #12
 800675e:	bf38      	it	cc
 8006760:	250c      	movcc	r5, #12
 8006762:	2d00      	cmp	r5, #0
 8006764:	4607      	mov	r7, r0
 8006766:	db01      	blt.n	800676c <_malloc_r+0x1c>
 8006768:	42a9      	cmp	r1, r5
 800676a:	d905      	bls.n	8006778 <_malloc_r+0x28>
 800676c:	230c      	movs	r3, #12
 800676e:	603b      	str	r3, [r7, #0]
 8006770:	2600      	movs	r6, #0
 8006772:	4630      	mov	r0, r6
 8006774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006778:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800684c <_malloc_r+0xfc>
 800677c:	f000 f868 	bl	8006850 <__malloc_lock>
 8006780:	f8d8 3000 	ldr.w	r3, [r8]
 8006784:	461c      	mov	r4, r3
 8006786:	bb5c      	cbnz	r4, 80067e0 <_malloc_r+0x90>
 8006788:	4629      	mov	r1, r5
 800678a:	4638      	mov	r0, r7
 800678c:	f7ff ffc0 	bl	8006710 <sbrk_aligned>
 8006790:	1c43      	adds	r3, r0, #1
 8006792:	4604      	mov	r4, r0
 8006794:	d155      	bne.n	8006842 <_malloc_r+0xf2>
 8006796:	f8d8 4000 	ldr.w	r4, [r8]
 800679a:	4626      	mov	r6, r4
 800679c:	2e00      	cmp	r6, #0
 800679e:	d145      	bne.n	800682c <_malloc_r+0xdc>
 80067a0:	2c00      	cmp	r4, #0
 80067a2:	d048      	beq.n	8006836 <_malloc_r+0xe6>
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	4631      	mov	r1, r6
 80067a8:	4638      	mov	r0, r7
 80067aa:	eb04 0903 	add.w	r9, r4, r3
 80067ae:	f000 f883 	bl	80068b8 <_sbrk_r>
 80067b2:	4581      	cmp	r9, r0
 80067b4:	d13f      	bne.n	8006836 <_malloc_r+0xe6>
 80067b6:	6821      	ldr	r1, [r4, #0]
 80067b8:	1a6d      	subs	r5, r5, r1
 80067ba:	4629      	mov	r1, r5
 80067bc:	4638      	mov	r0, r7
 80067be:	f7ff ffa7 	bl	8006710 <sbrk_aligned>
 80067c2:	3001      	adds	r0, #1
 80067c4:	d037      	beq.n	8006836 <_malloc_r+0xe6>
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	442b      	add	r3, r5
 80067ca:	6023      	str	r3, [r4, #0]
 80067cc:	f8d8 3000 	ldr.w	r3, [r8]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d038      	beq.n	8006846 <_malloc_r+0xf6>
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	42a2      	cmp	r2, r4
 80067d8:	d12b      	bne.n	8006832 <_malloc_r+0xe2>
 80067da:	2200      	movs	r2, #0
 80067dc:	605a      	str	r2, [r3, #4]
 80067de:	e00f      	b.n	8006800 <_malloc_r+0xb0>
 80067e0:	6822      	ldr	r2, [r4, #0]
 80067e2:	1b52      	subs	r2, r2, r5
 80067e4:	d41f      	bmi.n	8006826 <_malloc_r+0xd6>
 80067e6:	2a0b      	cmp	r2, #11
 80067e8:	d917      	bls.n	800681a <_malloc_r+0xca>
 80067ea:	1961      	adds	r1, r4, r5
 80067ec:	42a3      	cmp	r3, r4
 80067ee:	6025      	str	r5, [r4, #0]
 80067f0:	bf18      	it	ne
 80067f2:	6059      	strne	r1, [r3, #4]
 80067f4:	6863      	ldr	r3, [r4, #4]
 80067f6:	bf08      	it	eq
 80067f8:	f8c8 1000 	streq.w	r1, [r8]
 80067fc:	5162      	str	r2, [r4, r5]
 80067fe:	604b      	str	r3, [r1, #4]
 8006800:	4638      	mov	r0, r7
 8006802:	f104 060b 	add.w	r6, r4, #11
 8006806:	f000 f829 	bl	800685c <__malloc_unlock>
 800680a:	f026 0607 	bic.w	r6, r6, #7
 800680e:	1d23      	adds	r3, r4, #4
 8006810:	1af2      	subs	r2, r6, r3
 8006812:	d0ae      	beq.n	8006772 <_malloc_r+0x22>
 8006814:	1b9b      	subs	r3, r3, r6
 8006816:	50a3      	str	r3, [r4, r2]
 8006818:	e7ab      	b.n	8006772 <_malloc_r+0x22>
 800681a:	42a3      	cmp	r3, r4
 800681c:	6862      	ldr	r2, [r4, #4]
 800681e:	d1dd      	bne.n	80067dc <_malloc_r+0x8c>
 8006820:	f8c8 2000 	str.w	r2, [r8]
 8006824:	e7ec      	b.n	8006800 <_malloc_r+0xb0>
 8006826:	4623      	mov	r3, r4
 8006828:	6864      	ldr	r4, [r4, #4]
 800682a:	e7ac      	b.n	8006786 <_malloc_r+0x36>
 800682c:	4634      	mov	r4, r6
 800682e:	6876      	ldr	r6, [r6, #4]
 8006830:	e7b4      	b.n	800679c <_malloc_r+0x4c>
 8006832:	4613      	mov	r3, r2
 8006834:	e7cc      	b.n	80067d0 <_malloc_r+0x80>
 8006836:	230c      	movs	r3, #12
 8006838:	603b      	str	r3, [r7, #0]
 800683a:	4638      	mov	r0, r7
 800683c:	f000 f80e 	bl	800685c <__malloc_unlock>
 8006840:	e797      	b.n	8006772 <_malloc_r+0x22>
 8006842:	6025      	str	r5, [r4, #0]
 8006844:	e7dc      	b.n	8006800 <_malloc_r+0xb0>
 8006846:	605b      	str	r3, [r3, #4]
 8006848:	deff      	udf	#255	; 0xff
 800684a:	bf00      	nop
 800684c:	2000049c 	.word	0x2000049c

08006850 <__malloc_lock>:
 8006850:	4801      	ldr	r0, [pc, #4]	; (8006858 <__malloc_lock+0x8>)
 8006852:	f000 b86b 	b.w	800692c <__retarget_lock_acquire_recursive>
 8006856:	bf00      	nop
 8006858:	200005dc 	.word	0x200005dc

0800685c <__malloc_unlock>:
 800685c:	4801      	ldr	r0, [pc, #4]	; (8006864 <__malloc_unlock+0x8>)
 800685e:	f000 b866 	b.w	800692e <__retarget_lock_release_recursive>
 8006862:	bf00      	nop
 8006864:	200005dc 	.word	0x200005dc

08006868 <siprintf>:
 8006868:	b40e      	push	{r1, r2, r3}
 800686a:	b500      	push	{lr}
 800686c:	b09c      	sub	sp, #112	; 0x70
 800686e:	ab1d      	add	r3, sp, #116	; 0x74
 8006870:	9002      	str	r0, [sp, #8]
 8006872:	9006      	str	r0, [sp, #24]
 8006874:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006878:	4809      	ldr	r0, [pc, #36]	; (80068a0 <siprintf+0x38>)
 800687a:	9107      	str	r1, [sp, #28]
 800687c:	9104      	str	r1, [sp, #16]
 800687e:	4909      	ldr	r1, [pc, #36]	; (80068a4 <siprintf+0x3c>)
 8006880:	f853 2b04 	ldr.w	r2, [r3], #4
 8006884:	9105      	str	r1, [sp, #20]
 8006886:	6800      	ldr	r0, [r0, #0]
 8006888:	9301      	str	r3, [sp, #4]
 800688a:	a902      	add	r1, sp, #8
 800688c:	f000 f904 	bl	8006a98 <_svfiprintf_r>
 8006890:	9b02      	ldr	r3, [sp, #8]
 8006892:	2200      	movs	r2, #0
 8006894:	701a      	strb	r2, [r3, #0]
 8006896:	b01c      	add	sp, #112	; 0x70
 8006898:	f85d eb04 	ldr.w	lr, [sp], #4
 800689c:	b003      	add	sp, #12
 800689e:	4770      	bx	lr
 80068a0:	20000154 	.word	0x20000154
 80068a4:	ffff0208 	.word	0xffff0208

080068a8 <memset>:
 80068a8:	4402      	add	r2, r0
 80068aa:	4603      	mov	r3, r0
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d100      	bne.n	80068b2 <memset+0xa>
 80068b0:	4770      	bx	lr
 80068b2:	f803 1b01 	strb.w	r1, [r3], #1
 80068b6:	e7f9      	b.n	80068ac <memset+0x4>

080068b8 <_sbrk_r>:
 80068b8:	b538      	push	{r3, r4, r5, lr}
 80068ba:	4d06      	ldr	r5, [pc, #24]	; (80068d4 <_sbrk_r+0x1c>)
 80068bc:	2300      	movs	r3, #0
 80068be:	4604      	mov	r4, r0
 80068c0:	4608      	mov	r0, r1
 80068c2:	602b      	str	r3, [r5, #0]
 80068c4:	f7fb f998 	bl	8001bf8 <_sbrk>
 80068c8:	1c43      	adds	r3, r0, #1
 80068ca:	d102      	bne.n	80068d2 <_sbrk_r+0x1a>
 80068cc:	682b      	ldr	r3, [r5, #0]
 80068ce:	b103      	cbz	r3, 80068d2 <_sbrk_r+0x1a>
 80068d0:	6023      	str	r3, [r4, #0]
 80068d2:	bd38      	pop	{r3, r4, r5, pc}
 80068d4:	200005e0 	.word	0x200005e0

080068d8 <__errno>:
 80068d8:	4b01      	ldr	r3, [pc, #4]	; (80068e0 <__errno+0x8>)
 80068da:	6818      	ldr	r0, [r3, #0]
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	20000154 	.word	0x20000154

080068e4 <__libc_init_array>:
 80068e4:	b570      	push	{r4, r5, r6, lr}
 80068e6:	4d0d      	ldr	r5, [pc, #52]	; (800691c <__libc_init_array+0x38>)
 80068e8:	4c0d      	ldr	r4, [pc, #52]	; (8006920 <__libc_init_array+0x3c>)
 80068ea:	1b64      	subs	r4, r4, r5
 80068ec:	10a4      	asrs	r4, r4, #2
 80068ee:	2600      	movs	r6, #0
 80068f0:	42a6      	cmp	r6, r4
 80068f2:	d109      	bne.n	8006908 <__libc_init_array+0x24>
 80068f4:	4d0b      	ldr	r5, [pc, #44]	; (8006924 <__libc_init_array+0x40>)
 80068f6:	4c0c      	ldr	r4, [pc, #48]	; (8006928 <__libc_init_array+0x44>)
 80068f8:	f000 fbae 	bl	8007058 <_init>
 80068fc:	1b64      	subs	r4, r4, r5
 80068fe:	10a4      	asrs	r4, r4, #2
 8006900:	2600      	movs	r6, #0
 8006902:	42a6      	cmp	r6, r4
 8006904:	d105      	bne.n	8006912 <__libc_init_array+0x2e>
 8006906:	bd70      	pop	{r4, r5, r6, pc}
 8006908:	f855 3b04 	ldr.w	r3, [r5], #4
 800690c:	4798      	blx	r3
 800690e:	3601      	adds	r6, #1
 8006910:	e7ee      	b.n	80068f0 <__libc_init_array+0xc>
 8006912:	f855 3b04 	ldr.w	r3, [r5], #4
 8006916:	4798      	blx	r3
 8006918:	3601      	adds	r6, #1
 800691a:	e7f2      	b.n	8006902 <__libc_init_array+0x1e>
 800691c:	08007144 	.word	0x08007144
 8006920:	08007144 	.word	0x08007144
 8006924:	08007144 	.word	0x08007144
 8006928:	08007148 	.word	0x08007148

0800692c <__retarget_lock_acquire_recursive>:
 800692c:	4770      	bx	lr

0800692e <__retarget_lock_release_recursive>:
 800692e:	4770      	bx	lr

08006930 <memcpy>:
 8006930:	440a      	add	r2, r1
 8006932:	4291      	cmp	r1, r2
 8006934:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006938:	d100      	bne.n	800693c <memcpy+0xc>
 800693a:	4770      	bx	lr
 800693c:	b510      	push	{r4, lr}
 800693e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006942:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006946:	4291      	cmp	r1, r2
 8006948:	d1f9      	bne.n	800693e <memcpy+0xe>
 800694a:	bd10      	pop	{r4, pc}

0800694c <_free_r>:
 800694c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800694e:	2900      	cmp	r1, #0
 8006950:	d044      	beq.n	80069dc <_free_r+0x90>
 8006952:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006956:	9001      	str	r0, [sp, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	f1a1 0404 	sub.w	r4, r1, #4
 800695e:	bfb8      	it	lt
 8006960:	18e4      	addlt	r4, r4, r3
 8006962:	f7ff ff75 	bl	8006850 <__malloc_lock>
 8006966:	4a1e      	ldr	r2, [pc, #120]	; (80069e0 <_free_r+0x94>)
 8006968:	9801      	ldr	r0, [sp, #4]
 800696a:	6813      	ldr	r3, [r2, #0]
 800696c:	b933      	cbnz	r3, 800697c <_free_r+0x30>
 800696e:	6063      	str	r3, [r4, #4]
 8006970:	6014      	str	r4, [r2, #0]
 8006972:	b003      	add	sp, #12
 8006974:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006978:	f7ff bf70 	b.w	800685c <__malloc_unlock>
 800697c:	42a3      	cmp	r3, r4
 800697e:	d908      	bls.n	8006992 <_free_r+0x46>
 8006980:	6825      	ldr	r5, [r4, #0]
 8006982:	1961      	adds	r1, r4, r5
 8006984:	428b      	cmp	r3, r1
 8006986:	bf01      	itttt	eq
 8006988:	6819      	ldreq	r1, [r3, #0]
 800698a:	685b      	ldreq	r3, [r3, #4]
 800698c:	1949      	addeq	r1, r1, r5
 800698e:	6021      	streq	r1, [r4, #0]
 8006990:	e7ed      	b.n	800696e <_free_r+0x22>
 8006992:	461a      	mov	r2, r3
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	b10b      	cbz	r3, 800699c <_free_r+0x50>
 8006998:	42a3      	cmp	r3, r4
 800699a:	d9fa      	bls.n	8006992 <_free_r+0x46>
 800699c:	6811      	ldr	r1, [r2, #0]
 800699e:	1855      	adds	r5, r2, r1
 80069a0:	42a5      	cmp	r5, r4
 80069a2:	d10b      	bne.n	80069bc <_free_r+0x70>
 80069a4:	6824      	ldr	r4, [r4, #0]
 80069a6:	4421      	add	r1, r4
 80069a8:	1854      	adds	r4, r2, r1
 80069aa:	42a3      	cmp	r3, r4
 80069ac:	6011      	str	r1, [r2, #0]
 80069ae:	d1e0      	bne.n	8006972 <_free_r+0x26>
 80069b0:	681c      	ldr	r4, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	6053      	str	r3, [r2, #4]
 80069b6:	440c      	add	r4, r1
 80069b8:	6014      	str	r4, [r2, #0]
 80069ba:	e7da      	b.n	8006972 <_free_r+0x26>
 80069bc:	d902      	bls.n	80069c4 <_free_r+0x78>
 80069be:	230c      	movs	r3, #12
 80069c0:	6003      	str	r3, [r0, #0]
 80069c2:	e7d6      	b.n	8006972 <_free_r+0x26>
 80069c4:	6825      	ldr	r5, [r4, #0]
 80069c6:	1961      	adds	r1, r4, r5
 80069c8:	428b      	cmp	r3, r1
 80069ca:	bf04      	itt	eq
 80069cc:	6819      	ldreq	r1, [r3, #0]
 80069ce:	685b      	ldreq	r3, [r3, #4]
 80069d0:	6063      	str	r3, [r4, #4]
 80069d2:	bf04      	itt	eq
 80069d4:	1949      	addeq	r1, r1, r5
 80069d6:	6021      	streq	r1, [r4, #0]
 80069d8:	6054      	str	r4, [r2, #4]
 80069da:	e7ca      	b.n	8006972 <_free_r+0x26>
 80069dc:	b003      	add	sp, #12
 80069de:	bd30      	pop	{r4, r5, pc}
 80069e0:	2000049c 	.word	0x2000049c

080069e4 <__ssputs_r>:
 80069e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e8:	688e      	ldr	r6, [r1, #8]
 80069ea:	461f      	mov	r7, r3
 80069ec:	42be      	cmp	r6, r7
 80069ee:	680b      	ldr	r3, [r1, #0]
 80069f0:	4682      	mov	sl, r0
 80069f2:	460c      	mov	r4, r1
 80069f4:	4690      	mov	r8, r2
 80069f6:	d82c      	bhi.n	8006a52 <__ssputs_r+0x6e>
 80069f8:	898a      	ldrh	r2, [r1, #12]
 80069fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80069fe:	d026      	beq.n	8006a4e <__ssputs_r+0x6a>
 8006a00:	6965      	ldr	r5, [r4, #20]
 8006a02:	6909      	ldr	r1, [r1, #16]
 8006a04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a08:	eba3 0901 	sub.w	r9, r3, r1
 8006a0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a10:	1c7b      	adds	r3, r7, #1
 8006a12:	444b      	add	r3, r9
 8006a14:	106d      	asrs	r5, r5, #1
 8006a16:	429d      	cmp	r5, r3
 8006a18:	bf38      	it	cc
 8006a1a:	461d      	movcc	r5, r3
 8006a1c:	0553      	lsls	r3, r2, #21
 8006a1e:	d527      	bpl.n	8006a70 <__ssputs_r+0x8c>
 8006a20:	4629      	mov	r1, r5
 8006a22:	f7ff fe95 	bl	8006750 <_malloc_r>
 8006a26:	4606      	mov	r6, r0
 8006a28:	b360      	cbz	r0, 8006a84 <__ssputs_r+0xa0>
 8006a2a:	6921      	ldr	r1, [r4, #16]
 8006a2c:	464a      	mov	r2, r9
 8006a2e:	f7ff ff7f 	bl	8006930 <memcpy>
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a3c:	81a3      	strh	r3, [r4, #12]
 8006a3e:	6126      	str	r6, [r4, #16]
 8006a40:	6165      	str	r5, [r4, #20]
 8006a42:	444e      	add	r6, r9
 8006a44:	eba5 0509 	sub.w	r5, r5, r9
 8006a48:	6026      	str	r6, [r4, #0]
 8006a4a:	60a5      	str	r5, [r4, #8]
 8006a4c:	463e      	mov	r6, r7
 8006a4e:	42be      	cmp	r6, r7
 8006a50:	d900      	bls.n	8006a54 <__ssputs_r+0x70>
 8006a52:	463e      	mov	r6, r7
 8006a54:	6820      	ldr	r0, [r4, #0]
 8006a56:	4632      	mov	r2, r6
 8006a58:	4641      	mov	r1, r8
 8006a5a:	f000 fada 	bl	8007012 <memmove>
 8006a5e:	68a3      	ldr	r3, [r4, #8]
 8006a60:	1b9b      	subs	r3, r3, r6
 8006a62:	60a3      	str	r3, [r4, #8]
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	4433      	add	r3, r6
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a70:	462a      	mov	r2, r5
 8006a72:	f000 fa9f 	bl	8006fb4 <_realloc_r>
 8006a76:	4606      	mov	r6, r0
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	d1e0      	bne.n	8006a3e <__ssputs_r+0x5a>
 8006a7c:	6921      	ldr	r1, [r4, #16]
 8006a7e:	4650      	mov	r0, sl
 8006a80:	f7ff ff64 	bl	800694c <_free_r>
 8006a84:	230c      	movs	r3, #12
 8006a86:	f8ca 3000 	str.w	r3, [sl]
 8006a8a:	89a3      	ldrh	r3, [r4, #12]
 8006a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a90:	81a3      	strh	r3, [r4, #12]
 8006a92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a96:	e7e9      	b.n	8006a6c <__ssputs_r+0x88>

08006a98 <_svfiprintf_r>:
 8006a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a9c:	4698      	mov	r8, r3
 8006a9e:	898b      	ldrh	r3, [r1, #12]
 8006aa0:	061b      	lsls	r3, r3, #24
 8006aa2:	b09d      	sub	sp, #116	; 0x74
 8006aa4:	4607      	mov	r7, r0
 8006aa6:	460d      	mov	r5, r1
 8006aa8:	4614      	mov	r4, r2
 8006aaa:	d50e      	bpl.n	8006aca <_svfiprintf_r+0x32>
 8006aac:	690b      	ldr	r3, [r1, #16]
 8006aae:	b963      	cbnz	r3, 8006aca <_svfiprintf_r+0x32>
 8006ab0:	2140      	movs	r1, #64	; 0x40
 8006ab2:	f7ff fe4d 	bl	8006750 <_malloc_r>
 8006ab6:	6028      	str	r0, [r5, #0]
 8006ab8:	6128      	str	r0, [r5, #16]
 8006aba:	b920      	cbnz	r0, 8006ac6 <_svfiprintf_r+0x2e>
 8006abc:	230c      	movs	r3, #12
 8006abe:	603b      	str	r3, [r7, #0]
 8006ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ac4:	e0d0      	b.n	8006c68 <_svfiprintf_r+0x1d0>
 8006ac6:	2340      	movs	r3, #64	; 0x40
 8006ac8:	616b      	str	r3, [r5, #20]
 8006aca:	2300      	movs	r3, #0
 8006acc:	9309      	str	r3, [sp, #36]	; 0x24
 8006ace:	2320      	movs	r3, #32
 8006ad0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ad4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ad8:	2330      	movs	r3, #48	; 0x30
 8006ada:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006c80 <_svfiprintf_r+0x1e8>
 8006ade:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ae2:	f04f 0901 	mov.w	r9, #1
 8006ae6:	4623      	mov	r3, r4
 8006ae8:	469a      	mov	sl, r3
 8006aea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006aee:	b10a      	cbz	r2, 8006af4 <_svfiprintf_r+0x5c>
 8006af0:	2a25      	cmp	r2, #37	; 0x25
 8006af2:	d1f9      	bne.n	8006ae8 <_svfiprintf_r+0x50>
 8006af4:	ebba 0b04 	subs.w	fp, sl, r4
 8006af8:	d00b      	beq.n	8006b12 <_svfiprintf_r+0x7a>
 8006afa:	465b      	mov	r3, fp
 8006afc:	4622      	mov	r2, r4
 8006afe:	4629      	mov	r1, r5
 8006b00:	4638      	mov	r0, r7
 8006b02:	f7ff ff6f 	bl	80069e4 <__ssputs_r>
 8006b06:	3001      	adds	r0, #1
 8006b08:	f000 80a9 	beq.w	8006c5e <_svfiprintf_r+0x1c6>
 8006b0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b0e:	445a      	add	r2, fp
 8006b10:	9209      	str	r2, [sp, #36]	; 0x24
 8006b12:	f89a 3000 	ldrb.w	r3, [sl]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f000 80a1 	beq.w	8006c5e <_svfiprintf_r+0x1c6>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b26:	f10a 0a01 	add.w	sl, sl, #1
 8006b2a:	9304      	str	r3, [sp, #16]
 8006b2c:	9307      	str	r3, [sp, #28]
 8006b2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b32:	931a      	str	r3, [sp, #104]	; 0x68
 8006b34:	4654      	mov	r4, sl
 8006b36:	2205      	movs	r2, #5
 8006b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b3c:	4850      	ldr	r0, [pc, #320]	; (8006c80 <_svfiprintf_r+0x1e8>)
 8006b3e:	f7f9 fb57 	bl	80001f0 <memchr>
 8006b42:	9a04      	ldr	r2, [sp, #16]
 8006b44:	b9d8      	cbnz	r0, 8006b7e <_svfiprintf_r+0xe6>
 8006b46:	06d0      	lsls	r0, r2, #27
 8006b48:	bf44      	itt	mi
 8006b4a:	2320      	movmi	r3, #32
 8006b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b50:	0711      	lsls	r1, r2, #28
 8006b52:	bf44      	itt	mi
 8006b54:	232b      	movmi	r3, #43	; 0x2b
 8006b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b5a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8006b60:	d015      	beq.n	8006b8e <_svfiprintf_r+0xf6>
 8006b62:	9a07      	ldr	r2, [sp, #28]
 8006b64:	4654      	mov	r4, sl
 8006b66:	2000      	movs	r0, #0
 8006b68:	f04f 0c0a 	mov.w	ip, #10
 8006b6c:	4621      	mov	r1, r4
 8006b6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b72:	3b30      	subs	r3, #48	; 0x30
 8006b74:	2b09      	cmp	r3, #9
 8006b76:	d94d      	bls.n	8006c14 <_svfiprintf_r+0x17c>
 8006b78:	b1b0      	cbz	r0, 8006ba8 <_svfiprintf_r+0x110>
 8006b7a:	9207      	str	r2, [sp, #28]
 8006b7c:	e014      	b.n	8006ba8 <_svfiprintf_r+0x110>
 8006b7e:	eba0 0308 	sub.w	r3, r0, r8
 8006b82:	fa09 f303 	lsl.w	r3, r9, r3
 8006b86:	4313      	orrs	r3, r2
 8006b88:	9304      	str	r3, [sp, #16]
 8006b8a:	46a2      	mov	sl, r4
 8006b8c:	e7d2      	b.n	8006b34 <_svfiprintf_r+0x9c>
 8006b8e:	9b03      	ldr	r3, [sp, #12]
 8006b90:	1d19      	adds	r1, r3, #4
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	9103      	str	r1, [sp, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	bfbb      	ittet	lt
 8006b9a:	425b      	neglt	r3, r3
 8006b9c:	f042 0202 	orrlt.w	r2, r2, #2
 8006ba0:	9307      	strge	r3, [sp, #28]
 8006ba2:	9307      	strlt	r3, [sp, #28]
 8006ba4:	bfb8      	it	lt
 8006ba6:	9204      	strlt	r2, [sp, #16]
 8006ba8:	7823      	ldrb	r3, [r4, #0]
 8006baa:	2b2e      	cmp	r3, #46	; 0x2e
 8006bac:	d10c      	bne.n	8006bc8 <_svfiprintf_r+0x130>
 8006bae:	7863      	ldrb	r3, [r4, #1]
 8006bb0:	2b2a      	cmp	r3, #42	; 0x2a
 8006bb2:	d134      	bne.n	8006c1e <_svfiprintf_r+0x186>
 8006bb4:	9b03      	ldr	r3, [sp, #12]
 8006bb6:	1d1a      	adds	r2, r3, #4
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	9203      	str	r2, [sp, #12]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	bfb8      	it	lt
 8006bc0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006bc4:	3402      	adds	r4, #2
 8006bc6:	9305      	str	r3, [sp, #20]
 8006bc8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006c90 <_svfiprintf_r+0x1f8>
 8006bcc:	7821      	ldrb	r1, [r4, #0]
 8006bce:	2203      	movs	r2, #3
 8006bd0:	4650      	mov	r0, sl
 8006bd2:	f7f9 fb0d 	bl	80001f0 <memchr>
 8006bd6:	b138      	cbz	r0, 8006be8 <_svfiprintf_r+0x150>
 8006bd8:	9b04      	ldr	r3, [sp, #16]
 8006bda:	eba0 000a 	sub.w	r0, r0, sl
 8006bde:	2240      	movs	r2, #64	; 0x40
 8006be0:	4082      	lsls	r2, r0
 8006be2:	4313      	orrs	r3, r2
 8006be4:	3401      	adds	r4, #1
 8006be6:	9304      	str	r3, [sp, #16]
 8006be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bec:	4825      	ldr	r0, [pc, #148]	; (8006c84 <_svfiprintf_r+0x1ec>)
 8006bee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bf2:	2206      	movs	r2, #6
 8006bf4:	f7f9 fafc 	bl	80001f0 <memchr>
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	d038      	beq.n	8006c6e <_svfiprintf_r+0x1d6>
 8006bfc:	4b22      	ldr	r3, [pc, #136]	; (8006c88 <_svfiprintf_r+0x1f0>)
 8006bfe:	bb1b      	cbnz	r3, 8006c48 <_svfiprintf_r+0x1b0>
 8006c00:	9b03      	ldr	r3, [sp, #12]
 8006c02:	3307      	adds	r3, #7
 8006c04:	f023 0307 	bic.w	r3, r3, #7
 8006c08:	3308      	adds	r3, #8
 8006c0a:	9303      	str	r3, [sp, #12]
 8006c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c0e:	4433      	add	r3, r6
 8006c10:	9309      	str	r3, [sp, #36]	; 0x24
 8006c12:	e768      	b.n	8006ae6 <_svfiprintf_r+0x4e>
 8006c14:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c18:	460c      	mov	r4, r1
 8006c1a:	2001      	movs	r0, #1
 8006c1c:	e7a6      	b.n	8006b6c <_svfiprintf_r+0xd4>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	3401      	adds	r4, #1
 8006c22:	9305      	str	r3, [sp, #20]
 8006c24:	4619      	mov	r1, r3
 8006c26:	f04f 0c0a 	mov.w	ip, #10
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c30:	3a30      	subs	r2, #48	; 0x30
 8006c32:	2a09      	cmp	r2, #9
 8006c34:	d903      	bls.n	8006c3e <_svfiprintf_r+0x1a6>
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d0c6      	beq.n	8006bc8 <_svfiprintf_r+0x130>
 8006c3a:	9105      	str	r1, [sp, #20]
 8006c3c:	e7c4      	b.n	8006bc8 <_svfiprintf_r+0x130>
 8006c3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c42:	4604      	mov	r4, r0
 8006c44:	2301      	movs	r3, #1
 8006c46:	e7f0      	b.n	8006c2a <_svfiprintf_r+0x192>
 8006c48:	ab03      	add	r3, sp, #12
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	462a      	mov	r2, r5
 8006c4e:	4b0f      	ldr	r3, [pc, #60]	; (8006c8c <_svfiprintf_r+0x1f4>)
 8006c50:	a904      	add	r1, sp, #16
 8006c52:	4638      	mov	r0, r7
 8006c54:	f3af 8000 	nop.w
 8006c58:	1c42      	adds	r2, r0, #1
 8006c5a:	4606      	mov	r6, r0
 8006c5c:	d1d6      	bne.n	8006c0c <_svfiprintf_r+0x174>
 8006c5e:	89ab      	ldrh	r3, [r5, #12]
 8006c60:	065b      	lsls	r3, r3, #25
 8006c62:	f53f af2d 	bmi.w	8006ac0 <_svfiprintf_r+0x28>
 8006c66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c68:	b01d      	add	sp, #116	; 0x74
 8006c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c6e:	ab03      	add	r3, sp, #12
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	462a      	mov	r2, r5
 8006c74:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <_svfiprintf_r+0x1f4>)
 8006c76:	a904      	add	r1, sp, #16
 8006c78:	4638      	mov	r0, r7
 8006c7a:	f000 f879 	bl	8006d70 <_printf_i>
 8006c7e:	e7eb      	b.n	8006c58 <_svfiprintf_r+0x1c0>
 8006c80:	08007108 	.word	0x08007108
 8006c84:	08007112 	.word	0x08007112
 8006c88:	00000000 	.word	0x00000000
 8006c8c:	080069e5 	.word	0x080069e5
 8006c90:	0800710e 	.word	0x0800710e

08006c94 <_printf_common>:
 8006c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c98:	4616      	mov	r6, r2
 8006c9a:	4699      	mov	r9, r3
 8006c9c:	688a      	ldr	r2, [r1, #8]
 8006c9e:	690b      	ldr	r3, [r1, #16]
 8006ca0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	bfb8      	it	lt
 8006ca8:	4613      	movlt	r3, r2
 8006caa:	6033      	str	r3, [r6, #0]
 8006cac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cb0:	4607      	mov	r7, r0
 8006cb2:	460c      	mov	r4, r1
 8006cb4:	b10a      	cbz	r2, 8006cba <_printf_common+0x26>
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	6033      	str	r3, [r6, #0]
 8006cba:	6823      	ldr	r3, [r4, #0]
 8006cbc:	0699      	lsls	r1, r3, #26
 8006cbe:	bf42      	ittt	mi
 8006cc0:	6833      	ldrmi	r3, [r6, #0]
 8006cc2:	3302      	addmi	r3, #2
 8006cc4:	6033      	strmi	r3, [r6, #0]
 8006cc6:	6825      	ldr	r5, [r4, #0]
 8006cc8:	f015 0506 	ands.w	r5, r5, #6
 8006ccc:	d106      	bne.n	8006cdc <_printf_common+0x48>
 8006cce:	f104 0a19 	add.w	sl, r4, #25
 8006cd2:	68e3      	ldr	r3, [r4, #12]
 8006cd4:	6832      	ldr	r2, [r6, #0]
 8006cd6:	1a9b      	subs	r3, r3, r2
 8006cd8:	42ab      	cmp	r3, r5
 8006cda:	dc26      	bgt.n	8006d2a <_printf_common+0x96>
 8006cdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ce0:	1e13      	subs	r3, r2, #0
 8006ce2:	6822      	ldr	r2, [r4, #0]
 8006ce4:	bf18      	it	ne
 8006ce6:	2301      	movne	r3, #1
 8006ce8:	0692      	lsls	r2, r2, #26
 8006cea:	d42b      	bmi.n	8006d44 <_printf_common+0xb0>
 8006cec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cf0:	4649      	mov	r1, r9
 8006cf2:	4638      	mov	r0, r7
 8006cf4:	47c0      	blx	r8
 8006cf6:	3001      	adds	r0, #1
 8006cf8:	d01e      	beq.n	8006d38 <_printf_common+0xa4>
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	6922      	ldr	r2, [r4, #16]
 8006cfe:	f003 0306 	and.w	r3, r3, #6
 8006d02:	2b04      	cmp	r3, #4
 8006d04:	bf02      	ittt	eq
 8006d06:	68e5      	ldreq	r5, [r4, #12]
 8006d08:	6833      	ldreq	r3, [r6, #0]
 8006d0a:	1aed      	subeq	r5, r5, r3
 8006d0c:	68a3      	ldr	r3, [r4, #8]
 8006d0e:	bf0c      	ite	eq
 8006d10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d14:	2500      	movne	r5, #0
 8006d16:	4293      	cmp	r3, r2
 8006d18:	bfc4      	itt	gt
 8006d1a:	1a9b      	subgt	r3, r3, r2
 8006d1c:	18ed      	addgt	r5, r5, r3
 8006d1e:	2600      	movs	r6, #0
 8006d20:	341a      	adds	r4, #26
 8006d22:	42b5      	cmp	r5, r6
 8006d24:	d11a      	bne.n	8006d5c <_printf_common+0xc8>
 8006d26:	2000      	movs	r0, #0
 8006d28:	e008      	b.n	8006d3c <_printf_common+0xa8>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	4652      	mov	r2, sl
 8006d2e:	4649      	mov	r1, r9
 8006d30:	4638      	mov	r0, r7
 8006d32:	47c0      	blx	r8
 8006d34:	3001      	adds	r0, #1
 8006d36:	d103      	bne.n	8006d40 <_printf_common+0xac>
 8006d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d40:	3501      	adds	r5, #1
 8006d42:	e7c6      	b.n	8006cd2 <_printf_common+0x3e>
 8006d44:	18e1      	adds	r1, r4, r3
 8006d46:	1c5a      	adds	r2, r3, #1
 8006d48:	2030      	movs	r0, #48	; 0x30
 8006d4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d4e:	4422      	add	r2, r4
 8006d50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d58:	3302      	adds	r3, #2
 8006d5a:	e7c7      	b.n	8006cec <_printf_common+0x58>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	4622      	mov	r2, r4
 8006d60:	4649      	mov	r1, r9
 8006d62:	4638      	mov	r0, r7
 8006d64:	47c0      	blx	r8
 8006d66:	3001      	adds	r0, #1
 8006d68:	d0e6      	beq.n	8006d38 <_printf_common+0xa4>
 8006d6a:	3601      	adds	r6, #1
 8006d6c:	e7d9      	b.n	8006d22 <_printf_common+0x8e>
	...

08006d70 <_printf_i>:
 8006d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d74:	7e0f      	ldrb	r7, [r1, #24]
 8006d76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d78:	2f78      	cmp	r7, #120	; 0x78
 8006d7a:	4691      	mov	r9, r2
 8006d7c:	4680      	mov	r8, r0
 8006d7e:	460c      	mov	r4, r1
 8006d80:	469a      	mov	sl, r3
 8006d82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d86:	d807      	bhi.n	8006d98 <_printf_i+0x28>
 8006d88:	2f62      	cmp	r7, #98	; 0x62
 8006d8a:	d80a      	bhi.n	8006da2 <_printf_i+0x32>
 8006d8c:	2f00      	cmp	r7, #0
 8006d8e:	f000 80d4 	beq.w	8006f3a <_printf_i+0x1ca>
 8006d92:	2f58      	cmp	r7, #88	; 0x58
 8006d94:	f000 80c0 	beq.w	8006f18 <_printf_i+0x1a8>
 8006d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006da0:	e03a      	b.n	8006e18 <_printf_i+0xa8>
 8006da2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006da6:	2b15      	cmp	r3, #21
 8006da8:	d8f6      	bhi.n	8006d98 <_printf_i+0x28>
 8006daa:	a101      	add	r1, pc, #4	; (adr r1, 8006db0 <_printf_i+0x40>)
 8006dac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006db0:	08006e09 	.word	0x08006e09
 8006db4:	08006e1d 	.word	0x08006e1d
 8006db8:	08006d99 	.word	0x08006d99
 8006dbc:	08006d99 	.word	0x08006d99
 8006dc0:	08006d99 	.word	0x08006d99
 8006dc4:	08006d99 	.word	0x08006d99
 8006dc8:	08006e1d 	.word	0x08006e1d
 8006dcc:	08006d99 	.word	0x08006d99
 8006dd0:	08006d99 	.word	0x08006d99
 8006dd4:	08006d99 	.word	0x08006d99
 8006dd8:	08006d99 	.word	0x08006d99
 8006ddc:	08006f21 	.word	0x08006f21
 8006de0:	08006e49 	.word	0x08006e49
 8006de4:	08006edb 	.word	0x08006edb
 8006de8:	08006d99 	.word	0x08006d99
 8006dec:	08006d99 	.word	0x08006d99
 8006df0:	08006f43 	.word	0x08006f43
 8006df4:	08006d99 	.word	0x08006d99
 8006df8:	08006e49 	.word	0x08006e49
 8006dfc:	08006d99 	.word	0x08006d99
 8006e00:	08006d99 	.word	0x08006d99
 8006e04:	08006ee3 	.word	0x08006ee3
 8006e08:	682b      	ldr	r3, [r5, #0]
 8006e0a:	1d1a      	adds	r2, r3, #4
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	602a      	str	r2, [r5, #0]
 8006e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e09f      	b.n	8006f5c <_printf_i+0x1ec>
 8006e1c:	6820      	ldr	r0, [r4, #0]
 8006e1e:	682b      	ldr	r3, [r5, #0]
 8006e20:	0607      	lsls	r7, r0, #24
 8006e22:	f103 0104 	add.w	r1, r3, #4
 8006e26:	6029      	str	r1, [r5, #0]
 8006e28:	d501      	bpl.n	8006e2e <_printf_i+0xbe>
 8006e2a:	681e      	ldr	r6, [r3, #0]
 8006e2c:	e003      	b.n	8006e36 <_printf_i+0xc6>
 8006e2e:	0646      	lsls	r6, r0, #25
 8006e30:	d5fb      	bpl.n	8006e2a <_printf_i+0xba>
 8006e32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006e36:	2e00      	cmp	r6, #0
 8006e38:	da03      	bge.n	8006e42 <_printf_i+0xd2>
 8006e3a:	232d      	movs	r3, #45	; 0x2d
 8006e3c:	4276      	negs	r6, r6
 8006e3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e42:	485a      	ldr	r0, [pc, #360]	; (8006fac <_printf_i+0x23c>)
 8006e44:	230a      	movs	r3, #10
 8006e46:	e012      	b.n	8006e6e <_printf_i+0xfe>
 8006e48:	682b      	ldr	r3, [r5, #0]
 8006e4a:	6820      	ldr	r0, [r4, #0]
 8006e4c:	1d19      	adds	r1, r3, #4
 8006e4e:	6029      	str	r1, [r5, #0]
 8006e50:	0605      	lsls	r5, r0, #24
 8006e52:	d501      	bpl.n	8006e58 <_printf_i+0xe8>
 8006e54:	681e      	ldr	r6, [r3, #0]
 8006e56:	e002      	b.n	8006e5e <_printf_i+0xee>
 8006e58:	0641      	lsls	r1, r0, #25
 8006e5a:	d5fb      	bpl.n	8006e54 <_printf_i+0xe4>
 8006e5c:	881e      	ldrh	r6, [r3, #0]
 8006e5e:	4853      	ldr	r0, [pc, #332]	; (8006fac <_printf_i+0x23c>)
 8006e60:	2f6f      	cmp	r7, #111	; 0x6f
 8006e62:	bf0c      	ite	eq
 8006e64:	2308      	moveq	r3, #8
 8006e66:	230a      	movne	r3, #10
 8006e68:	2100      	movs	r1, #0
 8006e6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e6e:	6865      	ldr	r5, [r4, #4]
 8006e70:	60a5      	str	r5, [r4, #8]
 8006e72:	2d00      	cmp	r5, #0
 8006e74:	bfa2      	ittt	ge
 8006e76:	6821      	ldrge	r1, [r4, #0]
 8006e78:	f021 0104 	bicge.w	r1, r1, #4
 8006e7c:	6021      	strge	r1, [r4, #0]
 8006e7e:	b90e      	cbnz	r6, 8006e84 <_printf_i+0x114>
 8006e80:	2d00      	cmp	r5, #0
 8006e82:	d04b      	beq.n	8006f1c <_printf_i+0x1ac>
 8006e84:	4615      	mov	r5, r2
 8006e86:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e8a:	fb03 6711 	mls	r7, r3, r1, r6
 8006e8e:	5dc7      	ldrb	r7, [r0, r7]
 8006e90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e94:	4637      	mov	r7, r6
 8006e96:	42bb      	cmp	r3, r7
 8006e98:	460e      	mov	r6, r1
 8006e9a:	d9f4      	bls.n	8006e86 <_printf_i+0x116>
 8006e9c:	2b08      	cmp	r3, #8
 8006e9e:	d10b      	bne.n	8006eb8 <_printf_i+0x148>
 8006ea0:	6823      	ldr	r3, [r4, #0]
 8006ea2:	07de      	lsls	r6, r3, #31
 8006ea4:	d508      	bpl.n	8006eb8 <_printf_i+0x148>
 8006ea6:	6923      	ldr	r3, [r4, #16]
 8006ea8:	6861      	ldr	r1, [r4, #4]
 8006eaa:	4299      	cmp	r1, r3
 8006eac:	bfde      	ittt	le
 8006eae:	2330      	movle	r3, #48	; 0x30
 8006eb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006eb4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006eb8:	1b52      	subs	r2, r2, r5
 8006eba:	6122      	str	r2, [r4, #16]
 8006ebc:	f8cd a000 	str.w	sl, [sp]
 8006ec0:	464b      	mov	r3, r9
 8006ec2:	aa03      	add	r2, sp, #12
 8006ec4:	4621      	mov	r1, r4
 8006ec6:	4640      	mov	r0, r8
 8006ec8:	f7ff fee4 	bl	8006c94 <_printf_common>
 8006ecc:	3001      	adds	r0, #1
 8006ece:	d14a      	bne.n	8006f66 <_printf_i+0x1f6>
 8006ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ed4:	b004      	add	sp, #16
 8006ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	f043 0320 	orr.w	r3, r3, #32
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	4833      	ldr	r0, [pc, #204]	; (8006fb0 <_printf_i+0x240>)
 8006ee4:	2778      	movs	r7, #120	; 0x78
 8006ee6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006eea:	6823      	ldr	r3, [r4, #0]
 8006eec:	6829      	ldr	r1, [r5, #0]
 8006eee:	061f      	lsls	r7, r3, #24
 8006ef0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ef4:	d402      	bmi.n	8006efc <_printf_i+0x18c>
 8006ef6:	065f      	lsls	r7, r3, #25
 8006ef8:	bf48      	it	mi
 8006efa:	b2b6      	uxthmi	r6, r6
 8006efc:	07df      	lsls	r7, r3, #31
 8006efe:	bf48      	it	mi
 8006f00:	f043 0320 	orrmi.w	r3, r3, #32
 8006f04:	6029      	str	r1, [r5, #0]
 8006f06:	bf48      	it	mi
 8006f08:	6023      	strmi	r3, [r4, #0]
 8006f0a:	b91e      	cbnz	r6, 8006f14 <_printf_i+0x1a4>
 8006f0c:	6823      	ldr	r3, [r4, #0]
 8006f0e:	f023 0320 	bic.w	r3, r3, #32
 8006f12:	6023      	str	r3, [r4, #0]
 8006f14:	2310      	movs	r3, #16
 8006f16:	e7a7      	b.n	8006e68 <_printf_i+0xf8>
 8006f18:	4824      	ldr	r0, [pc, #144]	; (8006fac <_printf_i+0x23c>)
 8006f1a:	e7e4      	b.n	8006ee6 <_printf_i+0x176>
 8006f1c:	4615      	mov	r5, r2
 8006f1e:	e7bd      	b.n	8006e9c <_printf_i+0x12c>
 8006f20:	682b      	ldr	r3, [r5, #0]
 8006f22:	6826      	ldr	r6, [r4, #0]
 8006f24:	6961      	ldr	r1, [r4, #20]
 8006f26:	1d18      	adds	r0, r3, #4
 8006f28:	6028      	str	r0, [r5, #0]
 8006f2a:	0635      	lsls	r5, r6, #24
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	d501      	bpl.n	8006f34 <_printf_i+0x1c4>
 8006f30:	6019      	str	r1, [r3, #0]
 8006f32:	e002      	b.n	8006f3a <_printf_i+0x1ca>
 8006f34:	0670      	lsls	r0, r6, #25
 8006f36:	d5fb      	bpl.n	8006f30 <_printf_i+0x1c0>
 8006f38:	8019      	strh	r1, [r3, #0]
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	6123      	str	r3, [r4, #16]
 8006f3e:	4615      	mov	r5, r2
 8006f40:	e7bc      	b.n	8006ebc <_printf_i+0x14c>
 8006f42:	682b      	ldr	r3, [r5, #0]
 8006f44:	1d1a      	adds	r2, r3, #4
 8006f46:	602a      	str	r2, [r5, #0]
 8006f48:	681d      	ldr	r5, [r3, #0]
 8006f4a:	6862      	ldr	r2, [r4, #4]
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	4628      	mov	r0, r5
 8006f50:	f7f9 f94e 	bl	80001f0 <memchr>
 8006f54:	b108      	cbz	r0, 8006f5a <_printf_i+0x1ea>
 8006f56:	1b40      	subs	r0, r0, r5
 8006f58:	6060      	str	r0, [r4, #4]
 8006f5a:	6863      	ldr	r3, [r4, #4]
 8006f5c:	6123      	str	r3, [r4, #16]
 8006f5e:	2300      	movs	r3, #0
 8006f60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f64:	e7aa      	b.n	8006ebc <_printf_i+0x14c>
 8006f66:	6923      	ldr	r3, [r4, #16]
 8006f68:	462a      	mov	r2, r5
 8006f6a:	4649      	mov	r1, r9
 8006f6c:	4640      	mov	r0, r8
 8006f6e:	47d0      	blx	sl
 8006f70:	3001      	adds	r0, #1
 8006f72:	d0ad      	beq.n	8006ed0 <_printf_i+0x160>
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	079b      	lsls	r3, r3, #30
 8006f78:	d413      	bmi.n	8006fa2 <_printf_i+0x232>
 8006f7a:	68e0      	ldr	r0, [r4, #12]
 8006f7c:	9b03      	ldr	r3, [sp, #12]
 8006f7e:	4298      	cmp	r0, r3
 8006f80:	bfb8      	it	lt
 8006f82:	4618      	movlt	r0, r3
 8006f84:	e7a6      	b.n	8006ed4 <_printf_i+0x164>
 8006f86:	2301      	movs	r3, #1
 8006f88:	4632      	mov	r2, r6
 8006f8a:	4649      	mov	r1, r9
 8006f8c:	4640      	mov	r0, r8
 8006f8e:	47d0      	blx	sl
 8006f90:	3001      	adds	r0, #1
 8006f92:	d09d      	beq.n	8006ed0 <_printf_i+0x160>
 8006f94:	3501      	adds	r5, #1
 8006f96:	68e3      	ldr	r3, [r4, #12]
 8006f98:	9903      	ldr	r1, [sp, #12]
 8006f9a:	1a5b      	subs	r3, r3, r1
 8006f9c:	42ab      	cmp	r3, r5
 8006f9e:	dcf2      	bgt.n	8006f86 <_printf_i+0x216>
 8006fa0:	e7eb      	b.n	8006f7a <_printf_i+0x20a>
 8006fa2:	2500      	movs	r5, #0
 8006fa4:	f104 0619 	add.w	r6, r4, #25
 8006fa8:	e7f5      	b.n	8006f96 <_printf_i+0x226>
 8006faa:	bf00      	nop
 8006fac:	08007119 	.word	0x08007119
 8006fb0:	0800712a 	.word	0x0800712a

08006fb4 <_realloc_r>:
 8006fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb8:	4680      	mov	r8, r0
 8006fba:	4614      	mov	r4, r2
 8006fbc:	460e      	mov	r6, r1
 8006fbe:	b921      	cbnz	r1, 8006fca <_realloc_r+0x16>
 8006fc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	f7ff bbc3 	b.w	8006750 <_malloc_r>
 8006fca:	b92a      	cbnz	r2, 8006fd8 <_realloc_r+0x24>
 8006fcc:	f7ff fcbe 	bl	800694c <_free_r>
 8006fd0:	4625      	mov	r5, r4
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fd8:	f000 f835 	bl	8007046 <_malloc_usable_size_r>
 8006fdc:	4284      	cmp	r4, r0
 8006fde:	4607      	mov	r7, r0
 8006fe0:	d802      	bhi.n	8006fe8 <_realloc_r+0x34>
 8006fe2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006fe6:	d812      	bhi.n	800700e <_realloc_r+0x5a>
 8006fe8:	4621      	mov	r1, r4
 8006fea:	4640      	mov	r0, r8
 8006fec:	f7ff fbb0 	bl	8006750 <_malloc_r>
 8006ff0:	4605      	mov	r5, r0
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	d0ed      	beq.n	8006fd2 <_realloc_r+0x1e>
 8006ff6:	42bc      	cmp	r4, r7
 8006ff8:	4622      	mov	r2, r4
 8006ffa:	4631      	mov	r1, r6
 8006ffc:	bf28      	it	cs
 8006ffe:	463a      	movcs	r2, r7
 8007000:	f7ff fc96 	bl	8006930 <memcpy>
 8007004:	4631      	mov	r1, r6
 8007006:	4640      	mov	r0, r8
 8007008:	f7ff fca0 	bl	800694c <_free_r>
 800700c:	e7e1      	b.n	8006fd2 <_realloc_r+0x1e>
 800700e:	4635      	mov	r5, r6
 8007010:	e7df      	b.n	8006fd2 <_realloc_r+0x1e>

08007012 <memmove>:
 8007012:	4288      	cmp	r0, r1
 8007014:	b510      	push	{r4, lr}
 8007016:	eb01 0402 	add.w	r4, r1, r2
 800701a:	d902      	bls.n	8007022 <memmove+0x10>
 800701c:	4284      	cmp	r4, r0
 800701e:	4623      	mov	r3, r4
 8007020:	d807      	bhi.n	8007032 <memmove+0x20>
 8007022:	1e43      	subs	r3, r0, #1
 8007024:	42a1      	cmp	r1, r4
 8007026:	d008      	beq.n	800703a <memmove+0x28>
 8007028:	f811 2b01 	ldrb.w	r2, [r1], #1
 800702c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007030:	e7f8      	b.n	8007024 <memmove+0x12>
 8007032:	4402      	add	r2, r0
 8007034:	4601      	mov	r1, r0
 8007036:	428a      	cmp	r2, r1
 8007038:	d100      	bne.n	800703c <memmove+0x2a>
 800703a:	bd10      	pop	{r4, pc}
 800703c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007040:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007044:	e7f7      	b.n	8007036 <memmove+0x24>

08007046 <_malloc_usable_size_r>:
 8007046:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800704a:	1f18      	subs	r0, r3, #4
 800704c:	2b00      	cmp	r3, #0
 800704e:	bfbc      	itt	lt
 8007050:	580b      	ldrlt	r3, [r1, r0]
 8007052:	18c0      	addlt	r0, r0, r3
 8007054:	4770      	bx	lr
	...

08007058 <_init>:
 8007058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705a:	bf00      	nop
 800705c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800705e:	bc08      	pop	{r3}
 8007060:	469e      	mov	lr, r3
 8007062:	4770      	bx	lr

08007064 <_fini>:
 8007064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007066:	bf00      	nop
 8007068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706a:	bc08      	pop	{r3}
 800706c:	469e      	mov	lr, r3
 800706e:	4770      	bx	lr
